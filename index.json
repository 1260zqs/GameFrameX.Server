{
  "api/GameFrameX.Core.Abstractions.Agent.IComponentAgent.html": {
    "href": "api/GameFrameX.Core.Abstractions.Agent.IComponentAgent.html",
    "title": "Interface IComponentAgent | GameFrameX.Server",
    "keywords": "Interface IComponentAgent Namespace GameFrameX.Core.Abstractions.Agent Assembly GameFrameX.Core.dll 组件代理接口 public interface IComponentAgent : IWorker Inherited Members IWorker.Tell(Action, int) IWorker.Tell(Func<Task>, int) IWorker.SendAsync(Action, int) IWorker.SendAsync<T>(Func<T>, int) IWorker.SendAsync(Func<Task>, int, bool) IWorker.SendAsync<T>(Func<Task<T>>, int) Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties ActorId 获取Actor的唯一标识 long ActorId { get; } Property Value long Owner 获取或设置组件的所有者 IComponent Owner { get; } Property Value IComponent OwnerType 获取所有者的类型 ushort OwnerType { get; } Property Value ushort Methods Active() 激活组件代理 void Active() GetComponentAgent(Type) 根据代理类型获取代理组件 Task<IComponentAgent> GetComponentAgent(Type agentType) Parameters agentType Type 代理类型 Returns Task<IComponentAgent> 代理组件 GetComponentAgent<T>() 根据泛型代理类型获取代理组件 Task<T> GetComponentAgent<T>() where T : IComponentAgent Returns Task<T> 代理组件 Type Parameters T 代理组件的类型 Inactive() 反激活组件代理 Task Inactive() Returns Task 一个表示异步操作的任务 SetOwner(IComponent) 设置组件的所有者 void SetOwner(IComponent owner) Parameters owner IComponent 所有者"
  },
  "api/GameFrameX.Core.Abstractions.Agent.html": {
    "href": "api/GameFrameX.Core.Abstractions.Agent.html",
    "title": "Namespace GameFrameX.Core.Abstractions.Agent | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.Core.Abstractions.Agent Interfaces IComponentAgent 组件代理接口"
  },
  "api/GameFrameX.Core.Abstractions.Attribute.ComponentTypeAttribute.html": {
    "href": "api/GameFrameX.Core.Abstractions.Attribute.ComponentTypeAttribute.html",
    "title": "Class ComponentTypeAttribute | GameFrameX.Server",
    "keywords": "Class ComponentTypeAttribute Namespace GameFrameX.Core.Abstractions.Attribute Assembly GameFrameX.Core.dll 组件类型标记 [AttributeUsage(AttributeTargets.Class)] public class ComponentTypeAttribute : Attribute Inheritance object Attribute ComponentTypeAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors ComponentTypeAttribute(ushort) 组件类型 public ComponentTypeAttribute(ushort type) Parameters type ushort 组件类型,值应大于0且小于ActorType.Max并且不为ActorType.Separator Properties Type 组件类型 public ushort Type { get; } Property Value ushort"
  },
  "api/GameFrameX.Core.Abstractions.Attribute.DiscardAttribute.html": {
    "href": "api/GameFrameX.Core.Abstractions.Attribute.DiscardAttribute.html",
    "title": "Class DiscardAttribute | GameFrameX.Server",
    "keywords": "Class DiscardAttribute Namespace GameFrameX.Core.Abstractions.Attribute Assembly GameFrameX.Core.dll 此方法使用了弃元运算符，不会等待执行(将强制追加到队列末端执行) [AttributeUsage(AttributeTargets.Method)] public sealed class DiscardAttribute : Attribute Inheritance object Attribute DiscardAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object)"
  },
  "api/GameFrameX.Core.Abstractions.Attribute.FuncAttribute.html": {
    "href": "api/GameFrameX.Core.Abstractions.Attribute.FuncAttribute.html",
    "title": "Class FuncAttribute | GameFrameX.Server",
    "keywords": "Class FuncAttribute Namespace GameFrameX.Core.Abstractions.Attribute Assembly GameFrameX.Core.dll 有关组件的功能属性 [AttributeUsage(AttributeTargets.Class)] public class FuncAttribute : Attribute Inheritance object Attribute FuncAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors FuncAttribute(short) 初始化功能属性 public FuncAttribute(short func) Parameters func short 功能标识 Fields Func 功能标识 public readonly short Func Field Value short"
  },
  "api/GameFrameX.Core.Abstractions.Attribute.ServiceAttribute.html": {
    "href": "api/GameFrameX.Core.Abstractions.Attribute.ServiceAttribute.html",
    "title": "Class ServiceAttribute | GameFrameX.Server",
    "keywords": "Class ServiceAttribute Namespace GameFrameX.Core.Abstractions.Attribute Assembly GameFrameX.Core.dll 此方法会提供给其他Actor访问(对外提供服务) [AttributeUsage(AttributeTargets.Method)] public sealed class ServiceAttribute : Attribute Inheritance object Attribute ServiceAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object)"
  },
  "api/GameFrameX.Core.Abstractions.Attribute.ThreadSafeAttribute.html": {
    "href": "api/GameFrameX.Core.Abstractions.Attribute.ThreadSafeAttribute.html",
    "title": "Class ThreadSafeAttribute | GameFrameX.Server",
    "keywords": "Class ThreadSafeAttribute Namespace GameFrameX.Core.Abstractions.Attribute Assembly GameFrameX.Core.dll 此方法线程安全 [AttributeUsage(AttributeTargets.Method)] public sealed class ThreadSafeAttribute : Attribute Inheritance object Attribute ThreadSafeAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object)"
  },
  "api/GameFrameX.Core.Abstractions.Attribute.TimeOutAttribute.html": {
    "href": "api/GameFrameX.Core.Abstractions.Attribute.TimeOutAttribute.html",
    "title": "Class TimeOutAttribute | GameFrameX.Server",
    "keywords": "Class TimeOutAttribute Namespace GameFrameX.Core.Abstractions.Attribute Assembly GameFrameX.Core.dll 超时时间(毫秒) [AttributeUsage(AttributeTargets.Method)] public sealed class TimeOutAttribute : Attribute Inheritance object Attribute TimeOutAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors TimeOutAttribute(int) 超时时间 public TimeOutAttribute(int timeOut) Parameters timeOut int 时间.单位毫秒 TimeOutAttribute(TimeSpan) 超时时间 public TimeOutAttribute(TimeSpan timeOut) Parameters timeOut TimeSpan Properties TimeOut 超时时间 public int TimeOut { get; } Property Value int"
  },
  "api/GameFrameX.Core.Abstractions.Attribute.html": {
    "href": "api/GameFrameX.Core.Abstractions.Attribute.html",
    "title": "Namespace GameFrameX.Core.Abstractions.Attribute | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.Core.Abstractions.Attribute Classes ComponentTypeAttribute 组件类型标记 DiscardAttribute 此方法使用了弃元运算符，不会等待执行(将强制追加到队列末端执行) FuncAttribute 有关组件的功能属性 ServiceAttribute 此方法会提供给其他Actor访问(对外提供服务) ThreadSafeAttribute 此方法线程安全 TimeOutAttribute 超时时间(毫秒)"
  },
  "api/GameFrameX.Core.Abstractions.Events.Event.html": {
    "href": "api/GameFrameX.Core.Abstractions.Events.Event.html",
    "title": "Struct Event | GameFrameX.Server",
    "keywords": "Struct Event Namespace GameFrameX.Core.Abstractions.Events Assembly GameFrameX.Core.dll 事件参数 public struct Event Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Fields Data 事件参数 public Param Data Field Value Param EventId 事件id public int EventId Field Value int Null 空 public static Event Null Field Value Event"
  },
  "api/GameFrameX.Core.Abstractions.Events.EventInfoAttribute.html": {
    "href": "api/GameFrameX.Core.Abstractions.Events.EventInfoAttribute.html",
    "title": "Class EventInfoAttribute | GameFrameX.Server",
    "keywords": "Class EventInfoAttribute Namespace GameFrameX.Core.Abstractions.Events Assembly GameFrameX.Core.dll 事件监听器 [AttributeUsage(AttributeTargets.Class, AllowMultiple = true)] public class EventInfoAttribute : Attribute Inheritance object Attribute EventInfoAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors EventInfoAttribute(int) 事件监听器 public EventInfoAttribute(int eventId) Parameters eventId int 事件id Properties EventId 事件id public int EventId { get; } Property Value int"
  },
  "api/GameFrameX.Core.Abstractions.Events.IEventListener.html": {
    "href": "api/GameFrameX.Core.Abstractions.Events.IEventListener.html",
    "title": "Interface IEventListener | GameFrameX.Server",
    "keywords": "Interface IEventListener Namespace GameFrameX.Core.Abstractions.Events Assembly GameFrameX.Core.dll 每个实例其实都是单例的 public interface IEventListener Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties AgentType 获取事件代理类型 Type AgentType { get; } Property Value Type 事件代理的类型 Methods HandleEvent(IComponentAgent, Event) 事件处理函数 Task HandleEvent(IComponentAgent agent, Event evt) Parameters agent IComponentAgent 组件代理 evt Event 事件 Returns Task 一个表示异步操作的任务"
  },
  "api/GameFrameX.Core.Abstractions.Events.html": {
    "href": "api/GameFrameX.Core.Abstractions.Events.html",
    "title": "Namespace GameFrameX.Core.Abstractions.Events | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.Core.Abstractions.Events Classes EventInfoAttribute 事件监听器 Structs Event 事件参数 Interfaces IEventListener 每个实例其实都是单例的"
  },
  "api/GameFrameX.Core.Abstractions.Exception.AssertionArgumentException.html": {
    "href": "api/GameFrameX.Core.Abstractions.Exception.AssertionArgumentException.html",
    "title": "Class AssertionArgumentException | GameFrameX.Server",
    "keywords": "Class AssertionArgumentException Namespace GameFrameX.Core.Abstractions.Exception Assembly GameFrameX.Core.dll 断言异常 public abstract class AssertionArgumentException : Exception, ISerializable Inheritance object Exception AssertionArgumentException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors AssertionArgumentException(int, string) 构造 protected AssertionArgumentException(int errorCode, string message) Parameters errorCode int 错误码 message string 错误信息 Properties ErrorCode 错误码 public int ErrorCode { get; } Property Value int"
  },
  "api/GameFrameX.Core.Abstractions.Exception.html": {
    "href": "api/GameFrameX.Core.Abstractions.Exception.html",
    "title": "Namespace GameFrameX.Core.Abstractions.Exception | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.Core.Abstractions.Exception Classes AssertionArgumentException 断言异常"
  },
  "api/GameFrameX.Core.Abstractions.IActor.html": {
    "href": "api/GameFrameX.Core.Abstractions.IActor.html",
    "title": "Interface IActor | GameFrameX.Server",
    "keywords": "Interface IActor Namespace GameFrameX.Core.Abstractions Assembly GameFrameX.Core.dll IActor 接口定义 public interface IActor : IWorker Inherited Members IWorker.Tell(Action, int) IWorker.Tell(Func<Task>, int) IWorker.SendAsync(Action, int) IWorker.SendAsync<T>(Func<T>, int) IWorker.SendAsync(Func<Task>, int, bool) IWorker.SendAsync<T>(Func<Task<T>>, int) Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties AutoRecycle 获取是否自动回收 bool AutoRecycle { get; } Property Value bool Id 获取或设置 IActor 的唯一标识 long Id { get; set; } Property Value long ScheduleIdSet 获取订阅的哈希列表 HashSet<long> ScheduleIdSet { get; } Property Value HashSet<long> Type 获取或设置 Actor 类型 ushort Type { get; set; } Property Value ushort WorkerActor 获取工作 Actor IWorkerActor WorkerActor { get; } Property Value IWorkerActor Methods ClearAgent() 清理全部代理 void ClearAgent() CrossDay(int) Actor 跨天处理 Task CrossDay(int serverDay) Parameters serverDay int 服务器运行天数 Returns Task 一个表示异步操作的任务 GetComponentAgent(Type) 根据组件类型获取对应的 IComponentAgent Task<IComponentAgent> GetComponentAgent(Type agentType) Parameters agentType Type 组件类型 Returns Task<IComponentAgent> 一个表示异步操作的任务，返回 IComponentAgent 实例 GetComponentAgent<T>() 根据组件类型获取对应的 IComponentAgent Task<T> GetComponentAgent<T>() where T : IComponentAgent Returns Task<T> 一个表示异步操作的任务，返回指定类型的 IComponentAgent 实例 Type Parameters T 组件类型 Inactive() 反激活所有组件 Task Inactive() Returns Task 一个表示异步操作的任务 SetAutoRecycle(bool) 设置自动回收标记 void SetAutoRecycle(bool autoRecycle) Parameters autoRecycle bool 是否自动回收"
  },
  "api/GameFrameX.Core.Abstractions.IComponent.html": {
    "href": "api/GameFrameX.Core.Abstractions.IComponent.html",
    "title": "Interface IComponent | GameFrameX.Server",
    "keywords": "Interface IComponent Namespace GameFrameX.Core.Abstractions Assembly GameFrameX.Core.dll 组件接口 public interface IComponent Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties Actor Actor对象 IActor Actor { get; set; } Property Value IActor"
  },
  "api/GameFrameX.Core.Abstractions.IState.html": {
    "href": "api/GameFrameX.Core.Abstractions.IState.html",
    "title": "Interface IState | GameFrameX.Server",
    "keywords": "Interface IState Namespace GameFrameX.Core.Abstractions Assembly GameFrameX.Core.dll 状态接口 public interface IState Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods ReadStateAsync() 读取状态 Task ReadStateAsync() Returns Task 一个表示异步操作的任务"
  },
  "api/GameFrameX.Core.Abstractions.IWorker.html": {
    "href": "api/GameFrameX.Core.Abstractions.IWorker.html",
    "title": "Interface IWorker | GameFrameX.Server",
    "keywords": "Interface IWorker Namespace GameFrameX.Core.Abstractions Assembly GameFrameX.Core.dll IWorker接口定义 public interface IWorker Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods SendAsync(Action, int) 异步发送无返回值的工作指令 Task SendAsync(Action work, int timeOut = 2147483647) Parameters work Action 工作内容 timeOut int 超时时间，默认为int.MaxValue Returns Task 一个表示异步操作的任务 SendAsync(Func<Task>, int, bool) 异步发送有返回值的工作指令 Task SendAsync(Func<Task> work, int timeOut = 2147483647, bool checkLock = true) Parameters work Func<Task> 工作内容 timeOut int 超时时间，默认为int.MaxValue checkLock bool 是否检查锁 Returns Task 一个表示异步操作的任务 SendAsync<T>(Func<Task<T>>, int) 异步发送有返回值的工作指令 Task<T> SendAsync<T>(Func<Task<T>> work, int timeOut = 2147483647) Parameters work Func<Task<T>> 工作内容 timeOut int 超时时间，默认为int.MaxValue Returns Task<T> 一个表示异步操作的任务，任务结果为委托的返回值 Type Parameters T 泛型参数 SendAsync<T>(Func<T>, int) 异步发送有返回值的工作指令 Task<T> SendAsync<T>(Func<T> work, int timeOut = 2147483647) Parameters work Func<T> 工作内容 timeOut int 超时时间，默认为int.MaxValue Returns Task<T> 一个表示异步操作的任务，任务结果为委托的返回值 Type Parameters T 泛型参数 Tell(Action, int) 发送无返回值的工作指令 void Tell(Action work, int timeOut = 2147483647) Parameters work Action 工作内容 timeOut int 超时时间，默认为int.MaxValue Tell(Func<Task>, int) 发送有返回值的工作指令 void Tell(Func<Task> work, int timeOut = 2147483647) Parameters work Func<Task> 工作内容 timeOut int 超时时间，默认为int.MaxValue"
  },
  "api/GameFrameX.Core.Abstractions.IWorkerActor.html": {
    "href": "api/GameFrameX.Core.Abstractions.IWorkerActor.html",
    "title": "Interface IWorkerActor | GameFrameX.Server",
    "keywords": "Interface IWorkerActor Namespace GameFrameX.Core.Abstractions Assembly GameFrameX.Core.dll 工作Actor接口定义 public interface IWorkerActor : IWorker Inherited Members IWorker.Tell(Action, int) IWorker.Tell(Func<Task>, int) IWorker.SendAsync(Action, int) IWorker.SendAsync<T>(Func<T>, int) IWorker.SendAsync(Func<Task>, int, bool) IWorker.SendAsync<T>(Func<Task<T>>, int) Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods Enqueue(Action, long, bool, int) 将无返回值的委托入队 Task Enqueue(Action work, long callChainId, bool discard = false, int timeOut = 2147483647) Parameters work Action 无返回值的委托 callChainId long 调用链ID discard bool 是否强制入队 timeOut int 超时时间 Returns Task 一个表示异步操作的任务 Enqueue(Func<Task>, long, bool, int) 将返回Task的委托入队 Task Enqueue(Func<Task> work, long callChainId, bool discard = false, int timeOut = 2147483647) Parameters work Func<Task> 返回Task的委托 callChainId long 调用链ID discard bool 是否强制入队 timeOut int 超时时间 Returns Task 一个表示异步操作的任务 Enqueue<T>(Func<Task<T>>, long, bool, int) 将返回Task 的委托入队 Task<T> Enqueue<T>(Func<Task<T>> work, long callChainId, bool discard = false, int timeOut = 2147483647) Parameters work Func<Task<T>> 返回Task 的委托 callChainId long 调用链ID discard bool 是否强制入队 timeOut int 超时时间 Returns Task<T> 一个表示异步操作的任务，任务结果为委托的返回值 Type Parameters T 泛型参数 Enqueue<T>(Func<T>, long, bool, int) 将有返回值的委托入队 Task<T> Enqueue<T>(Func<T> work, long callChainId, bool discard = false, int timeOut = 2147483647) Parameters work Func<T> 有返回值的委托 callChainId long 调用链ID discard bool 是否强制入队 timeOut int 超时时间 Returns Task<T> 一个表示异步操作的任务，任务结果为委托的返回值 Type Parameters T 泛型参数 IsNeedEnqueue() 判断是否需要入队 (bool needEnqueue, long chainId) IsNeedEnqueue() Returns (bool needEnqueue, long chainId) 一个元组，包含是否需要入队的布尔值和调用链ID"
  },
  "api/GameFrameX.Core.Abstractions.RuntimeContext.html": {
    "href": "api/GameFrameX.Core.Abstractions.RuntimeContext.html",
    "title": "Class RuntimeContext | GameFrameX.Server",
    "keywords": "Class RuntimeContext Namespace GameFrameX.Core.Abstractions Assembly GameFrameX.Core.dll 运行时上下文 public static class RuntimeContext Inheritance object RuntimeContext Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CurrentActor 当前ActorID public static long CurrentActor { get; } Property Value long CurrentChainId 当前链ID public static long CurrentChainId { get; } Property Value long Methods ResetContext() 重置上下文 public static void ResetContext() SetContext(long, long) 设置上下文 public static void SetContext(long callChainId, long actorId) Parameters callChainId long actorId long"
  },
  "api/GameFrameX.Core.Abstractions.Timer.ICrossDay.html": {
    "href": "api/GameFrameX.Core.Abstractions.Timer.ICrossDay.html",
    "title": "Interface ICrossDay | GameFrameX.Server",
    "keywords": "Interface ICrossDay Namespace GameFrameX.Core.Abstractions.Timer Assembly GameFrameX.Core.dll 跨天接口 public interface ICrossDay Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods OnCrossDay(int) 在跨天时触发的方法 Task OnCrossDay(int openServerDay) Parameters openServerDay int 开服天数 Returns Task 表示异步操作的任务"
  },
  "api/GameFrameX.Core.Abstractions.Timer.ICrossHour.html": {
    "href": "api/GameFrameX.Core.Abstractions.Timer.ICrossHour.html",
    "title": "Interface ICrossHour | GameFrameX.Server",
    "keywords": "Interface ICrossHour Namespace GameFrameX.Core.Abstractions.Timer Assembly GameFrameX.Core.dll 跨小时接口 public interface ICrossHour Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods OnCrossHour(int) 在跨小时触发的方法 Task OnCrossHour(int hour) Parameters hour int 当前24小时制的小时数 Returns Task 表示异步操作的任务"
  },
  "api/GameFrameX.Core.Abstractions.Timer.html": {
    "href": "api/GameFrameX.Core.Abstractions.Timer.html",
    "title": "Namespace GameFrameX.Core.Abstractions.Timer | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.Core.Abstractions.Timer Interfaces ICrossDay 跨天接口 ICrossHour 跨小时接口"
  },
  "api/GameFrameX.Core.Abstractions.html": {
    "href": "api/GameFrameX.Core.Abstractions.html",
    "title": "Namespace GameFrameX.Core.Abstractions | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.Core.Abstractions Classes RuntimeContext 运行时上下文 Interfaces IActor IActor 接口定义 IComponent 组件接口 IState 状态接口 IWorker IWorker接口定义 IWorkerActor 工作Actor接口定义"
  },
  "api/GameFrameX.Core.Actors.Actor.html": {
    "href": "api/GameFrameX.Core.Actors.Actor.html",
    "title": "Class Actor | GameFrameX.Server",
    "keywords": "Class Actor Namespace GameFrameX.Core.Actors Assembly GameFrameX.Core.dll Actor public sealed class Actor : IActor, IWorker Inheritance object Actor Implements IActor IWorker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors Actor(long, ushort) public Actor(long id, ushort type) Parameters id long type ushort Fields TimeOut 默认超时时长 public const int TimeOut = 2147483647 Field Value int Properties AutoRecycle 是否自动回收 public bool AutoRecycle { get; } Property Value bool Id IActor唯一标识 public long Id { get; set; } Property Value long ScheduleIdSet 订阅哈希列表 public HashSet<long> ScheduleIdSet { get; } Property Value HashSet<long> Type Actor类型 public ushort Type { get; set; } Property Value ushort WorkerActor 工作Actor public IWorkerActor WorkerActor { get; init; } Property Value IWorkerActor Methods ClearAgent() 清理全部代理 public void ClearAgent() CrossDay(int) 跨天 public Task CrossDay(int openServerDay) Parameters openServerDay int 开服天数 Returns Task GetComponentAgent(Type) 根据组件类型获取对应的IComponentAgent public Task<IComponentAgent> GetComponentAgent(Type agentType) Parameters agentType Type 代理类型 Returns Task<IComponentAgent> GetComponentAgent<T>() 根据组件类型获取对应的IComponentAgent public Task<T> GetComponentAgent<T>() where T : IComponentAgent Returns Task<T> Type Parameters T 组件类型 Inactive() 反激活所有组件 public Task Inactive() Returns Task SendAsync(Action) 发送无返回值工作指令,超时,默认为int.MaxValue public Task SendAsync(Action work) Parameters work Action 工作内容 Returns Task SendAsync(Action, int) 发送异步消息 public Task SendAsync(Action work, int timeout) Parameters work Action timeout int Returns Task SendAsync(Func<Task>, int, bool) 发送异步消息 public Task SendAsync(Func<Task> work, int timeout = 2147483647, bool checkLock = true) Parameters work Func<Task> timeout int checkLock bool 是否检查锁 Returns Task SendAsyncWithoutCheck(Func<Task>, int) 发送异步消息 public Task SendAsyncWithoutCheck(Func<Task> work, int timeout = 2147483647) Parameters work Func<Task> timeout int Returns Task SendAsync<T>(Func<Task<T>>, int) 发送异步消息 public Task<T> SendAsync<T>(Func<Task<T>> work, int timeout = 2147483647) Parameters work Func<Task<T>> 工作对象 timeout int 超时时间 Returns Task<T> Type Parameters T SendAsync<T>(Func<T>, int) 发送异步消息 public Task<T> SendAsync<T>(Func<T> work, int timeout = 2147483647) Parameters work Func<T> timeout int Returns Task<T> Type Parameters T SetAutoRecycle(bool) 设置自动回收标记 public void SetAutoRecycle(bool autoRecycle) Parameters autoRecycle bool 是否自动回收 Tell(Action, int) 发送无返回值的工作指令 public void Tell(Action work, int timeOut = 2147483647) Parameters work Action 工作内容 timeOut int 超时,默认为int.MaxValue Tell(Func<Task>, int) 发送有返回值的工作指令 public void Tell(Func<Task> work, int timeOut = 2147483647) Parameters work Func<Task> 工作内容 timeOut int 超时,默认为int.MaxValue ToString() public override string ToString() Returns string"
  },
  "api/GameFrameX.Core.Actors.ActorManager.html": {
    "href": "api/GameFrameX.Core.Actors.ActorManager.html",
    "title": "Class ActorManager | GameFrameX.Server",
    "keywords": "Class ActorManager Namespace GameFrameX.Core.Actors Assembly GameFrameX.Core.dll Actor管理器 public static class ActorManager Inheritance object ActorManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ActorForEach(Action<IActor>) 遍历所有actor public static void ActorForEach(Action<IActor> action) Parameters action Action<IActor> 遍历回调 ActorForEach<T>(Action<T>) 遍历所有actor public static void ActorForEach<T>(Action<T> action) where T : IComponentAgent Parameters action Action<T> 遍历actor回调 Type Parameters T 组件代理类型 ActorForEach<T>(Func<T, Task>) 遍历所有actor public static void ActorForEach<T>(Func<T, Task> func) where T : IComponentAgent Parameters func Func<T, Task> 遍历actor回调 Type Parameters T 组件代理类型 AllFinish() 全部完成 public static Task AllFinish() Returns Task 任务集合 CheckIdle() 检查并回收空闲的Actor public static Task CheckIdle() Returns Task 任务 ClearAgent() 清除所有agent public static void ClearAgent() CrossDay(int, ushort) 跨天 public static Task CrossDay(int openServerDay, ushort driverActorType) Parameters openServerDay int 开服天数 driverActorType ushort 驱动Actor类型 Returns Task 任务 GetComponentAgent<T>() 根据组件类型获取对应的IComponentAgent数据 public static Task<T> GetComponentAgent<T>() where T : IComponentAgent Returns Task<T> 组件代理任务 Type Parameters T 组件代理类型 GetComponentAgent<T>(long) 根据ActorId获取对应的IComponentAgent对象 public static Task<T> GetComponentAgent<T>(long actorId) where T : IComponentAgent Parameters actorId long ActorId Returns Task<T> 组件代理任务 Type Parameters T 组件代理类型 HasActor(long) 是否存在指定的Actor public static bool HasActor(long actorId) Parameters actorId long ActorId Returns bool 是否存在 Remove(long) 删除actor public static Task Remove(long actorId) Parameters actorId long actorId Returns Task 任务 RemoveAll() 删除所有actor public static Task RemoveAll() Returns Task 任务 RoleCrossDay(int) 角色跨天 public static Task RoleCrossDay(int openServerDay) Parameters openServerDay int 开服天数 Returns Task 任务 SaveAll() 保存所有数据 public static Task SaveAll() Returns Task 任务 TimerSave() 定时回存所有数据 public static Task TimerSave() Returns Task 任务"
  },
  "api/GameFrameX.Core.Actors.Impl.ActionAsyncWrapper.html": {
    "href": "api/GameFrameX.Core.Actors.Impl.ActionAsyncWrapper.html",
    "title": "Class ActionAsyncWrapper | GameFrameX.Server",
    "keywords": "Class ActionAsyncWrapper Namespace GameFrameX.Core.Actors.Impl Assembly GameFrameX.Core.dll 异步无返回包装器 public class ActionAsyncWrapper : WorkWrapper Inheritance object WorkWrapper ActionAsyncWrapper Inherited Members WorkWrapper.Owner WorkWrapper.TimeOut WorkWrapper.CallChainId WorkWrapper.SetContext() WorkWrapper.ResetContext() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors ActionAsyncWrapper(Func<Task>) 构建无返回值的包装器 public ActionAsyncWrapper(Func<Task> work) Parameters work Func<Task> 工作函数 Properties Tcs 工作等待 public TaskCompletionSource<bool> Tcs { get; } Property Value TaskCompletionSource<bool> Work 工作对象 public Func<Task> Work { get; } Property Value Func<Task> Methods DoTask() 执行 public override Task DoTask() Returns Task ForceSetResult() 强制设置结果 public override void ForceSetResult() GetTrace() 获取调用链 public override string GetTrace() Returns string"
  },
  "api/GameFrameX.Core.Actors.Impl.ActionWrapper.html": {
    "href": "api/GameFrameX.Core.Actors.Impl.ActionWrapper.html",
    "title": "Class ActionWrapper | GameFrameX.Server",
    "keywords": "Class ActionWrapper Namespace GameFrameX.Core.Actors.Impl Assembly GameFrameX.Core.dll 无返回包装器 public class ActionWrapper : WorkWrapper Inheritance object WorkWrapper ActionWrapper Inherited Members WorkWrapper.Owner WorkWrapper.TimeOut WorkWrapper.CallChainId WorkWrapper.SetContext() WorkWrapper.ResetContext() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors ActionWrapper(Action) 构建无返回值的包装器 public ActionWrapper(Action work) Parameters work Action 工作函数 Properties Tcs 工作等待 public TaskCompletionSource<bool> Tcs { get; } Property Value TaskCompletionSource<bool> Work 工作对象 public Action Work { get; } Property Value Action Methods DoTask() 执行 public override Task DoTask() Returns Task ForceSetResult() 强制设置结果 public override void ForceSetResult() GetTrace() 获取调用链 public override string GetTrace() Returns string"
  },
  "api/GameFrameX.Core.Actors.Impl.ActorLimit.RuleType.html": {
    "href": "api/GameFrameX.Core.Actors.Impl.ActorLimit.RuleType.html",
    "title": "Enum ActorLimit.RuleType | GameFrameX.Server",
    "keywords": "Enum ActorLimit.RuleType Namespace GameFrameX.Core.Actors.Impl Assembly GameFrameX.Core.dll 可以按需扩展检查规则 public enum ActorLimit.RuleType Extension Methods ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Fields NoBidirectionCall = 1 禁止双向调用 None = 0 不检查"
  },
  "api/GameFrameX.Core.Actors.Impl.ActorLimit.html": {
    "href": "api/GameFrameX.Core.Actors.Impl.ActorLimit.html",
    "title": "Class ActorLimit | GameFrameX.Server",
    "keywords": "Class ActorLimit Namespace GameFrameX.Core.Actors.Impl Assembly GameFrameX.Core.dll 判断Actor交叉死锁 public static class ActorLimit Inheritance object ActorLimit Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AllowCall(long) 是否允许调用 public static bool AllowCall(long target) Parameters target long 目标 Returns bool 返回是否调用 Init(RuleType) 初始化 public static void Init(ActorLimit.RuleType type) Parameters type ActorLimit.RuleType 检查规则"
  },
  "api/GameFrameX.Core.Actors.Impl.FuncAsyncWrapper-1.html": {
    "href": "api/GameFrameX.Core.Actors.Impl.FuncAsyncWrapper-1.html",
    "title": "Class FuncAsyncWrapper<T> | GameFrameX.Server",
    "keywords": "Class FuncAsyncWrapper<T> Namespace GameFrameX.Core.Actors.Impl Assembly GameFrameX.Core.dll 异步有返回值的泛型包装器 public class FuncAsyncWrapper<T> : WorkWrapper Type Parameters T Inheritance object WorkWrapper FuncAsyncWrapper<T> Inherited Members WorkWrapper.Owner WorkWrapper.TimeOut WorkWrapper.CallChainId WorkWrapper.SetContext() WorkWrapper.ResetContext() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors FuncAsyncWrapper(Func<Task<T>>) 构建有返回值的泛型包装器 public FuncAsyncWrapper(Func<Task<T>> work) Parameters work Func<Task<T>> Properties Tcs 工作等待 public TaskCompletionSource<T> Tcs { get; } Property Value TaskCompletionSource<T> Work 工作对象 public Func<Task<T>> Work { get; } Property Value Func<Task<T>> Methods DoTask() 执行 public override Task DoTask() Returns Task ForceSetResult() 强制设置结果 public override void ForceSetResult() GetTrace() 获取调用链 public override string GetTrace() Returns string"
  },
  "api/GameFrameX.Core.Actors.Impl.FuncWrapper-1.html": {
    "href": "api/GameFrameX.Core.Actors.Impl.FuncWrapper-1.html",
    "title": "Class FuncWrapper<T> | GameFrameX.Server",
    "keywords": "Class FuncWrapper<T> Namespace GameFrameX.Core.Actors.Impl Assembly GameFrameX.Core.dll 有返回值的泛型包装器 public class FuncWrapper<T> : WorkWrapper Type Parameters T Inheritance object WorkWrapper FuncWrapper<T> Inherited Members WorkWrapper.Owner WorkWrapper.TimeOut WorkWrapper.CallChainId WorkWrapper.SetContext() WorkWrapper.ResetContext() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors FuncWrapper(Func<T>) 构建有返回值的泛型包装器 public FuncWrapper(Func<T> work) Parameters work Func<T> 工作单元 Properties Tcs 工作等待 public TaskCompletionSource<T> Tcs { get; } Property Value TaskCompletionSource<T> Work 工作对象 public Func<T> Work { get; } Property Value Func<T> Methods DoTask() 执行 public override Task DoTask() Returns Task ForceSetResult() 强制设置结果 public override void ForceSetResult() GetTrace() 获取调用链 public override string GetTrace() Returns string"
  },
  "api/GameFrameX.Core.Actors.Impl.WorkWrapper.html": {
    "href": "api/GameFrameX.Core.Actors.Impl.WorkWrapper.html",
    "title": "Class WorkWrapper | GameFrameX.Server",
    "keywords": "Class WorkWrapper Namespace GameFrameX.Core.Actors.Impl Assembly GameFrameX.Core.dll 工作包装器 public abstract class WorkWrapper Inheritance object WorkWrapper Derived ActionAsyncWrapper ActionWrapper FuncAsyncWrapper<T> FuncWrapper<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties CallChainId 调用链ID public long CallChainId { get; set; } Property Value long Owner 工作对象 public WorkerActor Owner { get; set; } Property Value WorkerActor TimeOut 超时时间 public int TimeOut { get; set; } Property Value int Methods DoTask() 执行 public abstract Task DoTask() Returns Task ForceSetResult() 强制设置结果 public abstract void ForceSetResult() GetTrace() 获取调用链 public abstract string GetTrace() Returns string ResetContext() 重置上下文 public void ResetContext() SetContext() 设置上下文 protected void SetContext()"
  },
  "api/GameFrameX.Core.Actors.Impl.WorkerActor.html": {
    "href": "api/GameFrameX.Core.Actors.Impl.WorkerActor.html",
    "title": "Class WorkerActor | GameFrameX.Server",
    "keywords": "Class WorkerActor Namespace GameFrameX.Core.Actors.Impl Assembly GameFrameX.Core.dll 工作Actor public class WorkerActor : IWorkerActor, IWorker Inheritance object WorkerActor Implements IWorkerActor IWorker Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors WorkerActor(long) 构造函数 public WorkerActor(long id = 0) Parameters id long Methods Enqueue(Action, long, bool, int) 压入一个异步任务 public Task Enqueue(Action work, long callChainId, bool discard = false, int timeOut = 13000) Parameters work Action 工作单元 callChainId long 调用链ID discard bool 是否强制 timeOut int 超时时间 Returns Task Enqueue(Func<Task>, long, bool, int) 压入一个异步任务 public Task Enqueue(Func<Task> work, long callChainId, bool discard = false, int timeOut = 13000) Parameters work Func<Task> 工作单元 callChainId long 调用链ID discard bool 是否强制 timeOut int 超时时间 Returns Task Enqueue<T>(Func<Task<T>>, long, bool, int) 压入一个异步任务 public Task<T> Enqueue<T>(Func<Task<T>> work, long callChainId, bool discard = false, int timeOut = 13000) Parameters work Func<Task<T>> 工作单元 callChainId long 调用链ID discard bool 是否强制 timeOut int 超时时间 Returns Task<T> Type Parameters T Enqueue<T>(Func<T>, long, bool, int) 压入一个异步任务 public Task<T> Enqueue<T>(Func<T> work, long callChainId, bool discard = false, int timeOut = 13000) Parameters work Func<T> 工作单元 callChainId long 调用链ID discard bool 是否强制 timeOut int 超时时间 Returns Task<T> Type Parameters T IsNeedEnqueue() chainId == 0说明是新的异步环境 chainId相等说明是一直await下去的（一种特殊情况是自己入自己的队） public (bool needEnqueue, long chainId) IsNeedEnqueue() Returns (bool needEnqueue, long chainId) NextChainId() 调用链生成 public static long NextChainId() Returns long SendAsync(Action, int) 调用该方法禁止丢弃Task，丢弃Task请使用Tell方法 public Task SendAsync(Action work, int timeOut = 2147483647) Parameters work Action timeOut int Returns Task SendAsync(Func<Task>, int) 发送有返回值工作指令 public Task SendAsync(Func<Task> work, int timeOut = 2147483647) Parameters work Func<Task> 工作内容 timeOut int 超时,默认为int.MaxValue Returns Task SendAsync(Func<Task>, int, bool) 发送有返回值工作指令 public Task SendAsync(Func<Task> work, int timeOut = 2147483647, bool checkLock = true) Parameters work Func<Task> 工作内容 timeOut int 超时,默认为int.MaxValue checkLock bool 是否检查锁 Returns Task SendAsync<T>(Func<Task<T>>, int) 发送有返回值工作指令 public Task<T> SendAsync<T>(Func<Task<T>> work, int timeOut = 2147483647) Parameters work Func<Task<T>> 工作内容 timeOut int 超时,默认为int.MaxValue Returns Task<T> Type Parameters T SendAsync<T>(Func<T>, int) 发送有返回值工作指令 public Task<T> SendAsync<T>(Func<T> work, int timeOut = 2147483647) Parameters work Func<T> 工作内容 timeOut int 超时,默认为int.MaxValue Returns Task<T> Type Parameters T Tell(Action, int) 发送无返回值的工作指令 public void Tell(Action work, int timeOut = 2147483647) Parameters work Action 工作内容 timeOut int 超时,默认为int.MaxValue Tell(Func<Task>, int) 发送有返回值的工作指令 public void Tell(Func<Task> work, int timeOut = 2147483647) Parameters work Func<Task> 工作内容 timeOut int 超时,默认为int.MaxValue"
  },
  "api/GameFrameX.Core.Actors.Impl.html": {
    "href": "api/GameFrameX.Core.Actors.Impl.html",
    "title": "Namespace GameFrameX.Core.Actors.Impl | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.Core.Actors.Impl Classes ActionAsyncWrapper 异步无返回包装器 ActionWrapper 无返回包装器 ActorLimit 判断Actor交叉死锁 FuncAsyncWrapper<T> 异步有返回值的泛型包装器 FuncWrapper<T> 有返回值的泛型包装器 WorkWrapper 工作包装器 WorkerActor 工作Actor Enums ActorLimit.RuleType 可以按需扩展检查规则"
  },
  "api/GameFrameX.Core.Actors.html": {
    "href": "api/GameFrameX.Core.Actors.html",
    "title": "Namespace GameFrameX.Core.Actors | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.Core.Actors Classes Actor Actor ActorManager Actor管理器"
  },
  "api/GameFrameX.Core.BaseHandler.BaseComponentHandler.html": {
    "href": "api/GameFrameX.Core.BaseHandler.BaseComponentHandler.html",
    "title": "Class BaseComponentHandler | GameFrameX.Server",
    "keywords": "Class BaseComponentHandler Namespace GameFrameX.Core.BaseHandler Assembly GameFrameX.Core.dll 基础组件处理器基类 public abstract class BaseComponentHandler : BaseMessageHandler, IMessageHandler Inheritance object BaseMessageHandler BaseComponentHandler Implements IMessageHandler Derived GlobalComponentHandler PlayerComponentHandler Inherited Members BaseMessageHandler.NetWorkChannel BaseMessageHandler.Message BaseMessageHandler.ActionAsync() BaseMessageHandler.InnerActionAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties ActorId 组件代理ID protected long ActorId { get; set; } Property Value long CacheComponent 缓存组件代理对象 public IComponentAgent CacheComponent { get; protected set; } Property Value IComponentAgent ComponentAgentType 组件代理类型 protected abstract Type ComponentAgentType { get; } Property Value Type Methods GetComponentAgent<TOtherAgent>() 根据组件类型获取对应的 IComponentAgent protected Task<TOtherAgent> GetComponentAgent<TOtherAgent>() where TOtherAgent : IComponentAgent Returns Task<TOtherAgent> 组件代理任务 Type Parameters TOtherAgent 组件代理类型 Init(INetworkMessage, INetWorkChannel) 初始化 public override Task Init(INetworkMessage message, INetWorkChannel netWorkChannel) Parameters message INetworkMessage 网络消息 netWorkChannel INetWorkChannel 网络通道 Returns Task 初始化任务 InitActor() 初始化 protected abstract Task InitActor() Returns Task 初始化任务 InnerAction() 内部执行 public override Task InnerAction() Returns Task 内部执行任务"
  },
  "api/GameFrameX.Core.BaseHandler.BaseMessageHandler.html": {
    "href": "api/GameFrameX.Core.BaseHandler.BaseMessageHandler.html",
    "title": "Class BaseMessageHandler | GameFrameX.Server",
    "keywords": "Class BaseMessageHandler Namespace GameFrameX.Core.BaseHandler Assembly GameFrameX.Core.dll 基础消息处理器 public abstract class BaseMessageHandler : IMessageHandler Inheritance object BaseMessageHandler Implements IMessageHandler Derived BaseComponentHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties Message 消息对象 public INetworkMessage Message { get; } Property Value INetworkMessage NetWorkChannel 网络频道 public INetWorkChannel NetWorkChannel { get; } Property Value INetWorkChannel Methods ActionAsync() 动作异步 protected abstract Task ActionAsync() Returns Task 动作执行任务 Init(INetworkMessage, INetWorkChannel) 初始化 子类实现必须调用 public virtual Task Init(INetworkMessage message, INetWorkChannel netWorkChannel) Parameters message INetworkMessage 消息对象 netWorkChannel INetWorkChannel 网络渠道 Returns Task 初始化任务 InnerAction() 执行 public virtual Task InnerAction() Returns Task 执行任务 InnerActionAsync() 内部动作异步 记录执行时间并调用 ActionAsync() protected Task InnerActionAsync() Returns Task 动作执行任务"
  },
  "api/GameFrameX.Core.BaseHandler.GlobalComponentHandler-1.html": {
    "href": "api/GameFrameX.Core.BaseHandler.GlobalComponentHandler-1.html",
    "title": "Class GlobalComponentHandler<T> | GameFrameX.Server",
    "keywords": "Class GlobalComponentHandler<T> Namespace GameFrameX.Core.BaseHandler Assembly GameFrameX.Core.dll 全局组件处理器 public abstract class GlobalComponentHandler<T> : GlobalComponentHandler, IMessageHandler where T : IComponentAgent Type Parameters T Inheritance object BaseMessageHandler BaseComponentHandler GlobalComponentHandler GlobalComponentHandler<T> Implements IMessageHandler Inherited Members GlobalComponentHandler.InitActor() BaseComponentHandler.ActorId BaseComponentHandler.CacheComponent BaseComponentHandler.Init(INetworkMessage, INetWorkChannel) BaseComponentHandler.InnerAction() BaseComponentHandler.GetComponentAgent<TOtherAgent>() BaseMessageHandler.NetWorkChannel BaseMessageHandler.Message BaseMessageHandler.ActionAsync() BaseMessageHandler.InnerActionAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties ComponentAgent 缓存组件代理对象 protected T ComponentAgent { get; } Property Value T ComponentAgentType 组件代理类型 protected override Type ComponentAgentType { get; } Property Value Type"
  },
  "api/GameFrameX.Core.BaseHandler.GlobalComponentHandler.html": {
    "href": "api/GameFrameX.Core.BaseHandler.GlobalComponentHandler.html",
    "title": "Class GlobalComponentHandler | GameFrameX.Server",
    "keywords": "Class GlobalComponentHandler Namespace GameFrameX.Core.BaseHandler Assembly GameFrameX.Core.dll 全局组件处理器 public abstract class GlobalComponentHandler : BaseComponentHandler, IMessageHandler Inheritance object BaseMessageHandler BaseComponentHandler GlobalComponentHandler Implements IMessageHandler Derived GlobalComponentHandler<T> Inherited Members BaseComponentHandler.ActorId BaseComponentHandler.ComponentAgentType BaseComponentHandler.CacheComponent BaseComponentHandler.Init(INetworkMessage, INetWorkChannel) BaseComponentHandler.InnerAction() BaseComponentHandler.GetComponentAgent<TOtherAgent>() BaseMessageHandler.NetWorkChannel BaseMessageHandler.Message BaseMessageHandler.ActionAsync() BaseMessageHandler.InnerActionAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods InitActor() 初始化 protected override Task InitActor() Returns Task"
  },
  "api/GameFrameX.Core.BaseHandler.PlayerComponentHandler-1.html": {
    "href": "api/GameFrameX.Core.BaseHandler.PlayerComponentHandler-1.html",
    "title": "Class PlayerComponentHandler<T> | GameFrameX.Server",
    "keywords": "Class PlayerComponentHandler<T> Namespace GameFrameX.Core.BaseHandler Assembly GameFrameX.Core.dll 玩家组件处理器 public abstract class PlayerComponentHandler<T> : PlayerComponentHandler, IMessageHandler where T : IComponentAgent Type Parameters T Inheritance object BaseMessageHandler BaseComponentHandler PlayerComponentHandler PlayerComponentHandler<T> Implements IMessageHandler Inherited Members PlayerComponentHandler.InitActor() BaseComponentHandler.ActorId BaseComponentHandler.CacheComponent BaseComponentHandler.Init(INetworkMessage, INetWorkChannel) BaseComponentHandler.InnerAction() BaseComponentHandler.GetComponentAgent<TOtherAgent>() BaseMessageHandler.NetWorkChannel BaseMessageHandler.Message BaseMessageHandler.ActionAsync() BaseMessageHandler.InnerActionAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties ComponentAgent 缓存组件代理对象 protected T ComponentAgent { get; } Property Value T ComponentAgentType 组件代理类型 protected override Type ComponentAgentType { get; } Property Value Type"
  },
  "api/GameFrameX.Core.BaseHandler.PlayerComponentHandler.html": {
    "href": "api/GameFrameX.Core.BaseHandler.PlayerComponentHandler.html",
    "title": "Class PlayerComponentHandler | GameFrameX.Server",
    "keywords": "Class PlayerComponentHandler Namespace GameFrameX.Core.BaseHandler Assembly GameFrameX.Core.dll 玩家组件处理器 public abstract class PlayerComponentHandler : BaseComponentHandler, IMessageHandler Inheritance object BaseMessageHandler BaseComponentHandler PlayerComponentHandler Implements IMessageHandler Derived PlayerComponentHandler<T> Inherited Members BaseComponentHandler.ActorId BaseComponentHandler.ComponentAgentType BaseComponentHandler.CacheComponent BaseComponentHandler.Init(INetworkMessage, INetWorkChannel) BaseComponentHandler.InnerAction() BaseComponentHandler.GetComponentAgent<TOtherAgent>() BaseMessageHandler.NetWorkChannel BaseMessageHandler.Message BaseMessageHandler.ActionAsync() BaseMessageHandler.InnerActionAsync() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods InitActor() 初始化 protected override Task InitActor() Returns Task"
  },
  "api/GameFrameX.Core.BaseHandler.html": {
    "href": "api/GameFrameX.Core.BaseHandler.html",
    "title": "Namespace GameFrameX.Core.BaseHandler | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.Core.BaseHandler Classes BaseComponentHandler 基础组件处理器基类 BaseMessageHandler 基础消息处理器 GlobalComponentHandler 全局组件处理器 GlobalComponentHandler<T> 全局组件处理器 PlayerComponentHandler 玩家组件处理器 PlayerComponentHandler<T> 玩家组件处理器"
  },
  "api/GameFrameX.Core.Components.BaseComponent.html": {
    "href": "api/GameFrameX.Core.Components.BaseComponent.html",
    "title": "Class BaseComponent | GameFrameX.Server",
    "keywords": "Class BaseComponent Namespace GameFrameX.Core.Components Assembly GameFrameX.Core.dll 基础组件基类 public abstract class BaseComponent : IComponent Inheritance object BaseComponent Implements IComponent Derived StateComponent<TState> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties Actor Actor 对象 public IActor Actor { get; set; } Property Value IActor IsActive 是否是激活状态 public bool IsActive { get; } Property Value bool Methods Active() 激活组件 public virtual Task Active() Returns Task 激活任务 ClearCacheAgent() 清理缓存代理 public void ClearCacheAgent() GetAgent(Type) 根据组件类型获取对应的 IComponentAgent 数据 public IComponentAgent GetAgent(Type refAssemblyType = null) Parameters refAssemblyType Type 引用程序集，如果为 null 则使用当前程序集引用 Returns IComponentAgent IComponentAgent 实例 Inactive() 反激活组件 public virtual Task Inactive() Returns Task 反激活任务"
  },
  "api/GameFrameX.Core.Components.ComponentRegister.html": {
    "href": "api/GameFrameX.Core.Components.ComponentRegister.html",
    "title": "Class ComponentRegister | GameFrameX.Server",
    "keywords": "Class ComponentRegister Namespace GameFrameX.Core.Components Assembly GameFrameX.Core.dll 组件注册器 public static class ComponentRegister Inheritance object ComponentRegister Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ActiveGlobalComponents() 激活全局组件 public static Task ActiveGlobalComponents() Returns Task 激活任务 ActiveRoleComponents(IComponentAgent, HashSet<short>) 激活角色组件 public static Task ActiveRoleComponents(IComponentAgent componentAgent, HashSet<short> openFuncSet) Parameters componentAgent IComponentAgent 组件代理 openFuncSet HashSet<short> 开放的功能集合 Returns Task 激活任务 GetActorType(Type) 根据 CompType 获取对应的 ActorType 类型 public static ushort GetActorType(Type componentType) Parameters componentType Type 组件类型 Returns ushort ActorType 类型 GetComponents(ushort) 根据 ActorType 类型获取对应的 CompTypes 列表 public static IEnumerable<Type> GetComponents(ushort actorType) Parameters actorType ushort ActorType 类型 Returns IEnumerable<Type> CompTypes 列表 Init(Assembly) 初始化组件注册器 public static Task Init(Assembly assembly = null) Parameters assembly Assembly 目标程序集 Returns Task 初始化任务 Exceptions Exception 当程序集为 null 时抛出"
  },
  "api/GameFrameX.Core.Components.StateComponent-1.html": {
    "href": "api/GameFrameX.Core.Components.StateComponent-1.html",
    "title": "Class StateComponent<TState> | GameFrameX.Server",
    "keywords": "Class StateComponent<TState> Namespace GameFrameX.Core.Components Assembly GameFrameX.Core.dll 数据状态组件 public abstract class StateComponent<TState> : BaseComponent, IComponent, IState where TState : BaseCacheState, new() Type Parameters TState Inheritance object BaseComponent StateComponent<TState> Implements IComponent IState Inherited Members BaseComponent.IsActive BaseComponent.Actor BaseComponent.GetAgent(Type) BaseComponent.ClearCacheAgent() object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties State 数据对象 public TState State { get; } Property Value TState Methods Active() 激活组件 public override Task Active() Returns Task Inactive() 反激活组件 public override Task Inactive() Returns Task ReadStateAsync() 准备状态 public Task ReadStateAsync() Returns Task SaveAll(bool, bool) 保存全部数据 public static Task SaveAll(bool shutdown, bool force = false) Parameters shutdown bool force bool Returns Task WriteStateAsync() 更新状态 public Task WriteStateAsync() Returns Task"
  },
  "api/GameFrameX.Core.Components.StateComponent.html": {
    "href": "api/GameFrameX.Core.Components.StateComponent.html",
    "title": "Class StateComponent | GameFrameX.Server",
    "keywords": "Class StateComponent Namespace GameFrameX.Core.Components Assembly GameFrameX.Core.dll 数据状态组件 public sealed class StateComponent Inheritance object StateComponent Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Fields StatisticsTool 统计工具 public static readonly StatisticsTool StatisticsTool Field Value StatisticsTool Methods AddShutdownSaveFunc(Func<bool, bool, Task>) 注册回存 public static void AddShutdownSaveFunc(Func<bool, bool, Task> shutdown) Parameters shutdown Func<bool, bool, Task> SaveAll(bool) 当游戏出现异常，导致无法正常回存，才需要将force=true 由后台http指令调度 public static Task SaveAll(bool force = false) Parameters force bool Returns Task TimerSave() 定时回存所有数据 public static Task TimerSave() Returns Task"
  },
  "api/GameFrameX.Core.Components.html": {
    "href": "api/GameFrameX.Core.Components.html",
    "title": "Namespace GameFrameX.Core.Components | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.Core.Components Classes BaseComponent 基础组件基类 ComponentRegister 组件注册器 StateComponent 数据状态组件 StateComponent<TState> 数据状态组件"
  },
  "api/GameFrameX.Core.Config.BaseDataTable-1.html": {
    "href": "api/GameFrameX.Core.Config.BaseDataTable-1.html",
    "title": "Class BaseDataTable<T> | GameFrameX.Server",
    "keywords": "Class BaseDataTable<T> Namespace GameFrameX.Core.Config Assembly GameFrameX.Core.Config.dll 基础数据表 public abstract class BaseDataTable<T> : IDataTable<T>, IDataTable Type Parameters T 数据表中的数据类型 Inheritance object BaseDataTable<T> Implements IDataTable<T> IDataTable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors BaseDataTable() 默认构造函数 public BaseDataTable() BaseDataTable(Func<Task<JsonElement>>) 初始化基础数据表 public BaseDataTable(Func<Task<JsonElement>> loadFunc) Parameters loadFunc Func<Task<JsonElement>> 异步加载数据的委托 Fields DataList 数据列表 protected readonly List<T> DataList Field Value List<T> LongDataMaps 长整型键的数据表 protected readonly SortedDictionary<long, T> LongDataMaps Field Value SortedDictionary<long, T> StringDataMaps 字符串键的数据表 protected readonly SortedDictionary<string, T> StringDataMaps Field Value SortedDictionary<string, T> _loadFunc 异步加载器 protected readonly Func<Task<JsonElement>> _loadFunc Field Value Func<Task<JsonElement>> Properties All 获取数据表中所有对象 public T[] All { get; } Property Value T[] 数据表中的所有对象数组 Count 获取数据表中对象的数量 public int Count { get; } Property Value int 数据表中对象的数量 FirstOrDefault 获取数据表中第一个对象 public T FirstOrDefault { get; } Property Value T 数据表中的第一个对象，如果数据表为空则返回默认值 this[int] 根据长整型ID获取对象 public T this[int id] { get; } Parameters id int 对象的ID Property Value T 找到的对象，如果未找到则返回默认值 this[string] 根据字符串ID获取对象 public T this[string id] { get; } Parameters id string 对象的ID Property Value T 找到的对象，如果未找到则返回默认值 LastOrDefault 获取数据表中最后一个对象 public T LastOrDefault { get; } Property Value T 数据表中的最后一个对象，如果数据表为空则返回默认值 Methods Find(Func<T, bool>) 根据条件查找对象 public T Find(Func<T, bool> func) Parameters func Func<T, bool> 查找条件 Returns T 满足条件的第一个对象，如果未找到则返回默认值 FindList(Func<T, bool>) 根据条件查找多个对象 public T[] FindList(Func<T, bool> func) Parameters func Func<T, bool> 查找条件 Returns T[] 满足条件的所有对象数组 Get(int) 根据长整型ID获取对象 public T Get(int id) Parameters id int 对象的ID Returns T 找到的对象，如果未找到则返回默认值 Get(string) 根据字符串ID获取对象 public T Get(string id) Parameters id string 对象的ID Returns T 找到的对象，如果未找到则返回默认值 LoadAsync() 异步加载数据 public abstract Task LoadAsync() Returns Task 一个表示异步操作的任务 ToArray() 获取数据表中所有对象 public T[] ToArray() Returns T[] 数据表中的所有对象数组"
  },
  "api/GameFrameX.Core.Config.BeanBase.html": {
    "href": "api/GameFrameX.Core.Config.BeanBase.html",
    "title": "Class BeanBase | GameFrameX.Server",
    "keywords": "Class BeanBase Namespace GameFrameX.Core.Config Assembly GameFrameX.Core.Config.dll public abstract class BeanBase : ITypeId Inheritance object BeanBase Implements ITypeId Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods GetTypeId() 获取类型ID public abstract int GetTypeId() Returns int"
  },
  "api/GameFrameX.Core.Config.ByteBuf.html": {
    "href": "api/GameFrameX.Core.Config.ByteBuf.html",
    "title": "Class ByteBuf | GameFrameX.Server",
    "keywords": "Class ByteBuf Namespace GameFrameX.Core.Config Assembly GameFrameX.Core.Config.dll 字节缓冲区类,用于二进制数据的读写操作 public sealed class ByteBuf : ICloneable, IEquatable<ByteBuf> Inheritance object ByteBuf Implements ICloneable IEquatable<ByteBuf> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors ByteBuf() 默认构造函数,创建一个空的字节缓冲区 public ByteBuf() ByteBuf(byte[]) 使用指定字节数组创建字节缓冲区 public ByteBuf(byte[] bytes) Parameters bytes byte[] 字节数组 ByteBuf(byte[], int, int) 使用指定字节数组和读写位置创建字节缓冲区 public ByteBuf(byte[] bytes, int readIndex, int writeIndex) Parameters bytes byte[] 字节数组 readIndex int 读取位置 writeIndex int 写入位置 ByteBuf(int) 使用指定容量创建字节缓冲区 public ByteBuf(int capacity) Parameters capacity int 初始容量 ByteBuf(int, Action<ByteBuf>) 使用指定容量和释放器创建字节缓冲区 public ByteBuf(int capacity, Action<ByteBuf> releaser) Parameters capacity int 初始容量 releaser Action<ByteBuf> 释放器委托 Properties Bytes 内部字节数组 public byte[] Bytes { get; } Property Value byte[] Capacity 缓冲区容量 public int Capacity { get; } Property Value int Empty 缓冲区是否为空 public bool Empty { get; } Property Value bool NotCompactWritable 未压缩的可写入字节数 public int NotCompactWritable { get; } Property Value int NotEmpty 缓冲区是否非空 public bool NotEmpty { get; } Property Value bool ReaderIndex 当前读取位置 public int ReaderIndex { get; set; } Property Value int Remaining 剩余可读取的字节数 public int Remaining { get; } Property Value int Size 当前数据大小 public int Size { get; } Property Value int StringCacheFinder 字符串缓存查找器 public static Func<byte[], int, int, string> StringCacheFinder { get; set; } Property Value Func<byte[], int, int, string> WriterIndex 当前写入位置 public int WriterIndex { get; set; } Property Value int Methods AddReadIndex(int) 增加读取位置 public void AddReadIndex(int add) Parameters add int 增加的值 AddWriteIndex(int) 增加写入位置 public void AddWriteIndex(int add) Parameters add int 增加的值 Append(byte) 追加一个字节 public void Append(byte x) Parameters x byte 要追加的字节 BeginWriteSegment(out int) 开始写入段 public void BeginWriteSegment(out int oldSize) Parameters oldSize int 旧大小 Clear() 清空缓冲区 public void Clear() Clone() 克隆 public object Clone() Returns object 克隆的对象 CopyData() 复制当前数据 public byte[] CopyData() Returns byte[] 复制的字节数组 DiscardReadBytes() 丢弃已读取的字节 public void DiscardReadBytes() EndWriteSegment(int) 结束写入段 public void EndWriteSegment(int oldSize) Parameters oldSize int 旧大小 EnsureWrite(int) 确保有足够的写入空间 public void EnsureWrite(int size) Parameters size int 需要的空间大小 EnterSegment(out SegmentSaveState) 进入段 public void EnterSegment(out SegmentSaveState saveState) Parameters saveState SegmentSaveState 段保存状态 Equals(ByteBuf) 比较是否相等 public bool Equals(ByteBuf other) Parameters other ByteBuf 要比较的对象 Returns bool 是否相等 Equals(object) 比较是否相等 public override bool Equals(object obj) Parameters obj object 要比较的对象 Returns bool 是否相等 FromString(string) 从字符串创建字节缓冲区 public static ByteBuf FromString(string value) Parameters value string 要创建的字符串 Returns ByteBuf 字节缓冲区 GetHashCode() 获取哈希码 public override int GetHashCode() Returns int 哈希码 LeaveSegment(SegmentSaveState) 离开段 public void LeaveSegment(SegmentSaveState saveState) Parameters saveState SegmentSaveState 段保存状态 ReadBool() 读取布尔值 public bool ReadBool() Returns bool 读取的布尔值 ReadByte() 读取字节 public byte ReadByte() Returns byte 读取的字节 ReadBytes() 读取字节数组 public byte[] ReadBytes() Returns byte[] 读取的字节数组 ReadComplex() 读取复数 public Complex ReadComplex() Returns Complex 读取的复数 ReadDouble() 读取双精度浮点数 public double ReadDouble() Returns double 读取的双精度浮点数 ReadFint() 读取固定长度的整型 public int ReadFint() Returns int 读取的整型值 ReadFint_Safe() 安全地读取固定长度的整型 public int ReadFint_Safe() Returns int 读取的整型值 ReadFloat() 读取浮点数 public float ReadFloat() Returns float 读取的浮点数 ReadFlong() 读取长整型 public long ReadFlong() Returns long 读取的长整型值 ReadFshort() 读取固定长度的短整型 public short ReadFshort() Returns short 读取的短整型值 ReadInt() 读取整型 public int ReadInt() Returns int 读取的整型值 ReadLong() 读取长整型 public long ReadLong() Returns long 读取的长整型值 ReadLongAsNumber() 读取长整型并转换为浮点数 public double ReadLongAsNumber() Returns double 读取的浮点数 ReadMatrix4x4() 读取4x4矩阵 public Matrix4x4 ReadMatrix4x4() Returns Matrix4x4 读取的4x4矩阵 ReadQuaternion() 读取四元数 public Quaternion ReadQuaternion() Returns Quaternion 读取的四元数 ReadSegment(ByteBuf) 读取段 public void ReadSegment(ByteBuf buf) Parameters buf ByteBuf 要读取的段 ReadSegment(out int, out int) 读取段 public void ReadSegment(out int startIndex, out int segmentSize) Parameters startIndex int 开始索引 segmentSize int 段大小 ReadShort() 读取短整型 public short ReadShort() Returns short 读取的短整型值 ReadSint() 读取有符号整型 public int ReadSint() Returns int 读取的有符号整型值 ReadSize() 读取大小 public int ReadSize() Returns int 读取的大小 ReadSlong() 读取长整型 public long ReadSlong() Returns long 读取的长整型值 ReadString() 读取字符串 public string ReadString() Returns string 读取的字符串 ReadUint() 读取无符号整型 public uint ReadUint() Returns uint 读取的无符号整型值 ReadUint_Unsafe() 使用不安全代码读取无符号整型 public uint ReadUint_Unsafe() Returns uint 读取的无符号整型值 ReadUlong() 读取无符号长整型 public ulong ReadUlong() Returns ulong 读取的无符号长整型值 ReadVector2() 读取二维向量 public Vector2 ReadVector2() Returns Vector2 读取的二维向量 ReadVector3() 读取三维向量 public Vector3 ReadVector3() Returns Vector3 读取的三维向量 ReadVector4() 读取四维向量 public Vector4 ReadVector4() Returns Vector4 读取的四维向量 Release() 释放 public void Release() Replace(byte[]) 替换内部字节数组 public void Replace(byte[] bytes) Parameters bytes byte[] 新的字节数组 Replace(byte[], int, int) 替换内部字节数组并指定读写位置 public void Replace(byte[] bytes, int beginPos, int endPos) Parameters bytes byte[] 新的字节数组 beginPos int 起始位置 endPos int 结束位置 ToString() 转换为字符串 public override string ToString() Returns string 字符串 TryDeserializeInplaceByteBuf(int, ByteBuf) 尝试反序列化字节缓冲区 public EDeserializeError TryDeserializeInplaceByteBuf(int maxSize, ByteBuf inplaceTempBody) Parameters maxSize int 最大大小 inplaceTempBody ByteBuf 临时字节缓冲区 Returns EDeserializeError 反序列化错误 TryReadByte(out byte) 尝试读取字节 public bool TryReadByte(out byte x) Parameters x byte 要读取的字节 Returns bool 是否成功读取 Wrap(byte[]) 包装字节数组为ByteBuf public static ByteBuf Wrap(byte[] bytes) Parameters bytes byte[] 要包装的字节数组 Returns ByteBuf 包装后的ByteBuf对象 WriteBool(bool) 写入布尔值 public void WriteBool(bool b) Parameters b bool 要写入的布尔值 WriteByte(byte) 写入字节 public void WriteByte(byte x) Parameters x byte 要写入的字节 WriteByteBufWithSize(ByteBuf) 写入字节缓冲区 public void WriteByteBufWithSize(ByteBuf o) Parameters o ByteBuf 要写入的字节缓冲区 WriteByteBufWithoutSize(ByteBuf) 写入字节缓冲区 public void WriteByteBufWithoutSize(ByteBuf o) Parameters o ByteBuf 要写入的字节缓冲区 WriteBytes(byte[]) 写入字节数组 public void WriteBytes(byte[] x) Parameters x byte[] 要写入的字节数组 WriteBytesWithoutSize(byte[]) 写入字节数组(不写入大小) public void WriteBytesWithoutSize(byte[] bs) Parameters bs byte[] 要写入的字节数组 WriteBytesWithoutSize(byte[], int, int) 写入字节数组的指定部分(不写入大小) public void WriteBytesWithoutSize(byte[] bs, int offset, int len) Parameters bs byte[] 要写入的字节数组 offset int 起始偏移 len int 长度 WriteComplex(Complex) 写入复数 public void WriteComplex(Complex x) Parameters x Complex 要写入的复数 WriteDouble(double) 写入双精度浮点数 public void WriteDouble(double x) Parameters x double 要写入的双精度浮点数 WriteFint(int) 写入固定长度的整型 public void WriteFint(int x) Parameters x int 要写入的整型值 WriteFint_Safe(int) 安全地写入固定长度的整型 public void WriteFint_Safe(int x) Parameters x int 要写入的整型值 WriteFloat(float) 写入浮点数 public void WriteFloat(float x) Parameters x float 要写入的浮点数 WriteFlong(long) 写入长整型 public void WriteFlong(long x) Parameters x long 要写入的长整型值 WriteFshort(short) 写入固定长度的短整型 public void WriteFshort(short x) Parameters x short 要写入的短整型值 WriteInt(int) 写入整型 public void WriteInt(int x) Parameters x int 要写入的整型值 WriteLong(long) 写入长整型 public void WriteLong(long x) Parameters x long 要写入的长整型值 WriteMatrix4x4(Matrix4x4) 写入4x4矩阵 public void WriteMatrix4x4(Matrix4x4 x) Parameters x Matrix4x4 要写入的4x4矩阵 WriteNumberAsLong(double) 将浮点数作为长整型写入 public void WriteNumberAsLong(double x) Parameters x double 要写入的浮点数 WriteQuaternion(Quaternion) 写入四元数 public void WriteQuaternion(Quaternion x) Parameters x Quaternion 要写入的四元数 WriteRawTag(byte) 写入原始标签 public void WriteRawTag(byte b1) Parameters b1 byte 要写入的标签 WriteRawTag(byte, byte) 写入原始标签 public void WriteRawTag(byte b1, byte b2) Parameters b1 byte 要写入的标签 b2 byte 要写入的标签 WriteRawTag(byte, byte, byte) 写入原始标签 public void WriteRawTag(byte b1, byte b2, byte b3) Parameters b1 byte 要写入的标签 b2 byte 要写入的标签 b3 byte 要写入的标签 WriteShort(short) 写入短整型 public void WriteShort(short x) Parameters x short 要写入的短整型值 WriteSint(int) 写入有符号整型 public void WriteSint(int x) Parameters x int 要写入的有符号整型值 WriteSize(int) 写入大小 public void WriteSize(int n) Parameters n int 要写入的大小 WriteSlong(long) 写入长整型 public void WriteSlong(long x) Parameters x long 要写入的长整型值 WriteString(string) 写入字符串 public void WriteString(string x) Parameters x string 要写入的字符串 WriteUint(uint) 写入无符号整型 public void WriteUint(uint x) Parameters x uint 要写入的无符号整型值 WriteUint_Unsafe(uint) 使用不安全代码写入无符号整型 public void WriteUint_Unsafe(uint x) Parameters x uint 要写入的无符号整型值 WriteVector2(Vector2) 写入二维向量 public void WriteVector2(Vector2 x) Parameters x Vector2 要写入的二维向量 WriteVector3(Vector3) 写入三维向量 public void WriteVector3(Vector3 x) Parameters x Vector3 要写入的三维向量 WriteVector4(Vector4) 写入四维向量 public void WriteVector4(Vector4 x) Parameters x Vector4 要写入的四维向量"
  },
  "api/GameFrameX.Core.Config.EDeserializeError.html": {
    "href": "api/GameFrameX.Core.Config.EDeserializeError.html",
    "title": "Enum EDeserializeError | GameFrameX.Server",
    "keywords": "Enum EDeserializeError Namespace GameFrameX.Core.Config Assembly GameFrameX.Core.Config.dll 反序列化错误枚举 public enum EDeserializeError Extension Methods ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Fields EXCEED_SIZE = 2 超出大小限制 NOT_ENOUGH = 1 数据不足 OK = 0 成功"
  },
  "api/GameFrameX.Core.Config.IConfigManager.html": {
    "href": "api/GameFrameX.Core.Config.IConfigManager.html",
    "title": "Interface IConfigManager | GameFrameX.Server",
    "keywords": "Interface IConfigManager Namespace GameFrameX.Core.Config Assembly GameFrameX.Core.Config.dll 全局配置管理器接口。 public interface IConfigManager Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties Count 获取全局配置项数量。 int Count { get; } Property Value int 全局配置项的数量。 Methods AddConfig(string, IDataTable) 增加指定全局配置项。 void AddConfig(string configName, IDataTable configValue) Parameters configName string 要增加的全局配置项的名称。 configValue IDataTable 全局配置项的值。 GetConfig(string) 获取指定全局配置项。 IDataTable GetConfig(string configName) Parameters configName string 要获取的全局配置项的名称。 Returns IDataTable 指定名称的全局配置项。 HasConfig(string) 检查是否存在指定全局配置项。 bool HasConfig(string configName) Parameters configName string 要检查的全局配置项的名称。 Returns bool 如果存在指定的全局配置项，则返回 true；否则返回 false。 RemoveAllConfigs() 清空所有全局配置项。 void RemoveAllConfigs() RemoveConfig(string) 移除指定全局配置项。 bool RemoveConfig(string configName) Parameters configName string 要移除的全局配置项的名称。 Returns bool 如果成功移除指定的全局配置项，则返回 true；否则返回 false。"
  },
  "api/GameFrameX.Core.Config.IDataTable-1.html": {
    "href": "api/GameFrameX.Core.Config.IDataTable-1.html",
    "title": "Interface IDataTable<T> | GameFrameX.Server",
    "keywords": "Interface IDataTable<T> Namespace GameFrameX.Core.Config Assembly GameFrameX.Core.Config.dll 泛型数据表基础接口。 public interface IDataTable<out T> : IDataTable Type Parameters T 数据表中对象的类型。 Inherited Members IDataTable.Count IDataTable.LoadAsync() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties All 获取数据表中所有对象。 T[] All { get; } Property Value T[] 数据表中的所有对象数组。 FirstOrDefault 获取数据表中第一个对象。 T FirstOrDefault { get; } Property Value T 数据表中的第一个对象。 this[int] 根据ID获取对象。 T this[int id] { get; } Parameters id int 表唯一主键ID。 Property Value T 指定ID的对象。 this[string] 根据ID获取对象。 T this[string id] { get; } Parameters id string 表唯一主键ID。 Property Value T 指定ID的对象。 LastOrDefault 获取数据表中最后一个对象。 T LastOrDefault { get; } Property Value T 数据表中的最后一个对象。 Methods Find(Func<T, bool>) 根据条件查找，返回第一个满足条件的对象。 T Find(Func<out T, bool> func) Parameters func Func<T, bool> 查询条件表达式。 Returns T 第一个满足条件的对象。 FindList(Func<T, bool>) 根据条件查找，返回所有满足条件的对象。 T[] FindList(Func<out T, bool> func) Parameters func Func<T, bool> 查询条件表达式。 Returns T[] 所有满足条件的对象数组。 Get(int) 根据ID获取对象。 T Get(int id) Parameters id int 表唯一主键ID。 Returns T 指定ID的对象。 Get(string) 根据ID获取对象。 T Get(string id) Parameters id string 表唯一主键ID。 Returns T 指定ID的对象。 ToArray() 获取数据表中所有对象。 T[] ToArray() Returns T[] 数据表中的所有对象数组。"
  },
  "api/GameFrameX.Core.Config.IDataTable.html": {
    "href": "api/GameFrameX.Core.Config.IDataTable.html",
    "title": "Interface IDataTable | GameFrameX.Server",
    "keywords": "Interface IDataTable Namespace GameFrameX.Core.Config Assembly GameFrameX.Core.Config.dll 数据表基础接口 public interface IDataTable Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties Count 获取数据表中对象的数量。 int Count { get; } Property Value int 数据表中对象的数量。 Methods LoadAsync() 异步加载数据表。 Task LoadAsync() Returns Task 一个任务表示异步操作。"
  },
  "api/GameFrameX.Core.Config.ITypeId.html": {
    "href": "api/GameFrameX.Core.Config.ITypeId.html",
    "title": "Interface ITypeId | GameFrameX.Server",
    "keywords": "Interface ITypeId Namespace GameFrameX.Core.Config Assembly GameFrameX.Core.Config.dll 类型ID接口 public interface ITypeId Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods GetTypeId() 获取类型ID int GetTypeId() Returns int"
  },
  "api/GameFrameX.Core.Config.SegmentSaveState.html": {
    "href": "api/GameFrameX.Core.Config.SegmentSaveState.html",
    "title": "Struct SegmentSaveState | GameFrameX.Server",
    "keywords": "Struct SegmentSaveState Namespace GameFrameX.Core.Config Assembly GameFrameX.Core.Config.dll 分段保存状态结构 public readonly struct SegmentSaveState Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors SegmentSaveState(int, int) 构造函数 public SegmentSaveState(int readerIndex, int writerIndex) Parameters readerIndex int 读取位置 writerIndex int 写入位置 Properties ReaderIndex 读取位置 public int ReaderIndex { get; } Property Value int WriterIndex 写入位置 public int WriterIndex { get; } Property Value int"
  },
  "api/GameFrameX.Core.Config.SerializationException.html": {
    "href": "api/GameFrameX.Core.Config.SerializationException.html",
    "title": "Class SerializationException | GameFrameX.Server",
    "keywords": "Class SerializationException Namespace GameFrameX.Core.Config Assembly GameFrameX.Core.Config.dll public class SerializationException : Exception, ISerializable Inheritance object Exception SerializationException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors SerializationException() public SerializationException() SerializationException(string) public SerializationException(string msg) Parameters msg string SerializationException(string, Exception) public SerializationException(string message, Exception innerException) Parameters message string innerException Exception"
  },
  "api/GameFrameX.Core.Config.StringUtil.html": {
    "href": "api/GameFrameX.Core.Config.StringUtil.html",
    "title": "Class StringUtil | GameFrameX.Server",
    "keywords": "Class StringUtil Namespace GameFrameX.Core.Config Assembly GameFrameX.Core.Config.dll 提供字符串处理的静态方法。 public static class StringUtil Inheritance object StringUtil Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ArrayToString<T>(T[]) 将数组转换为字符串表示形式。 public static string ArrayToString<T>(T[] arr) Parameters arr T[] 要转换的数组。 Returns string 数组的字符串表示形式。 Type Parameters T 数组元素的类型。 CollectionToString<T>(IEnumerable<T>) 将集合转换为字符串表示形式。 public static string CollectionToString<T>(IEnumerable<T> arr) Parameters arr IEnumerable<T> 要转换的集合。 Returns string 集合的字符串表示形式。 Type Parameters T 集合元素的类型。 CollectionToString<TK, TV>(IDictionary<TK, TV>) 将字典转换为字符串表示形式。 public static string CollectionToString<TK, TV>(IDictionary<TK, TV> dic) Parameters dic IDictionary<TK, TV> 要转换的字典。 Returns string 字典的字符串表示形式。 Type Parameters TK 字典键的类型。 TV 字典值的类型。 ToStr(object) 将对象转换为字符串表示形式。 public static string ToStr(object o) Parameters o object 要转换的对象。 Returns string 对象的字符串表示形式。 ToStr(object, StringBuilder) 将对象转换为字符串表示形式，并使用提供的StringBuilder进行构建。 public static string ToStr(object o, StringBuilder sb) Parameters o object 要转换的对象。 sb StringBuilder 用于构建字符串的StringBuilder。 Returns string 对象的字符串表示形式。"
  },
  "api/GameFrameX.Core.Config.html": {
    "href": "api/GameFrameX.Core.Config.html",
    "title": "Namespace GameFrameX.Core.Config | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.Core.Config Classes BaseDataTable<T> 基础数据表 BeanBase ByteBuf 字节缓冲区类,用于二进制数据的读写操作 SerializationException StringUtil 提供字符串处理的静态方法。 Structs SegmentSaveState 分段保存状态结构 Interfaces IConfigManager 全局配置管理器接口。 IDataTable 数据表基础接口 IDataTable<T> 泛型数据表基础接口。 ITypeId 类型ID接口 Enums EDeserializeError 反序列化错误枚举"
  },
  "api/GameFrameX.Core.Events.EventDispatcher.html": {
    "href": "api/GameFrameX.Core.Events.EventDispatcher.html",
    "title": "Class EventDispatcher | GameFrameX.Server",
    "keywords": "Class EventDispatcher Namespace GameFrameX.Core.Events Assembly GameFrameX.Core.dll 事件分发类 public static class EventDispatcher Inheritance object EventDispatcher Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Dispatch(long, int, Param) 分发事件 public static void Dispatch(long actorId, int eventId, Param args = null) Parameters actorId long 演员ID eventId int 事件ID args Param 参数对象，可以为null"
  },
  "api/GameFrameX.Core.Events.EventListener-1.html": {
    "href": "api/GameFrameX.Core.Events.EventListener-1.html",
    "title": "Class EventListener<T> | GameFrameX.Server",
    "keywords": "Class EventListener<T> Namespace GameFrameX.Core.Events Assembly GameFrameX.Core.dll 事件监听器类 public abstract class EventListener<T> : IEventListener where T : IComponentAgent Type Parameters T 组件代理类型 Inheritance object EventListener<T> Implements IEventListener Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties AgentType 获取事件代理类型 public Type AgentType { get; } Property Value Type 事件代理类型 Methods HandleEvent(IComponentAgent, Event) 事件处理函数 public Task HandleEvent(IComponentAgent agent, Event evt) Parameters agent IComponentAgent 组件代理 evt Event 事件 Returns Task 异步任务 HandleEvent(T, Event) 事件处理函数 protected abstract Task HandleEvent(T agent, Event evt) Parameters agent T 组件代理 evt Event 事件 Returns Task 异步任务"
  },
  "api/GameFrameX.Core.Events.html": {
    "href": "api/GameFrameX.Core.Events.html",
    "title": "Namespace GameFrameX.Core.Events | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.Core.Events Classes EventDispatcher 事件分发类 EventListener<T> 事件监听器类"
  },
  "api/GameFrameX.Core.Hotfix.Agent.BaseComponentAgent-1.html": {
    "href": "api/GameFrameX.Core.Hotfix.Agent.BaseComponentAgent-1.html",
    "title": "Class BaseComponentAgent<TComponent> | GameFrameX.Server",
    "keywords": "Class BaseComponentAgent<TComponent> Namespace GameFrameX.Core.Hotfix.Agent Assembly GameFrameX.Core.dll 基础组件代理类，用于管理组件与Actor之间的交互 public abstract class BaseComponentAgent<TComponent> : IComponentAgent, IWorker where TComponent : BaseComponent Type Parameters TComponent 具体的组件类型 Inheritance object BaseComponentAgent<TComponent> Implements IComponentAgent IWorker Derived FuncComponentAgent<TComponent> StateComponentAgent<TComponent, TState> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties Actor 所有者的Actor实例 public IActor Actor { get; } Property Value IActor ActorId 所有者的Actor ID public long ActorId { get; } Property Value long Owner 组件的所有者 public IComponent Owner { get; } Property Value IComponent OwnerComponent 所有者的组件实例 public TComponent OwnerComponent { get; } Property Value TComponent OwnerType 所有者的类型 public ushort OwnerType { get; } Property Value ushort ScheduleIdSet 订阅的定时任务ID集合 public HashSet<long> ScheduleIdSet { get; } Property Value HashSet<long> Methods Active() 激活组件 public virtual void Active() ActorCrossDay(int) 处理Actor跨天事件 public Task ActorCrossDay(int serverDay) Parameters serverDay int 服务器运行天数 Returns Task 一个任务 Daily<T>(int, int, Param, long) 基于每天的定时任务 public long Daily<T>(int hour = 0, int minute = 0, Param param = null, long unScheduleId = 0) where T : ITimerHandler Parameters hour int 小时 minute int 分钟 param Param 参数 unScheduleId long 取消订阅的ID Returns long 定时任务ID Type Parameters T 定时任务处理器类型 Delay<T>(DateTime, Param, long) 延迟执行定时任务 public long Delay<T>(DateTime time, Param param = null, long unScheduleId = 0) where T : ITimerHandler Parameters time DateTime 延迟的具体时间 param Param 参数 unScheduleId long 取消订阅的ID Returns long 定时任务ID Type Parameters T 定时任务处理器类型 Delay<T>(long, Param, long) 延迟执行定时任务 public long Delay<T>(long time, Param param = null, long unScheduleId = 0) where T : ITimerHandler Parameters time long 延迟的时间 param Param 参数 unScheduleId long 取消订阅的ID Returns long 定时任务ID Type Parameters T 定时任务处理器类型 Delay<T>(TimeSpan, Param, long) 延迟执行定时任务 public long Delay<T>(TimeSpan delay, Param param = null, long unScheduleId = 0) where T : ITimerHandler Parameters delay TimeSpan 延迟多久的时间差 param Param 参数 unScheduleId long 取消订阅的ID Returns long 定时任务ID Type Parameters T 定时任务处理器类型 GetComponentAgent(Type) 根据代理类型获取组件 public Task<IComponentAgent> GetComponentAgent(Type agentType) Parameters agentType Type 代理类型 Returns Task<IComponentAgent> 一个任务，返回组件代理实例 GetComponentAgent<T>() 根据代理类型获取组件代理 public Task<T> GetComponentAgent<T>() where T : IComponentAgent Returns Task<T> 一个任务，返回指定类型的组件代理实例 Type Parameters T 代理类型 Inactive() 反激活组件 public virtual Task Inactive() Returns Task 一个已完成的任务 Monthly<T>(int, int, int, Param, long) 基于每月某天的定时任务 public long Monthly<T>(int dayOfMonth, int hour = 0, int minute = 0, Param param = null, long unScheduleId = 0) where T : ITimerHandler Parameters dayOfMonth int 具体哪天 hour int 小时 minute int 分钟 param Param 参数 unScheduleId long 取消订阅ID Returns long 定时任务ID Type Parameters T 定时任务处理器类型 Schedule<T>(TimeSpan, TimeSpan, Param, int, long) 订阅定时任务 public long Schedule<T>(TimeSpan delay, TimeSpan interval, Param param = null, int repeatCount = -1, long unScheduleId = 0) where T : ITimerHandler Parameters delay TimeSpan 延迟时间差 interval TimeSpan 间隔时间差 param Param 参数 repeatCount int 调用次数，如果小于0，则一直循环 unScheduleId long 取消订阅的ID Returns long 定时任务ID Type Parameters T 定时任务处理器类型 SendAsync(Action, int) 异步发送无返回值的工作指令 public Task SendAsync(Action work, int timeout = 2147483647) Parameters work Action 工作内容 timeout int 超时时间，默认为int.MaxValue Returns Task 一个任务 SendAsync(Func<Task>, int, bool) 异步发送有返回值的工作指令 public Task SendAsync(Func<Task> work, int timeout = 2147483647, bool checkLock = true) Parameters work Func<Task> 工作内容 timeout int 超时时间，默认为int.MaxValue checkLock bool 是否检查锁 Returns Task 一个任务 SendAsync<T>(Func<Task<T>>, int) 异步发送有返回值的工作指令 public Task<T> SendAsync<T>(Func<Task<T>> work, int timeOut = 2147483647) Parameters work Func<Task<T>> 工作内容 timeOut int 超时时间，默认为int.MaxValue Returns Task<T> 一个任务，返回工作结果 Type Parameters T SendAsync<T>(Func<T>, int) 异步发送有返回值的工作指令 public Task<T> SendAsync<T>(Func<T> work, int timeout = 2147483647) Parameters work Func<T> 工作内容 timeout int 超时时间，默认为int.MaxValue Returns Task<T> 一个任务，返回工作结果 Type Parameters T SetAutoRecycle(bool) 设置组件是否自动回收 protected void SetAutoRecycle(bool autoRecycle) Parameters autoRecycle bool 是否自动回收 SetOwner(IComponent) 设置组件的所有者 public void SetOwner(IComponent owner) Parameters owner IComponent 所有者实例 Tell(Action, int) 发送无返回值的工作指令 public void Tell(Action work, int timeout = 2147483647) Parameters work Action 工作内容 timeout int 超时时间，默认为int.MaxValue Tell(Func<Task>, int) 发送有返回值的工作指令 public void Tell(Func<Task> work, int timeout = 2147483647) Parameters work Func<Task> 工作内容 timeout int 超时时间，默认为int.MaxValue Unscheduled(long) 取消订阅定时任务 public void Unscheduled(long id) Parameters id long 定时任务ID Weekly<T>(DayOfWeek, int, int, Param, long) 基于每周某天的定时任务 public long Weekly<T>(DayOfWeek dayOfWeek, int hour = 0, int minute = 0, Param param = null, long unScheduleId = 0) where T : ITimerHandler Parameters dayOfWeek DayOfWeek 具体是哪天 hour int 小时 minute int 分钟 param Param 参数 unScheduleId long 取消订阅的ID Returns long 定时任务ID Type Parameters T 定时任务处理器类型 WithCronExpression<T>(string, Param, long) 基于Cron表达式的定时任务 public long WithCronExpression<T>(string cronExpression, Param param = null, long unScheduleId = 0) where T : ITimerHandler Parameters cronExpression string cron表达式 param Param 参数 unScheduleId long 取消订阅ID Returns long 定时任务ID Type Parameters T 定时任务处理器类型 WithDayOfWeeks<T>(int, int, Param, params DayOfWeek[]) 基于每周某天的定时任务 public long WithDayOfWeeks<T>(int hour, int minute, Param param, params DayOfWeek[] dayOfWeeks) where T : ITimerHandler Parameters hour int 小时 minute int 分钟 param Param 参数 dayOfWeeks DayOfWeek[] 某天的参数列表 Returns long 定时任务ID Type Parameters T 定时任务处理器类型"
  },
  "api/GameFrameX.Core.Hotfix.Agent.FuncComponentAgent-1.html": {
    "href": "api/GameFrameX.Core.Hotfix.Agent.FuncComponentAgent-1.html",
    "title": "Class FuncComponentAgent<TComponent> | GameFrameX.Server",
    "keywords": "Class FuncComponentAgent<TComponent> Namespace GameFrameX.Core.Hotfix.Agent Assembly GameFrameX.Core.dll 无返回值组件代理 public abstract class FuncComponentAgent<TComponent> : BaseComponentAgent<TComponent>, IComponentAgent, IWorker where TComponent : BaseComponent Type Parameters TComponent 具体的组件类型 Inheritance object BaseComponentAgent<TComponent> FuncComponentAgent<TComponent> Implements IComponentAgent IWorker Inherited Members BaseComponentAgent<TComponent>.OwnerComponent BaseComponentAgent<TComponent>.Actor BaseComponentAgent<TComponent>.ScheduleIdSet BaseComponentAgent<TComponent>.Owner BaseComponentAgent<TComponent>.ActorId BaseComponentAgent<TComponent>.OwnerType BaseComponentAgent<TComponent>.SetOwner(IComponent) BaseComponentAgent<TComponent>.Active() BaseComponentAgent<TComponent>.Inactive() BaseComponentAgent<TComponent>.GetComponentAgent(Type) BaseComponentAgent<TComponent>.GetComponentAgent<T>() BaseComponentAgent<TComponent>.Tell(Action, int) BaseComponentAgent<TComponent>.Tell(Func<Task>, int) BaseComponentAgent<TComponent>.SendAsync(Action, int) BaseComponentAgent<TComponent>.SendAsync<T>(Func<T>, int) BaseComponentAgent<TComponent>.SendAsync(Func<Task>, int, bool) BaseComponentAgent<TComponent>.SendAsync<T>(Func<Task<T>>, int) BaseComponentAgent<TComponent>.SetAutoRecycle(bool) BaseComponentAgent<TComponent>.ActorCrossDay(int) BaseComponentAgent<TComponent>.Unscheduled(long) BaseComponentAgent<TComponent>.Delay<T>(DateTime, Param, long) BaseComponentAgent<TComponent>.Delay<T>(long, Param, long) BaseComponentAgent<TComponent>.Delay<T>(TimeSpan, Param, long) BaseComponentAgent<TComponent>.Schedule<T>(TimeSpan, TimeSpan, Param, int, long) BaseComponentAgent<TComponent>.Daily<T>(int, int, Param, long) BaseComponentAgent<TComponent>.Weekly<T>(DayOfWeek, int, int, Param, long) BaseComponentAgent<TComponent>.WithDayOfWeeks<T>(int, int, Param, params DayOfWeek[]) BaseComponentAgent<TComponent>.Monthly<T>(int, int, int, Param, long) BaseComponentAgent<TComponent>.WithCronExpression<T>(string, Param, long) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object)"
  },
  "api/GameFrameX.Core.Hotfix.Agent.StateComponentAgent-2.html": {
    "href": "api/GameFrameX.Core.Hotfix.Agent.StateComponentAgent-2.html",
    "title": "Class StateComponentAgent<TComponent, TState> | GameFrameX.Server",
    "keywords": "Class StateComponentAgent<TComponent, TState> Namespace GameFrameX.Core.Hotfix.Agent Assembly GameFrameX.Core.dll 状态组件代理类 public abstract class StateComponentAgent<TComponent, TState> : BaseComponentAgent<TComponent>, IComponentAgent, IWorker where TComponent : StateComponent<TState> where TState : BaseCacheState, new() Type Parameters TComponent 组件对象类型 TState 数据对象类型 Inheritance object BaseComponentAgent<TComponent> StateComponentAgent<TComponent, TState> Implements IComponentAgent IWorker Inherited Members BaseComponentAgent<TComponent>.OwnerComponent BaseComponentAgent<TComponent>.Actor BaseComponentAgent<TComponent>.ScheduleIdSet BaseComponentAgent<TComponent>.Owner BaseComponentAgent<TComponent>.ActorId BaseComponentAgent<TComponent>.OwnerType BaseComponentAgent<TComponent>.SetOwner(IComponent) BaseComponentAgent<TComponent>.Active() BaseComponentAgent<TComponent>.Inactive() BaseComponentAgent<TComponent>.GetComponentAgent(Type) BaseComponentAgent<TComponent>.GetComponentAgent<T>() BaseComponentAgent<TComponent>.Tell(Action, int) BaseComponentAgent<TComponent>.Tell(Func<Task>, int) BaseComponentAgent<TComponent>.SendAsync(Action, int) BaseComponentAgent<TComponent>.SendAsync<T>(Func<T>, int) BaseComponentAgent<TComponent>.SendAsync(Func<Task>, int, bool) BaseComponentAgent<TComponent>.SendAsync<T>(Func<Task<T>>, int) BaseComponentAgent<TComponent>.SetAutoRecycle(bool) BaseComponentAgent<TComponent>.ActorCrossDay(int) BaseComponentAgent<TComponent>.Unscheduled(long) BaseComponentAgent<TComponent>.Delay<T>(DateTime, Param, long) BaseComponentAgent<TComponent>.Delay<T>(long, Param, long) BaseComponentAgent<TComponent>.Delay<T>(TimeSpan, Param, long) BaseComponentAgent<TComponent>.Schedule<T>(TimeSpan, TimeSpan, Param, int, long) BaseComponentAgent<TComponent>.Daily<T>(int, int, Param, long) BaseComponentAgent<TComponent>.Weekly<T>(DayOfWeek, int, int, Param, long) BaseComponentAgent<TComponent>.WithDayOfWeeks<T>(int, int, Param, params DayOfWeek[]) BaseComponentAgent<TComponent>.Monthly<T>(int, int, int, Param, long) BaseComponentAgent<TComponent>.WithCronExpression<T>(string, Param, long) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties State 获取数据对象 public TState State { get; } Property Value TState"
  },
  "api/GameFrameX.Core.Hotfix.Agent.html": {
    "href": "api/GameFrameX.Core.Hotfix.Agent.html",
    "title": "Namespace GameFrameX.Core.Hotfix.Agent | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.Core.Hotfix.Agent Classes BaseComponentAgent<TComponent> 基础组件代理类，用于管理组件与Actor之间的交互 FuncComponentAgent<TComponent> 无返回值组件代理 StateComponentAgent<TComponent, TState> 状态组件代理类"
  },
  "api/GameFrameX.Core.Hotfix.HotfixManager.html": {
    "href": "api/GameFrameX.Core.Hotfix.HotfixManager.html",
    "title": "Class HotfixManager | GameFrameX.Server",
    "keywords": "Class HotfixManager Namespace GameFrameX.Core.Hotfix Assembly GameFrameX.Core.dll 热更新管理器 public static class HotfixManager Inheritance object HotfixManager Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties HotfixAssembly 热更新程序集 public static Assembly HotfixAssembly { get; } Property Value Assembly ReloadTime 重载时间 public static DateTime ReloadTime { get; } Property Value DateTime Methods FindListeners(ushort, int) 获取事件监听器列表 public static List<IEventListener> FindListeners(ushort actorType, int evtId) Parameters actorType ushort evtId int Returns List<IEventListener> GetAgent<T>(BaseComponent, Type) 获取代理 public static T GetAgent<T>(BaseComponent component, Type refAssemblyType) where T : IComponentAgent Parameters component BaseComponent refAssemblyType Type Returns T Type Parameters T GetHttpHandler(string) 获取HTTP消息处理器 public static BaseHttpHandler GetHttpHandler(string cmd) Parameters cmd string Returns BaseHttpHandler GetInstance<T>(string, Type) 获取实例 主要用于获取Event,Timer, Schedule,的Handler实例 public static T GetInstance<T>(string typeName, Type refAssemblyType = null) Parameters typeName string refAssemblyType Type Returns T Type Parameters T GetTcpHandler(int) 获取TCP消息处理器 public static BaseMessageHandler GetTcpHandler(int msgId) Parameters msgId int Returns BaseMessageHandler LoadHotfixModule(AppSetting, string, string, string) 加载热更新模块 public static Task<bool> LoadHotfixModule(AppSetting setting, string dllVersion = \"\", string dllPath = \"hotfix\", string hotfixDllName = \"GameFrameX.Hotfix.dll\") Parameters setting AppSetting dllVersion string Dll版本.当不为空的时候会优先加载指定的Dll.替换 dllPath 参数 dllPath string 热更新程序集路径，默认为hotfix hotfixDllName string 热更新程序集名称 Returns Task<bool> 返回是否成功 Stop() 停止 public static Task Stop() Returns Task"
  },
  "api/GameFrameX.Core.Hotfix.IHotfixBridge.html": {
    "href": "api/GameFrameX.Core.Hotfix.IHotfixBridge.html",
    "title": "Interface IHotfixBridge | GameFrameX.Server",
    "keywords": "Interface IHotfixBridge Namespace GameFrameX.Core.Hotfix Assembly GameFrameX.Core.dll 热更新桥接基础接口 public interface IHotfixBridge Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods OnLoadSuccess(AppSetting, bool) 加载成功 Task<bool> OnLoadSuccess(AppSetting setting, bool reload) Parameters setting AppSetting 应用设置，包含热更新相关的配置信息 reload bool 是否为重新加载，表示此次加载是首次加载还是重新加载 Returns Task<bool> 一个任务，表示异步操作的结果，并返回加载是否成功的布尔值 Stop() 停止 Task Stop() Returns Task 一个任务，表示异步操作的结果"
  },
  "api/GameFrameX.Core.Hotfix.html": {
    "href": "api/GameFrameX.Core.Hotfix.html",
    "title": "Namespace GameFrameX.Core.Hotfix | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.Core.Hotfix Classes HotfixManager 热更新管理器 Interfaces IHotfixBridge 热更新桥接基础接口"
  },
  "api/GameFrameX.Core.Timer.GlobalTimer.html": {
    "href": "api/GameFrameX.Core.Timer.GlobalTimer.html",
    "title": "Class GlobalTimer | GameFrameX.Server",
    "keywords": "Class GlobalTimer Namespace GameFrameX.Core.Timer Assembly GameFrameX.Core.dll 全局定时器 public static class GlobalTimer Inheritance object GlobalTimer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields IsWorking 是否正在工作 public static volatile bool IsWorking Field Value bool Methods Start() 开始全局定时 public static void Start() Stop() 停止全局定时 public static Task Stop() Returns Task"
  },
  "api/GameFrameX.Core.Timer.Handler.ITimerHandler.html": {
    "href": "api/GameFrameX.Core.Timer.Handler.ITimerHandler.html",
    "title": "Interface ITimerHandler | GameFrameX.Server",
    "keywords": "Interface ITimerHandler Namespace GameFrameX.Core.Timer.Handler Assembly GameFrameX.Core.dll 计时器处理器接口 public interface ITimerHandler Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods InnerHandleTimer(IComponentAgent, Param) 内部计时器处理器调用函数 Task InnerHandleTimer(IComponentAgent agent, Param param) Parameters agent IComponentAgent 组件代理对象，用于与系统其他部分交互 param Param 传递给处理器的参数 Returns Task 一个任务，表示异步操作的结果"
  },
  "api/GameFrameX.Core.Timer.Handler.NotHotfixTimerHandler.html": {
    "href": "api/GameFrameX.Core.Timer.Handler.NotHotfixTimerHandler.html",
    "title": "Class NotHotfixTimerHandler | GameFrameX.Server",
    "keywords": "Class NotHotfixTimerHandler Namespace GameFrameX.Core.Timer.Handler Assembly GameFrameX.Core.dll 非热更程序集的计时器处理器，不需要热更时间更新 public abstract class NotHotfixTimerHandler : IJob Inheritance object NotHotfixTimerHandler Implements IJob Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods Execute(IJobExecutionContext) 内部计时器处理器调用函数 public Task Execute(IJobExecutionContext context) Parameters context IJobExecutionContext Quartz 作业执行上下文，包含作业执行所需的信息 Returns Task 一个任务，表示异步操作的结果 HandleTimer(Param) 计时器处理函数 protected abstract Task HandleTimer(Param param) Parameters param Param 传递给处理器的参数 Returns Task 一个任务，表示异步操作的结果"
  },
  "api/GameFrameX.Core.Timer.Handler.TimerHandler-1.html": {
    "href": "api/GameFrameX.Core.Timer.Handler.TimerHandler-1.html",
    "title": "Class TimerHandler<TAgent> | GameFrameX.Server",
    "keywords": "Class TimerHandler<TAgent> Namespace GameFrameX.Core.Timer.Handler Assembly GameFrameX.Core.dll 热更新程序集的计时器处理器 public abstract class TimerHandler<TAgent> : ITimerHandler where TAgent : IComponentAgent Type Parameters TAgent 组件类型，必须实现 IComponentAgent 接口 Inheritance object TimerHandler<TAgent> Implements ITimerHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods HandleTimer(TAgent, Param) 计时器调用 protected abstract Task HandleTimer(TAgent agent, Param param) Parameters agent TAgent 调用对象，具体类型的组件代理对象 param Param 参数对象，传递给处理器的参数 Returns Task 一个任务，表示异步操作的结果 InnerHandleTimer(IComponentAgent, Param) 内部计时器处理器调用。由 Quartz 调用 public Task InnerHandleTimer(IComponentAgent agent, Param param) Parameters agent IComponentAgent 组件代理对象，用于与系统其他部分交互 param Param 传递给处理器的参数 Returns Task 一个任务，表示异步操作的结果"
  },
  "api/GameFrameX.Core.Timer.Handler.html": {
    "href": "api/GameFrameX.Core.Timer.Handler.html",
    "title": "Namespace GameFrameX.Core.Timer.Handler | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.Core.Timer.Handler Classes NotHotfixTimerHandler 非热更程序集的计时器处理器，不需要热更时间更新 TimerHandler<TAgent> 热更新程序集的计时器处理器 Interfaces ITimerHandler 计时器处理器接口"
  },
  "api/GameFrameX.Core.Timer.QuartzTimer.html": {
    "href": "api/GameFrameX.Core.Timer.QuartzTimer.html",
    "title": "Class QuartzTimer | GameFrameX.Server",
    "keywords": "Class QuartzTimer Namespace GameFrameX.Core.Timer Assembly GameFrameX.Core.dll Quartz定时器 public static class QuartzTimer Inheritance object QuartzTimer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ParamKey public const string ParamKey = \"param\" Field Value string Methods Daily<T>(long, int, int, Param) 每日特定时间执行任务 public static long Daily<T>(long actorId, int hour, int minute, Param param = null) where T : ITimerHandler Parameters actorId long Actor的唯一标识 hour int 小时（0-23） minute int 分钟（0-59） param Param 传递给定时器处理器的参数 Returns long 生成的任务ID Type Parameters T 定时器处理器类型 Delay<T>(long, TimeSpan, Param) 基于时间延迟执行一次 public static long Delay<T>(long actorId, TimeSpan delay, Param param = null) where T : ITimerHandler Parameters actorId long Actor的唯一标识 delay TimeSpan 延迟时间 param Param 传递给定时器处理器的参数 Returns long 生成的任务ID Type Parameters T 定时器处理器类型 Monthly<T>(long, int, int, int, Param) 每月某天特定时间执行任务 public static long Monthly<T>(long actorId, int dayOfMonth, int hour, int minute, Param param = null) where T : ITimerHandler Parameters actorId long Actor的唯一标识 dayOfMonth int 指定的月份中的某一天（1-31） hour int 小时（0-23） minute int 分钟（0-59） param Param 传递给定时器处理器的参数 Returns long 生成的任务ID Type Parameters T 定时器处理器类型 Schedule<T>(long, TimeSpan, TimeSpan, Param, int) 每隔一段时间执行一次 public static long Schedule<T>(long actorId, TimeSpan delay, TimeSpan interval, Param param = null, int repeatCount = -1) where T : ITimerHandler Parameters actorId long Actor的唯一标识 delay TimeSpan 首次执行前的延迟时间 interval TimeSpan 每次执行之间的间隔时间 param Param 传递给定时器处理器的参数 repeatCount int 循环次数，-1表示无限循环 Returns long 生成的任务ID Type Parameters T 定时器处理器类型 Start() 启动定时任务调度器 public static Task Start() Returns Task 一个表示异步操作的任务。 Remarks 开始调度器，使其可以触发已安排的任务。 Stop() 停止定时任务调度器 public static Task Stop() Returns Task 一个表示异步操作的任务。 Remarks 关闭调度器，停止所有正在运行的任务，并防止新的任务被触发。 UnSchedule(IEnumerable<long>) 取消订阅 public static void UnSchedule(IEnumerable<long> set) Parameters set IEnumerable<long> UnSchedule(long) 取消订阅 public static void UnSchedule(long id) Parameters id long Weekly<T>(long, DayOfWeek, int, int, Param) 每周某天特定时间执行任务 public static long Weekly<T>(long actorId, DayOfWeek dayOfWeek, int hour, int minute, Param param = null) where T : ITimerHandler Parameters actorId long Actor的唯一标识 dayOfWeek DayOfWeek 指定的星期几 hour int 小时（0-23） minute int 分钟（0-59） param Param 传递给定时器处理器的参数 Returns long 生成的任务ID Type Parameters T 定时器处理器类型 WithCronExpression<T>(long, string, Param) 基于Cron表达式执行任务 public static long WithCronExpression<T>(long actorId, string cronExpression, Param param = null) where T : ITimerHandler Parameters actorId long Actor的唯一标识 cronExpression string Cron表达式 param Param 传递给定时器处理器的参数 Returns long 生成的任务ID Type Parameters T 定时器处理器类型 WithDayOfWeeks<T>(long, int, int, Param, params DayOfWeek[]) 每周某些天特定时间执行任务 public static long WithDayOfWeeks<T>(long actorId, int hour, int minute, Param param, params DayOfWeek[] dayOfWeeks) where T : ITimerHandler Parameters actorId long Actor的唯一标识 hour int 小时（0-23） minute int 分钟（0-59） param Param 传递给定时器处理器的参数 dayOfWeeks DayOfWeek[] 指定的星期几数组 Returns long 生成的任务ID Type Parameters T 定时器处理器类型"
  },
  "api/GameFrameX.Core.Timer.html": {
    "href": "api/GameFrameX.Core.Timer.html",
    "title": "Namespace GameFrameX.Core.Timer | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.Core.Timer Classes GlobalTimer 全局定时器 QuartzTimer Quartz定时器"
  },
  "api/GameFrameX.Core.Utility.ActorIdGenerator.html": {
    "href": "api/GameFrameX.Core.Utility.ActorIdGenerator.html",
    "title": "Class ActorIdGenerator | GameFrameX.Server",
    "keywords": "Class ActorIdGenerator Namespace GameFrameX.Core.Utility Assembly GameFrameX.Core.dll ActorId 生成器 14 + 7 + 30 + 12 = 63 服务器id 类型 时间戳 自增 玩家 公会 服务器id * 100000 + 全局功能id 全局玩法 public static class ActorIdGenerator Inheritance object ActorIdGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetActorId(ushort, int) 根据ActorType获取ActorId public static long GetActorId(ushort type, int serverId = 0) Parameters type ushort serverId int Returns long Exceptions ArgumentException GetActorType(long) 根据ActorId获取ActorType public static ushort GetActorType(long actorId) Parameters actorId long Returns ushort Exceptions ArgumentException GetServerId(long) 根据ActorId获取服务器id public static int GetServerId(long actorId) Parameters actorId long ActorId Returns int 服务器id GetUniqueId(IdModule) 根据模块获取唯一ID public static long GetUniqueId(IdModule module = IdModule.Max) Parameters module IdModule 默认最大值. Returns long GetUniqueIdByModule(ushort) 根据模块获取唯一ID public static long GetUniqueIdByModule(ushort module = 999) Parameters module ushort 默认最大值. 最大值不能超过999 Returns long"
  },
  "api/GameFrameX.Core.Utility.AgentCallback-1.html": {
    "href": "api/GameFrameX.Core.Utility.AgentCallback-1.html",
    "title": "Class AgentCallback<TAgent> | GameFrameX.Server",
    "keywords": "Class AgentCallback<TAgent> Namespace GameFrameX.Core.Utility Assembly GameFrameX.Core.dll 代理调用回调 public abstract class AgentCallback<TAgent> : IAgentCallback where TAgent : IComponentAgent Type Parameters TAgent Inheritance object AgentCallback<TAgent> Implements IAgentCallback Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods CompAgentType() public Type CompAgentType() Returns Type Invoke(IComponentAgent, Param) 执行 public Task<bool> Invoke(IComponentAgent agent, Param param = null) Parameters agent IComponentAgent param Param Returns Task<bool> OnCall(TAgent, Param) 回调 protected abstract Task<bool> OnCall(TAgent comp, Param param) Parameters comp TAgent param Param Returns Task<bool>"
  },
  "api/GameFrameX.Core.Utility.IAgentCallback.html": {
    "href": "api/GameFrameX.Core.Utility.IAgentCallback.html",
    "title": "Interface IAgentCallback | GameFrameX.Server",
    "keywords": "Interface IAgentCallback Namespace GameFrameX.Core.Utility Assembly GameFrameX.Core.dll 代理调用回调 public interface IAgentCallback Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods CompAgentType() 组件代理类型 Type CompAgentType() Returns Type Invoke(IComponentAgent, Param) 执行 Task<bool> Invoke(IComponentAgent agent, Param param = null) Parameters agent IComponentAgent 组件代理 param Param 参数 Returns Task<bool>"
  },
  "api/GameFrameX.Core.Utility.StatisticsTool.html": {
    "href": "api/GameFrameX.Core.Utility.StatisticsTool.html",
    "title": "Class StatisticsTool | GameFrameX.Server",
    "keywords": "Class StatisticsTool Namespace GameFrameX.Core.Utility Assembly GameFrameX.Core.dll 统计工具 public sealed class StatisticsTool Inheritance object StatisticsTool Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods ClearCount() 清理统计 public void ClearCount() ClearCount(DateTime) 清理统计 public void ClearCount(DateTime time) Parameters time DateTime Count(string, int) 记录统计 public void Count(string key, int num = 1) Parameters key string num int CountRecord(int) 统计 public Task<string> CountRecord(int limit = 10) Parameters limit int Returns Task<string>"
  },
  "api/GameFrameX.Core.Utility.html": {
    "href": "api/GameFrameX.Core.Utility.html",
    "title": "Namespace GameFrameX.Core.Utility | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.Core.Utility Classes ActorIdGenerator ActorId 生成器 14 + 7 + 30 + 12 = 63 服务器id 类型 时间戳 自增 玩家 公会 服务器id * 100000 + 全局功能id 全局玩法 AgentCallback<TAgent> 代理调用回调 StatisticsTool 统计工具 Interfaces IAgentCallback 代理调用回调"
  },
  "api/GameFrameX.GameAnalytics.ErrorLevel.html": {
    "href": "api/GameFrameX.GameAnalytics.ErrorLevel.html",
    "title": "Enum ErrorLevel | GameFrameX.Server",
    "keywords": "Enum ErrorLevel Namespace GameFrameX.GameAnalytics Assembly GameFrameX.GameAnalytics.dll 错误级别 public enum ErrorLevel Extension Methods ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Fields Critical = 5 严重 Debug = 1 调试 Error = 4 错误 Info = 2 信息 Undefined = 0 未定义 Warning = 3 警告"
  },
  "api/GameFrameX.GameAnalytics.GameAnalyticsHelper.html": {
    "href": "api/GameFrameX.GameAnalytics.GameAnalyticsHelper.html",
    "title": "Class GameAnalyticsHelper | GameFrameX.Server",
    "keywords": "Class GameAnalyticsHelper Namespace GameFrameX.GameAnalytics Assembly GameFrameX.GameAnalytics.dll 游戏分析帮助类 public static class GameAnalyticsHelper Inheritance object GameAnalyticsHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Business(string, int, string, string, string, IDictionary<string, object>, bool) 在 GA 服务器上支持收据验证的应用内购买。 public static void Business(string currency, int amount, string itemType, string itemId, string cartType, IDictionary<string, object> customFields = null, bool mergeFields = false) Parameters currency string 货币类型 amount int 数量 itemType string 道具类型 itemId string 道具ID cartType string 购买方式 customFields IDictionary<string, object> 自定义参数 mergeFields bool 是否合并参数 Error(ErrorLevel, string, IDictionary<string, object>, bool) 提交异常堆栈跟踪或自定义错误消息。 public static void Error(ErrorLevel errorLevel, string message, IDictionary<string, object> customFields = null, bool mergeFields = false) Parameters errorLevel ErrorLevel 日志等级 message string 消息内容 customFields IDictionary<string, object> 自定义字段 mergeFields bool 是否合并字段 Event(string, Dictionary<string, object>) 提交自定义事件 ID。用于跟踪游戏特别需要的指标。 public static void Event(string eventId, Dictionary<string, object> customFields = null) Parameters eventId string 事件ID customFields Dictionary<string, object> 自定义参数 Init(string, string, string) 初始化, https://docs.gameanalytics.com/integrations/sdk/c-sharp#initialize-the-sdk public static void Init(string gameKey, string gameSecret, string version) Parameters gameKey string gameSecret string version string 程序集版本 Progression(ProgressionStatus, string, string, string, double, IDictionary<string, object>, bool) 级别尝试与开始，失败和完成事件。 public static void Progression(ProgressionStatus progressionStatus, string progression01, string progression02, string progression03, double score, IDictionary<string, object> customFields = null, bool mergeFields = false) Parameters progressionStatus ProgressionStatus 进程状态 progression01 string 进程1 progression02 string 进程2 progression03 string 进程3 score double 分数 customFields IDictionary<string, object> 自定义参数 mergeFields bool 是否合并参数 Resource(ResourceFlowType, string, float, string, string, IDictionary<string, object>, bool) 管理虚拟货币的流动 - 如 gems 或 lives public static void Resource(ResourceFlowType resourceFlowType, string currency, float amount, string itemType, string itemId, IDictionary<string, object> customFields = null, bool mergeFields = false) Parameters resourceFlowType ResourceFlowType 资源流动类型 currency string 货币 amount float 数量 itemType string 道具类型 itemId string 道具ID customFields IDictionary<string, object> 自定义字段 mergeFields bool 是否合并字段 SetGlobalCustomEventFields(Dictionary<string, object>) 设置全局自定义事件字段 public static void SetGlobalCustomEventFields(Dictionary<string, object> customFields) Parameters customFields Dictionary<string, object> 自定义参数"
  },
  "api/GameFrameX.GameAnalytics.ProgressionStatus.html": {
    "href": "api/GameFrameX.GameAnalytics.ProgressionStatus.html",
    "title": "Enum ProgressionStatus | GameFrameX.Server",
    "keywords": "Enum ProgressionStatus Namespace GameFrameX.GameAnalytics Assembly GameFrameX.GameAnalytics.dll 进度状态 public enum ProgressionStatus Extension Methods ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Fields Complete = 2 完成 Fail = 3 失败 Start = 1 开始 Undefined = 0 未定义"
  },
  "api/GameFrameX.GameAnalytics.ResourceFlowType.html": {
    "href": "api/GameFrameX.GameAnalytics.ResourceFlowType.html",
    "title": "Enum ResourceFlowType | GameFrameX.Server",
    "keywords": "Enum ResourceFlowType Namespace GameFrameX.GameAnalytics Assembly GameFrameX.GameAnalytics.dll 资源流动类型 public enum ResourceFlowType Extension Methods ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Fields Sink = 2 玩家丢失或花费资源 Source = 1 玩家获得或获得资源的时间 Undefined = 0 未定义"
  },
  "api/GameFrameX.GameAnalytics.html": {
    "href": "api/GameFrameX.GameAnalytics.html",
    "title": "Namespace GameFrameX.GameAnalytics | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.GameAnalytics Classes GameAnalyticsHelper 游戏分析帮助类 Enums ErrorLevel 错误级别 ProgressionStatus 进度状态 ResourceFlowType 资源流动类型"
  },
  "api/GameFrameX.NetWork.Abstractions.ICommandInfo.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.ICommandInfo.html",
    "title": "Interface ICommandInfo | GameFrameX.Server",
    "keywords": "Interface ICommandInfo Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 消息指令信息 public interface ICommandInfo Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties MainId 主消息ID int MainId { get; } Property Value int MessageId 合并后的消息ID int MessageId { get; } Property Value int SubId 次消息ID int SubId { get; } Property Value int"
  },
  "api/GameFrameX.NetWork.Abstractions.IHeartBeatMessage.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IHeartBeatMessage.html",
    "title": "Interface IHeartBeatMessage | GameFrameX.Server",
    "keywords": "Interface IHeartBeatMessage Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 心跳消息接口 public interface IHeartBeatMessage : INetworkMessage, IMessage Inherited Members INetworkMessage.UniqueId INetworkMessage.SetMessageId(int) INetworkMessage.UpdateUniqueId() INetworkMessage.SetUniqueId(int) INetworkMessage.ToJsonString() IMessage.ToFormatMessageString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object)"
  },
  "api/GameFrameX.NetWork.Abstractions.IInnerNetworkMessage.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IInnerNetworkMessage.html",
    "title": "Interface IInnerNetworkMessage | GameFrameX.Server",
    "keywords": "Interface IInnerNetworkMessage Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 内部消息 public interface IInnerNetworkMessage : IMessage Inherited Members IMessage.ToFormatMessageString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties Header 消息头对象 INetworkMessageHeader Header { get; } Property Value INetworkMessageHeader MessageData 消息数据 byte[] MessageData { get; } Property Value byte[] Methods ClearData() 清除消息数据 void ClearData() DeserializeMessageObject() 转换消息数据为消息对象 INetworkMessage DeserializeMessageObject() Returns INetworkMessage GetData(string) 获取消息数据 object GetData(string key) Parameters key string Returns object SetData(string, object) 设置消息数据 void SetData(string key, object value) Parameters key string value object SetMessageData(byte[]) 设置消息数据 void SetMessageData(byte[] messageData) Parameters messageData byte[]"
  },
  "api/GameFrameX.NetWork.Abstractions.IMessage.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IMessage.html",
    "title": "Interface IMessage | GameFrameX.Server",
    "keywords": "Interface IMessage Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 网络消息 public interface IMessage Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods ToFormatMessageString() 获取格式化后的消息字符串 string ToFormatMessageString() Returns string"
  },
  "api/GameFrameX.NetWork.Abstractions.IMessageCompressHandler.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IMessageCompressHandler.html",
    "title": "Interface IMessageCompressHandler | GameFrameX.Server",
    "keywords": "Interface IMessageCompressHandler Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 消息压缩器接口定义，用于压缩消息数据 public interface IMessageCompressHandler Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods Handler(byte[]) 压缩处理 byte[] Handler(byte[] message) Parameters message byte[] 消息未压缩内容 Returns byte[]"
  },
  "api/GameFrameX.NetWork.Abstractions.IMessageDecoderHandler.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IMessageDecoderHandler.html",
    "title": "Interface IMessageDecoderHandler | GameFrameX.Server",
    "keywords": "Interface IMessageDecoderHandler Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 消息解码器定义接口 public interface IMessageDecoderHandler Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties PackageHeaderLength 消息头长度 int PackageHeaderLength { get; } Property Value int Methods Handler(ref ReadOnlySequence<byte>) 解析消息 IMessage Handler(ref ReadOnlySequence<byte> sequence) Parameters sequence ReadOnlySequence<byte> 消息数据 Returns IMessage 消息结果对象 Handler(byte[]) 解析消息 IMessage Handler(byte[] data) Parameters data byte[] 消息数据 Returns IMessage 消息结果对象 SetDecompressionHandler(IMessageDecompressHandler) 设置解压消息处理器 void SetDecompressionHandler(IMessageDecompressHandler decompressHandler = null) Parameters decompressHandler IMessageDecompressHandler 解压消息处理器"
  },
  "api/GameFrameX.NetWork.Abstractions.IMessageDecompressHandler.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IMessageDecompressHandler.html",
    "title": "Interface IMessageDecompressHandler | GameFrameX.Server",
    "keywords": "Interface IMessageDecompressHandler Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 消息解压器接口定义，用于解压压缩后的消息 public interface IMessageDecompressHandler Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods Handler(byte[]) 解压处理 byte[] Handler(byte[] message) Parameters message byte[] 消息压缩内容 Returns byte[]"
  },
  "api/GameFrameX.NetWork.Abstractions.IMessageEncoderHandler.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IMessageEncoderHandler.html",
    "title": "Interface IMessageEncoderHandler | GameFrameX.Server",
    "keywords": "Interface IMessageEncoderHandler Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 消息编码器接口定义 public interface IMessageEncoderHandler Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties LimitCompressLength 超过多少字节长度才启用压缩 uint LimitCompressLength { get; } Property Value uint PackageHeaderLength 消息包头长度 ushort PackageHeaderLength { get; } Property Value ushort Methods Handler(IInnerNetworkMessage) 内部消息 byte[] Handler(IInnerNetworkMessage message) Parameters message IInnerNetworkMessage Returns byte[] Handler(IMessage) 消息编码,当压缩消息处理器存在的时候将会被调用 byte[] Handler(IMessage message) Parameters message IMessage 消息对象 Returns byte[] SetCompressionHandler(IMessageCompressHandler) 设置压缩消息处理器 void SetCompressionHandler(IMessageCompressHandler compressHandler = null) Parameters compressHandler IMessageCompressHandler 压缩消息处理器"
  },
  "api/GameFrameX.NetWork.Abstractions.INetWorkChannel.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.INetWorkChannel.html",
    "title": "Interface INetWorkChannel | GameFrameX.Server",
    "keywords": "Interface INetWorkChannel Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 网络通道 public interface INetWorkChannel Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties GameAppSession 应用会话对象 IGameAppSession GameAppSession { get; } Property Value IGameAppSession RpcSession RPC 会话 IRpcSession RpcSession { get; } Property Value IRpcSession Methods ClearData() 清除自定义数据 void ClearData() Close() 关闭网络 void Close() GetData<T>(string) 获取用户数据对象. 可能会发生转换失败的异常。 如果数据不存在则返回null T GetData<T>(string key) Parameters key string 数据Key Returns T 用户数据对象 Type Parameters T 将要获取的数据类型。 GetLastMessageTimeSecond(in DateTime) 获取最后一次消息的时间 long GetLastMessageTimeSecond(in DateTime utcTime) Parameters utcTime DateTime UTC时间 Returns long IsClosed() 网络是否已经关闭 bool IsClosed() Returns bool 是否已经关闭 RemoveData(string) 移除用户数据 void RemoveData(string key) Parameters key string 数据Key SetData(string, object) 设置用户数据 void SetData(string key, object value) Parameters key string 数据Key value object 数据值 UpdateReceiveMessageTime(long) 更新接收消息时间 void UpdateReceiveMessageTime(long offsetTicks = 0) Parameters offsetTicks long Write(INetworkMessage) 写入消息 void Write(INetworkMessage messageObject) Parameters messageObject INetworkMessage 消息对象 WriteAsync(INetworkMessage, int) 异步写入消息 Task WriteAsync(INetworkMessage msg, int errorCode = 0) Parameters msg INetworkMessage 消息对象 errorCode int 错误码 Returns Task"
  },
  "api/GameFrameX.NetWork.Abstractions.INetworkMessage.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.INetworkMessage.html",
    "title": "Interface INetworkMessage | GameFrameX.Server",
    "keywords": "Interface INetworkMessage Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 网络消息接口 public interface INetworkMessage : IMessage Inherited Members IMessage.ToFormatMessageString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties UniqueId 消息的唯一ID int UniqueId { get; } Property Value int Methods SetMessageId(int) 设置消息ID void SetMessageId(int messageId) Parameters messageId int SetUniqueId(int) 设置唯一消息ID void SetUniqueId(int uniqueId) Parameters uniqueId int ToJsonString() 获取JSON格式化后的消息字符串 string ToJsonString() Returns string UpdateUniqueId() 更新唯一消息ID void UpdateUniqueId()"
  },
  "api/GameFrameX.NetWork.Abstractions.INetworkMessageHeader.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.INetworkMessageHeader.html",
    "title": "Interface INetworkMessageHeader | GameFrameX.Server",
    "keywords": "Interface INetworkMessageHeader Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 网络消息头 public interface INetworkMessageHeader Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties MessageId 消息ID int MessageId { get; set; } Property Value int OperationType 操作类型 MessageOperationType OperationType { get; set; } Property Value MessageOperationType UniqueId 唯一消息序列ID int UniqueId { get; set; } Property Value int ZipFlag 压缩标记 byte ZipFlag { get; set; } Property Value byte"
  },
  "api/GameFrameX.NetWork.Abstractions.INotifyMessage.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.INotifyMessage.html",
    "title": "Interface INotifyMessage | GameFrameX.Server",
    "keywords": "Interface INotifyMessage Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 通知消息 public interface INotifyMessage : INetworkMessage, IMessage Inherited Members INetworkMessage.UniqueId INetworkMessage.SetMessageId(int) INetworkMessage.UpdateUniqueId() INetworkMessage.SetUniqueId(int) INetworkMessage.ToJsonString() IMessage.ToFormatMessageString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object)"
  },
  "api/GameFrameX.NetWork.Abstractions.IOuterNetworkMessage.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IOuterNetworkMessage.html",
    "title": "Interface IOuterNetworkMessage | GameFrameX.Server",
    "keywords": "Interface IOuterNetworkMessage Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 外部消息 public interface IOuterNetworkMessage : IMessage Inherited Members IMessage.ToFormatMessageString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties Header 消息头对象 INetworkMessageHeader Header { get; } Property Value INetworkMessageHeader MessageData 消息数据 byte[] MessageData { get; } Property Value byte[] UniqueId 消息唯一ID string UniqueId { get; } Property Value string Methods ClearData() 清除消息数据 void ClearData() DeserializeMessageObject() 转换消息数据为消息对象 INetworkMessage DeserializeMessageObject() Returns INetworkMessage GetData(string) 获取消息数据 object GetData(string key) Parameters key string Returns object SetData(string, object) 设置消息数据 void SetData(string key, object value) Parameters key string value object SetMessageData(byte[]) 设置消息数据 void SetMessageData(byte[] messageData) Parameters messageData byte[]"
  },
  "api/GameFrameX.NetWork.Abstractions.IRequestMessage.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IRequestMessage.html",
    "title": "Interface IRequestMessage | GameFrameX.Server",
    "keywords": "Interface IRequestMessage Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 请求消息 public interface IRequestMessage : INetworkMessage, IMessage Inherited Members INetworkMessage.UniqueId INetworkMessage.SetMessageId(int) INetworkMessage.UpdateUniqueId() INetworkMessage.SetUniqueId(int) INetworkMessage.ToJsonString() IMessage.ToFormatMessageString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object)"
  },
  "api/GameFrameX.NetWork.Abstractions.IResponseMessage.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IResponseMessage.html",
    "title": "Interface IResponseMessage | GameFrameX.Server",
    "keywords": "Interface IResponseMessage Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 响应消息 public interface IResponseMessage : INetworkMessage, IMessage Inherited Members INetworkMessage.UniqueId INetworkMessage.SetMessageId(int) INetworkMessage.UpdateUniqueId() INetworkMessage.SetUniqueId(int) INetworkMessage.ToJsonString() IMessage.ToFormatMessageString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties ErrorCode 错误码，非 0 表示错误 int ErrorCode { get; set; } Property Value int"
  },
  "api/GameFrameX.NetWork.Abstractions.IRpcResult.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IRpcResult.html",
    "title": "Interface IRpcResult | GameFrameX.Server",
    "keywords": "Interface IRpcResult Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll RPC请求结果 public interface IRpcResult Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties Error 错误信息 string Error { get; } Property Value string IsSuccess 是否成功 bool IsSuccess { get; } Property Value bool Message 返回消息 IResponseMessage Message { get; } Property Value IResponseMessage"
  },
  "api/GameFrameX.NetWork.Abstractions.IRpcSession.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.IRpcSession.html",
    "title": "Interface IRpcSession | GameFrameX.Server",
    "keywords": "Interface IRpcSession Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll RPC会话接口 public interface IRpcSession Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods Call(IRequestMessage, int) 异步调用,且等待返回 Task<IRpcResult> Call(IRequestMessage message, int timeOutMillisecond = 10000) Parameters message IRequestMessage 调用消息对象 timeOutMillisecond int 调用超时,单位毫秒,默认10秒 Returns Task<IRpcResult> 返回消息对象 Send(IRequestMessage) 异步发送,不等待结果 void Send(IRequestMessage message) Parameters message IRequestMessage 调用消息对象"
  },
  "api/GameFrameX.NetWork.Abstractions.MessageCodeDescriptionAttribute.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.MessageCodeDescriptionAttribute.html",
    "title": "Class MessageCodeDescriptionAttribute | GameFrameX.Server",
    "keywords": "Class MessageCodeDescriptionAttribute Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 消息错误码的描述 [AttributeUsage(AttributeTargets.Enum|AttributeTargets.Property|AttributeTargets.Field)] public sealed class MessageCodeDescriptionAttribute : Attribute Inheritance object Attribute MessageCodeDescriptionAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors MessageCodeDescriptionAttribute(string) 构造消息错误码的描述 public MessageCodeDescriptionAttribute(string description) Parameters description string 错误码描述 Properties Description 消息错误码的描述 public string Description { get; } Property Value string"
  },
  "api/GameFrameX.NetWork.Abstractions.MessageIdUtility.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.MessageIdUtility.html",
    "title": "Class MessageIdUtility | GameFrameX.Server",
    "keywords": "Class MessageIdUtility Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 消息ID工具类 public static class MessageIdUtility Inheritance object MessageIdUtility Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetMainId(int) 获取主消息ID public static int GetMainId(int messageId) Parameters messageId int 消息码 Returns int GetMessageId(int, int) 获取消息ID public static int GetMessageId(int mainId, int subId) Parameters mainId int 主消息码 subId int 子消息码 Returns int 返回组合之后的完整消息码 GetSubId(int) 获取子消息ID public static int GetSubId(int messageId) Parameters messageId int 消息码 Returns int"
  },
  "api/GameFrameX.NetWork.Abstractions.MessageMappingAttribute.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.MessageMappingAttribute.html",
    "title": "Class MessageMappingAttribute | GameFrameX.Server",
    "keywords": "Class MessageMappingAttribute Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 消息类型对应的消息映射处理器 [AttributeUsage(AttributeTargets.Class)] public sealed class MessageMappingAttribute : Attribute Inheritance object Attribute MessageMappingAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors MessageMappingAttribute(Type) 构造消息类型对应的消息映射处理器 public MessageMappingAttribute(Type messageType) Parameters messageType Type 消息处理类型 Properties MessageType 处理类型 public Type MessageType { get; } Property Value Type"
  },
  "api/GameFrameX.NetWork.Abstractions.MessageOperationType.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.MessageOperationType.html",
    "title": "Enum MessageOperationType | GameFrameX.Server",
    "keywords": "Enum MessageOperationType Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 消息操作业务类型 public enum MessageOperationType : byte Extension Methods ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Fields Cache = 2 缓存查询 Database = 3 数据库查询 Exit = 10 退出 Forbid = 6 禁止 Forward = 13 转发 Game = 4 游戏 GameManager = 5 游戏管理 HeartBeat = 1 心跳 Kick = 11 踢人 None = 0 空类型 Notify = 12 通知 Reboot = 7 重启 Reconnect = 8 重连 Register = 14 注册 Reload = 9 重载 RequestConnectServer = 15 请求链接服务器信息"
  },
  "api/GameFrameX.NetWork.Abstractions.MessageProtoHelper.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.MessageProtoHelper.html",
    "title": "Class MessageProtoHelper | GameFrameX.Server",
    "keywords": "Class MessageProtoHelper Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 协议消息处理器 public static class MessageProtoHelper Inheritance object MessageProtoHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetMessageIdByType(INetworkMessage) 获取消息ID,如果没有找到则返回 -1 public static int GetMessageIdByType(INetworkMessage message) Parameters message INetworkMessage 消息对象 Returns int GetMessageIdByType(Type) 获取消息ID,如果没有找到则返回 -1 public static int GetMessageIdByType(Type type) Parameters type Type 消息类型 Returns int GetMessageOperationType(INetworkMessage) 获取消息操作类型 public static MessageOperationType GetMessageOperationType(INetworkMessage message) Parameters message INetworkMessage 消息对象 Returns MessageOperationType GetMessageOperationType(Type) 获取消息操作类型 public static MessageOperationType GetMessageOperationType(Type type) Parameters type Type 消息类型 Returns MessageOperationType GetMessageTypeById(int) 获取消息类型，如果没有则返回null public static Type GetMessageTypeById(int messageId) Parameters messageId int 消息ID Returns Type Init(params Assembly[]) 初始化所有协议对象 public static void Init(params Assembly[] assemblies) Parameters assemblies Assembly[] 协议所在程序集集合.将在集合中查找所有的类型进行识别 Exceptions Exception 如果ID重复将会触发异常 IsHeartbeat(INetworkMessage) 获取消息类型是否是心跳类型 public static bool IsHeartbeat(INetworkMessage message) Parameters message INetworkMessage 消息对象 Returns bool IsHeartbeat(Type) 获取消息类型是否是心跳类型 public static bool IsHeartbeat(Type type) Parameters type Type 消息类型 Returns bool SetMessageId(INetworkMessage) 设置消息ID和操作类型 public static void SetMessageId(INetworkMessage message) Parameters message INetworkMessage 消息对象"
  },
  "api/GameFrameX.NetWork.Abstractions.MessageRpcMappingAttribute.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.MessageRpcMappingAttribute.html",
    "title": "Class MessageRpcMappingAttribute | GameFrameX.Server",
    "keywords": "Class MessageRpcMappingAttribute Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll RPC 消息属性标记 [AttributeUsage(AttributeTargets.Class)] public class MessageRpcMappingAttribute : Attribute Inheritance object Attribute MessageRpcMappingAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors MessageRpcMappingAttribute(IRequestMessage, IResponseMessage) 构建RPC 消息 public MessageRpcMappingAttribute(IRequestMessage requestMessage, IResponseMessage responseMessage) Parameters requestMessage IRequestMessage 请求消息类型 responseMessage IResponseMessage 返回消息类型 Properties RequestMessage 请求消息 public IRequestMessage RequestMessage { get; } Property Value IRequestMessage ResponseMessage 响应消息 public IResponseMessage ResponseMessage { get; } Property Value IResponseMessage"
  },
  "api/GameFrameX.NetWork.Abstractions.MessageTypeHandlerAttribute.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.MessageTypeHandlerAttribute.html",
    "title": "Class MessageTypeHandlerAttribute | GameFrameX.Server",
    "keywords": "Class MessageTypeHandlerAttribute Namespace GameFrameX.NetWork.Abstractions Assembly GameFrameX.NetWork.Abstractions.dll 消息类型处理器标记 [AttributeUsage(AttributeTargets.Class)] public class MessageTypeHandlerAttribute : Attribute Inheritance object Attribute MessageTypeHandlerAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors MessageTypeHandlerAttribute(int, MessageOperationType) 构造消息类型处理器 public MessageTypeHandlerAttribute(int messageId, MessageOperationType operationType = MessageOperationType.None) Parameters messageId int 消息ID operationType MessageOperationType 消息类型 Properties MainId 主消息ID public int MainId { get; } Property Value int MessageId 消息ID public int MessageId { get; } Property Value int OperationType 消息操作类型 public MessageOperationType OperationType { get; } Property Value MessageOperationType SubId 子消息ID public int SubId { get; } Property Value int"
  },
  "api/GameFrameX.NetWork.Abstractions.html": {
    "href": "api/GameFrameX.NetWork.Abstractions.html",
    "title": "Namespace GameFrameX.NetWork.Abstractions | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.NetWork.Abstractions Classes MessageCodeDescriptionAttribute 消息错误码的描述 MessageIdUtility 消息ID工具类 MessageMappingAttribute 消息类型对应的消息映射处理器 MessageProtoHelper 协议消息处理器 MessageRpcMappingAttribute RPC 消息属性标记 MessageTypeHandlerAttribute 消息类型处理器标记 Interfaces ICommandInfo 消息指令信息 IHeartBeatMessage 心跳消息接口 IInnerNetworkMessage 内部消息 IMessage 网络消息 IMessageCompressHandler 消息压缩器接口定义，用于压缩消息数据 IMessageDecoderHandler 消息解码器定义接口 IMessageDecompressHandler 消息解压器接口定义，用于解压压缩后的消息 IMessageEncoderHandler 消息编码器接口定义 INetWorkChannel 网络通道 INetworkMessage 网络消息接口 INetworkMessageHeader 网络消息头 INotifyMessage 通知消息 IOuterNetworkMessage 外部消息 IRequestMessage 请求消息 IResponseMessage 响应消息 IRpcResult RPC请求结果 IRpcSession RPC会话接口 Enums MessageOperationType 消息操作业务类型"
  },
  "api/GameFrameX.NetWork.BaseNetWorkChannel.html": {
    "href": "api/GameFrameX.NetWork.BaseNetWorkChannel.html",
    "title": "Class BaseNetWorkChannel | GameFrameX.Server",
    "keywords": "Class BaseNetWorkChannel Namespace GameFrameX.NetWork Assembly GameFrameX.NetWork.dll 基础网络通道 public class BaseNetWorkChannel : INetWorkChannel Inheritance object BaseNetWorkChannel Implements INetWorkChannel Derived DefaultNetWorkChannel Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors BaseNetWorkChannel(IGameAppSession, AppSetting, IMessageEncoderHandler, IRpcSession, bool) 初始化 public BaseNetWorkChannel(IGameAppSession session, AppSetting setting, IMessageEncoderHandler messageEncoder, IRpcSession rpcSession, bool isWebSocket) Parameters session IGameAppSession setting AppSetting messageEncoder IMessageEncoderHandler rpcSession IRpcSession isWebSocket bool Fields CancellationTokenSource 关闭源 protected readonly CancellationTokenSource CancellationTokenSource Field Value CancellationTokenSource Properties GameAppSession 会话 public IGameAppSession GameAppSession { get; } Property Value IGameAppSession IsWebSocket 是否是WebSocket public bool IsWebSocket { get; } Property Value bool RpcSession Rpc会话 public IRpcSession RpcSession { get; } Property Value IRpcSession Setting 设置 public AppSetting Setting { get; } Property Value AppSetting Methods ClearData() 清除自定义数据 public void ClearData() Close() 关闭 public virtual void Close() GetData<T>(string) 获取用户数据对象. 可能会发生转换失败的异常。 如果数据不存在则返回null public T GetData<T>(string key) Parameters key string 数据Key Returns T 用户数据对象 Type Parameters T 将要获取的数据类型。 GetLastMessageTimeSecond(in DateTime) 获取最后接收消息到现在的时间。单位秒 public long GetLastMessageTimeSecond(in DateTime utcTime) Parameters utcTime DateTime Returns long IsClosed() 是否关闭 public virtual bool IsClosed() Returns bool RemoveData(string) 删除自定义数据 public void RemoveData(string key) Parameters key string SetData(string, object) 设置自定义数据 public void SetData(string key, object value) Parameters key string value object UpdateReceiveMessageTime(long) 更新接收消息的时间 public void UpdateReceiveMessageTime(long offsetTicks = 0) Parameters offsetTicks long Write(INetworkMessage) 写入消息 public virtual void Write(INetworkMessage messageObject) Parameters messageObject INetworkMessage 消息对象 WriteAsync(INetworkMessage, int) 异步写入消息 public virtual Task WriteAsync(INetworkMessage messageObject, int errorCode = 0) Parameters messageObject INetworkMessage 消息对象 errorCode int 错误码 Returns Task"
  },
  "api/GameFrameX.NetWork.DefaultNetWorkChannel.html": {
    "href": "api/GameFrameX.NetWork.DefaultNetWorkChannel.html",
    "title": "Class DefaultNetWorkChannel | GameFrameX.Server",
    "keywords": "Class DefaultNetWorkChannel Namespace GameFrameX.NetWork Assembly GameFrameX.NetWork.dll 默认网络通道 public class DefaultNetWorkChannel : BaseNetWorkChannel, INetWorkChannel Inheritance object BaseNetWorkChannel DefaultNetWorkChannel Implements INetWorkChannel Inherited Members BaseNetWorkChannel.CancellationTokenSource BaseNetWorkChannel.IsWebSocket BaseNetWorkChannel.Setting BaseNetWorkChannel.GameAppSession BaseNetWorkChannel.RpcSession BaseNetWorkChannel.Write(INetworkMessage) BaseNetWorkChannel.WriteAsync(INetworkMessage, int) BaseNetWorkChannel.Close() BaseNetWorkChannel.IsClosed() BaseNetWorkChannel.GetData<T>(string) BaseNetWorkChannel.ClearData() BaseNetWorkChannel.RemoveData(string) BaseNetWorkChannel.SetData(string, object) BaseNetWorkChannel.UpdateReceiveMessageTime(long) BaseNetWorkChannel.GetLastMessageTimeSecond(in DateTime) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors DefaultNetWorkChannel(IGameAppSession, AppSetting, IMessageEncoderHandler, IRpcSession, bool) 初始化 public DefaultNetWorkChannel(IGameAppSession session, AppSetting setting, IMessageEncoderHandler messageEncoder, IRpcSession rpcSession = null, bool isWebSocket = false) Parameters session IGameAppSession setting AppSetting messageEncoder IMessageEncoderHandler rpcSession IRpcSession isWebSocket bool"
  },
  "api/GameFrameX.NetWork.HTTP.BaseHttpHandler.html": {
    "href": "api/GameFrameX.NetWork.HTTP.BaseHttpHandler.html",
    "title": "Class BaseHttpHandler | GameFrameX.Server",
    "keywords": "Class BaseHttpHandler Namespace GameFrameX.NetWork.HTTP Assembly GameFrameX.NetWork.HTTP.dll 基础HTTP处理器，用于处理HTTP请求的基础逻辑。 public abstract class BaseHttpHandler : IHttpHandler Inheritance object BaseHttpHandler Implements IHttpHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties CheckCodeEnd 尾校验码，用于生成签名时的尾部校验码。 protected virtual ushort CheckCodeEnd { get; } Property Value ushort CheckCodeStart 头校验码，用于生成签名时的头部校验码。 protected virtual ushort CheckCodeStart { get; } Property Value ushort CheckCodeTime 校验时间差，用于生成签名时的时间偏移量。 protected virtual int CheckCodeTime { get; } Property Value int IsCheckSign 是否需要校验签名，默认为不需要校验。 public virtual bool IsCheckSign { get; } Property Value bool Methods Action(string, string, Dictionary<string, object>) 处理HTTP请求的异步操作，返回字符串结果。 public virtual Task<string> Action(string ip, string url, Dictionary<string, object> paramMap) Parameters ip string 客户端IP地址。 url string 请求的URL。 paramMap Dictionary<string, object> 请求参数字典，键为参数名，值为参数值。 Returns Task<string> 返回处理结果的字符串。 Action(string, string, Dictionary<string, object>, MessageObject) 处理HTTP请求的异步操作，返回MessageObject对象。 public virtual Task<MessageObject> Action(string ip, string url, Dictionary<string, object> paramMap, MessageObject messageObject) Parameters ip string 客户端IP地址。 url string 请求的URL。 paramMap Dictionary<string, object> 请求参数字典，键为参数名，值为参数值。 messageObject MessageObject 消息对象，包含更多信息。 Returns Task<MessageObject> 返回处理结果的MessageObject对象。 CheckSign(Dictionary<string, object>, out string) 校验签名是否有效。 public bool CheckSign(Dictionary<string, object> paramMap, out string error) Parameters paramMap Dictionary<string, object> 请求参数字典。 error string 错误消息，如果校验失败则返回具体的错误信息。 Returns bool 校验结果，true表示校验成功，false表示校验失败。 GetStringSign(string) 获取签名字符串。 public string GetStringSign(string str) Parameters str string 待签名的字符串。 Returns string 签名后的字符串。"
  },
  "api/GameFrameX.NetWork.HTTP.HttpHandler.html": {
    "href": "api/GameFrameX.NetWork.HTTP.HttpHandler.html",
    "title": "Class HttpHandler | GameFrameX.Server",
    "keywords": "Class HttpHandler Namespace GameFrameX.NetWork.HTTP Assembly GameFrameX.NetWork.HTTP.dll HTTP处理器，用于处理HTTP请求 public static class HttpHandler Inheritance object HttpHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods HandleRequest(HttpContext, Func<string, BaseHttpHandler>, List<IHttpAopHandler>) 处理HTTP请求 public static Task HandleRequest(HttpContext context, Func<string, BaseHttpHandler> baseHandler, List<IHttpAopHandler> aopHandlerTypes = null) Parameters context HttpContext HTTP上下文 baseHandler Func<string, BaseHttpHandler> 基础HTTP处理器工厂方法 aopHandlerTypes List<IHttpAopHandler> AOP处理器列表，可选 Returns Task"
  },
  "api/GameFrameX.NetWork.HTTP.HttpMessageMappingAttribute.html": {
    "href": "api/GameFrameX.NetWork.HTTP.HttpMessageMappingAttribute.html",
    "title": "Class HttpMessageMappingAttribute | GameFrameX.Server",
    "keywords": "Class HttpMessageMappingAttribute Namespace GameFrameX.NetWork.HTTP Assembly GameFrameX.NetWork.HTTP.dll HTTP消息处理器属性，用于标记HTTP消息处理器类 [AttributeUsage(AttributeTargets.Class)] public sealed class HttpMessageMappingAttribute : Attribute Inheritance object Attribute HttpMessageMappingAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors HttpMessageMappingAttribute(Type) 构造函数 public HttpMessageMappingAttribute(Type classType) Parameters classType Type 处理器类的类型 Exceptions ArgumentNullException 当classType为null时抛出 InvalidOperationException 当classType不是密封类或不以HTTPsuffix结尾时抛出 Fields HTTPprefix 处理器命名前缀 public const string HTTPprefix = \"\" Field Value string HTTPsuffix 处理器命名后缀 public const string HTTPsuffix = \"HttpHandler\" Field Value string Properties OriginalCmd 原始命令名称 public string OriginalCmd { get; } Property Value string StandardCmd 标准化后的命令名称 public string StandardCmd { get; } Property Value string"
  },
  "api/GameFrameX.NetWork.HTTP.HttpServer.html": {
    "href": "api/GameFrameX.NetWork.HTTP.HttpServer.html",
    "title": "Class HttpServer | GameFrameX.Server",
    "keywords": "Class HttpServer Namespace GameFrameX.NetWork.HTTP Assembly GameFrameX.NetWork.HTTP.dll HTTP服务器 public static class HttpServer Inheritance object HttpServer Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ApiRootPath API根地址 public static string ApiRootPath { get; } Property Value string Methods Start(int, int, Func<string, BaseHttpHandler>, List<IHttpAopHandler>, string, LogLevel) 启动 public static Task Start(int httpPort, int httpsPort, Func<string, BaseHttpHandler> baseHandler, List<IHttpAopHandler> aopHandlerTypes = null, string apiRootPath = \"/game/api/\", LogLevel minimumLevelLogLevel = LogLevel.Debug) Parameters httpPort int HTTP端口,如果没有指定端口，则默认为28080 httpsPort int HTTPS端口,如果没有指定端口，则不监听HTTPS baseHandler Func<string, BaseHttpHandler> 根据命令Id获得处理器 aopHandlerTypes List<IHttpAopHandler> Aop处理器列表 apiRootPath string 接口根路径,必须以 / 开头和以 / 结尾,默认为 [/game/api] minimumLevelLogLevel LogLevel 日志记录最小级别 Returns Task Stop() 停止 public static Task Stop() Returns Task"
  },
  "api/GameFrameX.NetWork.HTTP.HttpStatusCode.html": {
    "href": "api/GameFrameX.NetWork.HTTP.HttpStatusCode.html",
    "title": "Class HttpStatusCode | GameFrameX.Server",
    "keywords": "Class HttpStatusCode Namespace GameFrameX.NetWork.HTTP Assembly GameFrameX.NetWork.HTTP.dll HTTP状态码 public static class HttpStatusCode Inheritance object HttpStatusCode Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ActionFailed 操作失败 public const int ActionFailed = 15 Field Value int Illegal 非法 public const int Illegal = 12 Field Value int ParamErr 参数错误 public const int ParamErr = 13 Field Value int Undefined 未定义的命令 public const int Undefined = 11 Field Value int"
  },
  "api/GameFrameX.NetWork.HTTP.HttpStatusMessage.html": {
    "href": "api/GameFrameX.NetWork.HTTP.HttpStatusMessage.html",
    "title": "Class HttpStatusMessage | GameFrameX.Server",
    "keywords": "Class HttpStatusMessage Namespace GameFrameX.NetWork.HTTP Assembly GameFrameX.NetWork.HTTP.dll HTTP状态消息 public static class HttpStatusMessage Inheritance object HttpStatusMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields CheckFailedCommand 验证失败的命令 public const string CheckFailedCommand = \"check failed command\" Field Value string NotFoundCommand 未找到的命令 public const string NotFoundCommand = \"not found command\" Field Value string ParamErrorMessage 参数错误 public const string ParamErrorMessage = \"http命令未包含验证参数sign 和 timestamp\" Field Value string ServerError 服务器错误 public const string ServerError = \"server error\" Field Value string Success 成功 public const string Success = \"ok\" Field Value string UndefinedCommand 未定义的命令 public const string UndefinedCommand = \"undefined command\" Field Value string"
  },
  "api/GameFrameX.NetWork.HTTP.IHttpAopHandler.html": {
    "href": "api/GameFrameX.NetWork.HTTP.IHttpAopHandler.html",
    "title": "Interface IHttpAopHandler | GameFrameX.Server",
    "keywords": "Interface IHttpAopHandler Namespace GameFrameX.NetWork.HTTP Assembly GameFrameX.NetWork.HTTP.dll HTTP 拦截处理器 public interface IHttpAopHandler Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties Priority 优先级 int Priority { get; } Property Value int Methods Run(HttpContext, string, string, Dictionary<string, object>) 执行处理 bool Run(HttpContext context, string ip, string url, Dictionary<string, object> paramMap) Parameters context HttpContext 上下文 ip string 请求IP url string 请求地址 paramMap Dictionary<string, object> 参数列表 Returns bool 需要继续执行返回TRUE,否则返回FALSE"
  },
  "api/GameFrameX.NetWork.HTTP.IHttpHandler.html": {
    "href": "api/GameFrameX.NetWork.HTTP.IHttpHandler.html",
    "title": "Interface IHttpHandler | GameFrameX.Server",
    "keywords": "Interface IHttpHandler Namespace GameFrameX.NetWork.HTTP Assembly GameFrameX.NetWork.HTTP.dll HTTP处理器 public interface IHttpHandler Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties IsCheckSign 是否校验签名 bool IsCheckSign { get; } Property Value bool Methods Action(string, string, Dictionary<string, object>) 处理HTTP请求的异步操作，返回字符串结果。 Task<string> Action(string ip, string url, Dictionary<string, object> paramMap) Parameters ip string 客户端IP地址。 url string 请求的URL。 paramMap Dictionary<string, object> 请求参数字典，键为参数名，值为参数值。 Returns Task<string> 返回处理结果的字符串。 Action(string, string, Dictionary<string, object>, MessageObject) 处理HTTP请求的异步操作，返回MessageObject对象。 Task<MessageObject> Action(string ip, string url, Dictionary<string, object> paramMap, MessageObject messageObject) Parameters ip string 客户端IP地址。 url string 请求的URL。 paramMap Dictionary<string, object> 请求参数字典，键为参数名，值为参数值。 messageObject MessageObject 消息对象，包含更多信息。 Returns Task<MessageObject> 返回处理结果的MessageObject对象。"
  },
  "api/GameFrameX.NetWork.HTTP.MessageHttpObject.html": {
    "href": "api/GameFrameX.NetWork.HTTP.MessageHttpObject.html",
    "title": "Class MessageHttpObject | GameFrameX.Server",
    "keywords": "Class MessageHttpObject Namespace GameFrameX.NetWork.HTTP Assembly GameFrameX.NetWork.HTTP.dll HTTP消息包装基类 public sealed class MessageHttpObject Inheritance object MessageHttpObject Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties Body 消息体 [JsonIgnore] [ProtoMember(3)] public byte[] Body { get; set; } Property Value byte[] Id 消息ID [ProtoMember(1)] public int Id { get; set; } Property Value int UniqueId 消息序列号 [ProtoMember(2)] public int UniqueId { get; set; } Property Value int Methods ToString() 转换为字符串 public override string ToString() Returns string"
  },
  "api/GameFrameX.NetWork.HTTP.html": {
    "href": "api/GameFrameX.NetWork.HTTP.html",
    "title": "Namespace GameFrameX.NetWork.HTTP | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.NetWork.HTTP Classes BaseHttpHandler 基础HTTP处理器，用于处理HTTP请求的基础逻辑。 HttpHandler HTTP处理器，用于处理HTTP请求 HttpMessageMappingAttribute HTTP消息处理器属性，用于标记HTTP消息处理器类 HttpServer HTTP服务器 HttpStatusCode HTTP状态码 HttpStatusMessage HTTP状态消息 MessageHttpObject HTTP消息包装基类 Interfaces IHttpAopHandler HTTP 拦截处理器 IHttpHandler HTTP处理器"
  },
  "api/GameFrameX.NetWork.IMessageHandler.html": {
    "href": "api/GameFrameX.NetWork.IMessageHandler.html",
    "title": "Interface IMessageHandler | GameFrameX.Server",
    "keywords": "Interface IMessageHandler Namespace GameFrameX.NetWork Assembly GameFrameX.NetWork.dll 消息处理器 public interface IMessageHandler Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties Message 消息对象 INetworkMessage Message { get; } Property Value INetworkMessage NetWorkChannel 网络频道对象 INetWorkChannel NetWorkChannel { get; } Property Value INetWorkChannel Methods Init(INetworkMessage, INetWorkChannel) 初始化 子类实现必须调用 Task Init(INetworkMessage message, INetWorkChannel netWorkChannel) Parameters message INetworkMessage 消息对象 netWorkChannel INetWorkChannel 网络渠道 Returns Task InnerAction() 内部执行 Task InnerAction() Returns Task"
  },
  "api/GameFrameX.NetWork.InnerNetworkMessage.html": {
    "href": "api/GameFrameX.NetWork.InnerNetworkMessage.html",
    "title": "Class InnerNetworkMessage | GameFrameX.Server",
    "keywords": "Class InnerNetworkMessage Namespace GameFrameX.NetWork Assembly GameFrameX.NetWork.dll 内部消息 public sealed class InnerNetworkMessage : IInnerNetworkMessage, IMessage Inheritance object InnerNetworkMessage Implements IInnerNetworkMessage IMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties Header 消息头对象 public INetworkMessageHeader Header { get; } Property Value INetworkMessageHeader MessageData 消息数据 public byte[] MessageData { get; } Property Value byte[] MessageType 消息类型 [JsonIgnore] public Type MessageType { get; } Property Value Type Methods ClearData() 清除自定义数据 public void ClearData() Create(INetworkMessage, INetworkMessageHeader) 创建内部消息 public static IInnerNetworkMessage Create(INetworkMessage message, INetworkMessageHeader messageObjectHeader) Parameters message INetworkMessage messageObjectHeader INetworkMessageHeader Returns IInnerNetworkMessage Create(INetworkMessageHeader, byte[], Type) 创建内部消息 public static InnerNetworkMessage Create(INetworkMessageHeader messageObjectHeader, byte[] messageData, Type messageType) Parameters messageObjectHeader INetworkMessageHeader 消息头 messageData byte[] 消息体 messageType Type 消息体的类型 Returns InnerNetworkMessage DeserializeMessageObject() 转换消息数据为消息对象 public INetworkMessage DeserializeMessageObject() Returns INetworkMessage GetData() 获取自定义数据 public Dictionary<string, object> GetData() Returns Dictionary<string, object> GetData(string) 获取自定义数据 public object GetData(string key) Parameters key string Returns object RemoveData(string) 删除自定义数据 public bool RemoveData(string key) Parameters key string Returns bool SetData(string, object) 设置自定义数据 public void SetData(string key, object value) Parameters key string value object SetMessageData(byte[]) 设置消息数据 public void SetMessageData(byte[] messageData) Parameters messageData byte[] SetMessageHeader(INetworkMessageHeader) 设置消息头 public void SetMessageHeader(INetworkMessageHeader header) Parameters header INetworkMessageHeader SetMessageType(Type) 设置消息类型 public void SetMessageType(Type messageType) Parameters messageType Type ToFormatMessageString() 获取格式化后的消息字符串 public string ToFormatMessageString() Returns string"
  },
  "api/GameFrameX.NetWork.Message.BaseMessageDecoderHandler.html": {
    "href": "api/GameFrameX.NetWork.Message.BaseMessageDecoderHandler.html",
    "title": "Class BaseMessageDecoderHandler | GameFrameX.Server",
    "keywords": "Class BaseMessageDecoderHandler Namespace GameFrameX.NetWork.Message Assembly GameFrameX.NetWork.Message.dll 基础消息解码处理器 public abstract class BaseMessageDecoderHandler : IMessageDecoderHandler, IPackageDecoder<IMessage> Inheritance object BaseMessageDecoderHandler Implements IMessageDecoderHandler IPackageDecoder<IMessage> Derived DefaultMessageDecoderHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties DecompressHandler 解压消息处理器 protected IMessageDecompressHandler DecompressHandler { get; } Property Value IMessageDecompressHandler PackageHeaderLength 消息头长度 public virtual int PackageHeaderLength { get; } Property Value int Methods Decode(ref ReadOnlySequence<byte>, object) 解码 public IMessage Decode(ref ReadOnlySequence<byte> buffer, object context) Parameters buffer ReadOnlySequence<byte> context object Returns IMessage Handler(ref ReadOnlySequence<byte>) 消息解码 public abstract IMessage Handler(ref ReadOnlySequence<byte> sequence) Parameters sequence ReadOnlySequence<byte> Returns IMessage Handler(byte[]) 和客户端之间的消息 数据长度(2)+消息唯一ID(4)+消息ID(4)+消息内容 public IMessage Handler(byte[] data) Parameters data byte[] Returns IMessage SetDecompressionHandler(IMessageDecompressHandler) 设置解压消息处理器 public void SetDecompressionHandler(IMessageDecompressHandler decompressHandler = null) Parameters decompressHandler IMessageDecompressHandler 解压消息处理器"
  },
  "api/GameFrameX.NetWork.Message.BaseMessageEncoderHandler.html": {
    "href": "api/GameFrameX.NetWork.Message.BaseMessageEncoderHandler.html",
    "title": "Class BaseMessageEncoderHandler | GameFrameX.Server",
    "keywords": "Class BaseMessageEncoderHandler Namespace GameFrameX.NetWork.Message Assembly GameFrameX.NetWork.Message.dll 基础消息编码处理器 public abstract class BaseMessageEncoderHandler : IMessageEncoderHandler, IPackageEncoder<IMessage> Inheritance object BaseMessageEncoderHandler Implements IMessageEncoderHandler IPackageEncoder<IMessage> Derived ClientMessageEncoderHandler DefaultMessageEncoderHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties CompressHandler 压缩消息处理器 protected IMessageCompressHandler CompressHandler { get; } Property Value IMessageCompressHandler LimitCompressLength 超过多少字节长度才启用压缩,默认512 public virtual uint LimitCompressLength { get; } Property Value uint PackageHeaderLength totalLength + headerLength public virtual ushort PackageHeaderLength { get; } Property Value ushort Methods BytesCompressHandler(ref byte[], ref byte) 消息压缩处理 protected void BytesCompressHandler(ref byte[] bytes, ref byte zipFlag) Parameters bytes byte[] 压缩前的数据 zipFlag byte 压缩标记 Encode(IBufferWriter<byte>, IMessage) public int Encode(IBufferWriter<byte> writer, IMessage pack) Parameters writer IBufferWriter<byte> pack IMessage Returns int Handler(IInnerNetworkMessage) 内部消息 public byte[] Handler(IInnerNetworkMessage message) Parameters message IInnerNetworkMessage Returns byte[] Handler(IMessage) 和客户端之间的消息 数据长度(2)+消息唯一ID(4)+消息ID(4)+消息内容 public abstract byte[] Handler(IMessage message) Parameters message IMessage Returns byte[] InnerBufferHandler(byte[], ref byte[]) 内部消息结构写入 结构为 totalLength(uint) + headerLength(ushort) + header 数组 + body 数组 protected byte[] InnerBufferHandler(byte[] messageBodyData, ref byte[] messageHeaderData) Parameters messageBodyData byte[] 内容数组 messageHeaderData byte[] 消息头数组 Returns byte[] SetCompressionHandler(IMessageCompressHandler) 设置压缩消息处理器 public void SetCompressionHandler(IMessageCompressHandler compressHandler = null) Parameters compressHandler IMessageCompressHandler 压缩消息处理器"
  },
  "api/GameFrameX.NetWork.Message.ClientMessageDecoderHandler.html": {
    "href": "api/GameFrameX.NetWork.Message.ClientMessageDecoderHandler.html",
    "title": "Class ClientMessageDecoderHandler | GameFrameX.Server",
    "keywords": "Class ClientMessageDecoderHandler Namespace GameFrameX.NetWork.Message Assembly GameFrameX.NetWork.Message.dll 对外部客户端的消息解码处理器 public sealed class ClientMessageDecoderHandler : DefaultMessageDecoderHandler, IMessageDecoderHandler, IPackageDecoder<IMessage> Inheritance object BaseMessageDecoderHandler DefaultMessageDecoderHandler ClientMessageDecoderHandler Implements IMessageDecoderHandler IPackageDecoder<IMessage> Inherited Members BaseMessageDecoderHandler.Handler(byte[]) BaseMessageDecoderHandler.SetDecompressionHandler(IMessageDecompressHandler) BaseMessageDecoderHandler.Decode(ref ReadOnlySequence<byte>, object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties PackageHeaderLength 消息头长度 public override int PackageHeaderLength { get; } Property Value int Methods Handler(ref ReadOnlySequence<byte>) 消息解码 public override IMessage Handler(ref ReadOnlySequence<byte> sequence) Parameters sequence ReadOnlySequence<byte> Returns IMessage"
  },
  "api/GameFrameX.NetWork.Message.ClientMessageEncoderHandler.html": {
    "href": "api/GameFrameX.NetWork.Message.ClientMessageEncoderHandler.html",
    "title": "Class ClientMessageEncoderHandler | GameFrameX.Server",
    "keywords": "Class ClientMessageEncoderHandler Namespace GameFrameX.NetWork.Message Assembly GameFrameX.NetWork.Message.dll 基础消息编码处理器 public sealed class ClientMessageEncoderHandler : BaseMessageEncoderHandler, IMessageEncoderHandler, IPackageEncoder<IMessage> Inheritance object BaseMessageEncoderHandler ClientMessageEncoderHandler Implements IMessageEncoderHandler IPackageEncoder<IMessage> Inherited Members BaseMessageEncoderHandler.LimitCompressLength BaseMessageEncoderHandler.Handler(IInnerNetworkMessage) BaseMessageEncoderHandler.SetCompressionHandler(IMessageCompressHandler) BaseMessageEncoderHandler.Encode(IBufferWriter<byte>, IMessage) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties PackageHeaderLength totalLength + operationType + zipFlag + uniqueId + messageId public override ushort PackageHeaderLength { get; } Property Value ushort Methods Handler(IMessage) 和客户端之间的消息 数据长度(2)+消息唯一ID(4)+消息ID(4)+消息内容 public override byte[] Handler(IMessage message) Parameters message IMessage Returns byte[]"
  },
  "api/GameFrameX.NetWork.Message.DefaultMessageCompressHandler.html": {
    "href": "api/GameFrameX.NetWork.Message.DefaultMessageCompressHandler.html",
    "title": "Class DefaultMessageCompressHandler | GameFrameX.Server",
    "keywords": "Class DefaultMessageCompressHandler Namespace GameFrameX.NetWork.Message Assembly GameFrameX.NetWork.Message.dll 默认消息压缩器 public sealed class DefaultMessageCompressHandler : IMessageCompressHandler Inheritance object DefaultMessageCompressHandler Implements IMessageCompressHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods Handler(byte[]) 压缩处理 public byte[] Handler(byte[] message) Parameters message byte[] 消息未压缩内容 Returns byte[]"
  },
  "api/GameFrameX.NetWork.Message.DefaultMessageDecoderHandler.html": {
    "href": "api/GameFrameX.NetWork.Message.DefaultMessageDecoderHandler.html",
    "title": "Class DefaultMessageDecoderHandler | GameFrameX.Server",
    "keywords": "Class DefaultMessageDecoderHandler Namespace GameFrameX.NetWork.Message Assembly GameFrameX.NetWork.Message.dll 基础消息解码处理器 public class DefaultMessageDecoderHandler : BaseMessageDecoderHandler, IMessageDecoderHandler, IPackageDecoder<IMessage> Inheritance object BaseMessageDecoderHandler DefaultMessageDecoderHandler Implements IMessageDecoderHandler IPackageDecoder<IMessage> Derived ClientMessageDecoderHandler Inherited Members BaseMessageDecoderHandler.DecompressHandler BaseMessageDecoderHandler.PackageHeaderLength BaseMessageDecoderHandler.Handler(byte[]) BaseMessageDecoderHandler.SetDecompressionHandler(IMessageDecompressHandler) BaseMessageDecoderHandler.Decode(ref ReadOnlySequence<byte>, object) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods Handler(ref ReadOnlySequence<byte>) 消息解码 public override IMessage Handler(ref ReadOnlySequence<byte> sequence) Parameters sequence ReadOnlySequence<byte> Returns IMessage"
  },
  "api/GameFrameX.NetWork.Message.DefaultMessageDecompressHandler.html": {
    "href": "api/GameFrameX.NetWork.Message.DefaultMessageDecompressHandler.html",
    "title": "Class DefaultMessageDecompressHandler | GameFrameX.Server",
    "keywords": "Class DefaultMessageDecompressHandler Namespace GameFrameX.NetWork.Message Assembly GameFrameX.NetWork.Message.dll 默认消息解压器 public sealed class DefaultMessageDecompressHandler : IMessageDecompressHandler Inheritance object DefaultMessageDecompressHandler Implements IMessageDecompressHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods Handler(byte[]) 解压处理 public byte[] Handler(byte[] message) Parameters message byte[] 消息压缩内容 Returns byte[]"
  },
  "api/GameFrameX.NetWork.Message.DefaultMessageEncoderHandler.html": {
    "href": "api/GameFrameX.NetWork.Message.DefaultMessageEncoderHandler.html",
    "title": "Class DefaultMessageEncoderHandler | GameFrameX.Server",
    "keywords": "Class DefaultMessageEncoderHandler Namespace GameFrameX.NetWork.Message Assembly GameFrameX.NetWork.Message.dll 基础消息编码处理器 public sealed class DefaultMessageEncoderHandler : BaseMessageEncoderHandler, IMessageEncoderHandler, IPackageEncoder<IMessage> Inheritance object BaseMessageEncoderHandler DefaultMessageEncoderHandler Implements IMessageEncoderHandler IPackageEncoder<IMessage> Inherited Members BaseMessageEncoderHandler.LimitCompressLength BaseMessageEncoderHandler.PackageHeaderLength BaseMessageEncoderHandler.Handler(IInnerNetworkMessage) BaseMessageEncoderHandler.SetCompressionHandler(IMessageCompressHandler) BaseMessageEncoderHandler.Encode(IBufferWriter<byte>, IMessage) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors DefaultMessageEncoderHandler() 默认消息编码处理器 public DefaultMessageEncoderHandler() Methods Handler(IMessage) 和客户端之间的消息 数据长度(2)+消息唯一ID(4)+消息ID(4)+消息内容 public override byte[] Handler(IMessage message) Parameters message IMessage Returns byte[]"
  },
  "api/GameFrameX.NetWork.Message.MessageObjectPipelineFilter.html": {
    "href": "api/GameFrameX.NetWork.Message.MessageObjectPipelineFilter.html",
    "title": "Class MessageObjectPipelineFilter | GameFrameX.Server",
    "keywords": "Class MessageObjectPipelineFilter Namespace GameFrameX.NetWork.Message Assembly GameFrameX.NetWork.Message.dll 消息对象流水线过滤处理器 public sealed class MessageObjectPipelineFilter : PipelineFilterBase<IMessage>, IPipelineFilter<IMessage>, IPipelineFilter Inheritance object PipelineFilterBase<IMessage> MessageObjectPipelineFilter Implements IPipelineFilter<IMessage> IPipelineFilter Inherited Members PipelineFilterBase<IMessage>.Reset() PipelineFilterBase<IMessage>.NextFilter PipelineFilterBase<IMessage>.Decoder PipelineFilterBase<IMessage>.Context object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods Filter(ref SequenceReader<byte>) 解析函数 public override IMessage Filter(ref SequenceReader<byte> reader) Parameters reader SequenceReader<byte> Returns IMessage"
  },
  "api/GameFrameX.NetWork.Message.html": {
    "href": "api/GameFrameX.NetWork.Message.html",
    "title": "Namespace GameFrameX.NetWork.Message | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.NetWork.Message Classes BaseMessageDecoderHandler 基础消息解码处理器 BaseMessageEncoderHandler 基础消息编码处理器 ClientMessageDecoderHandler 对外部客户端的消息解码处理器 ClientMessageEncoderHandler 基础消息编码处理器 DefaultMessageCompressHandler 默认消息压缩器 DefaultMessageDecoderHandler 基础消息解码处理器 DefaultMessageDecompressHandler 默认消息解压器 DefaultMessageEncoderHandler 基础消息编码处理器 MessageObjectPipelineFilter 消息对象流水线过滤处理器"
  },
  "api/GameFrameX.NetWork.Messages.CommandInfo.html": {
    "href": "api/GameFrameX.NetWork.Messages.CommandInfo.html",
    "title": "Class CommandInfo | GameFrameX.Server",
    "keywords": "Class CommandInfo Namespace GameFrameX.NetWork.Messages Assembly GameFrameX.NetWork.dll 指令信息 public sealed class CommandInfo : ICommandInfo Inheritance object CommandInfo Implements ICommandInfo Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors CommandInfo(int) 创建指令对象 public CommandInfo(int messageId) Parameters messageId int CommandInfo(int, int) 创建指令对象 public CommandInfo(int mainId, int subId) Parameters mainId int subId int Properties MainId 主消息ID public int MainId { get; } Property Value int MessageId 合并后的消息ID public int MessageId { get; } Property Value int SubId 次消息ID public int SubId { get; } Property Value int Methods Create(int) 创建指令对象 public static CommandInfo Create(int messageId) Parameters messageId int Returns CommandInfo Create(int, int) 创建指令对象 public static CommandInfo Create(int mainId, int subId) Parameters mainId int subId int Returns CommandInfo"
  },
  "api/GameFrameX.NetWork.Messages.InnerMessageObjectHeader.html": {
    "href": "api/GameFrameX.NetWork.Messages.InnerMessageObjectHeader.html",
    "title": "Class InnerMessageObjectHeader | GameFrameX.Server",
    "keywords": "Class InnerMessageObjectHeader Namespace GameFrameX.NetWork.Messages Assembly GameFrameX.NetWork.dll 内部消息对象头 public sealed class InnerMessageObjectHeader : MessageObjectHeader, INetworkMessageHeader Inheritance object MessageObjectHeader InnerMessageObjectHeader Implements INetworkMessageHeader Inherited Members MessageObjectHeader.MessageId MessageObjectHeader.OperationType MessageObjectHeader.ZipFlag MessageObjectHeader.UniqueId object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties ServerId 服务器ID [ProtoMember(5)] public int ServerId { get; set; } Property Value int"
  },
  "api/GameFrameX.NetWork.Messages.MessageObject.html": {
    "href": "api/GameFrameX.NetWork.Messages.MessageObject.html",
    "title": "Class MessageObject | GameFrameX.Server",
    "keywords": "Class MessageObject Namespace GameFrameX.NetWork.Messages Assembly GameFrameX.NetWork.dll 消息对象 public abstract class MessageObject : INetworkMessage, IMessage Inheritance object MessageObject Implements INetworkMessage IMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors MessageObject() protected MessageObject() Properties MessageId 消息ID [JsonIgnore] public int MessageId { get; } Property Value int OperationType 消息业务类型 [JsonIgnore] public MessageOperationType OperationType { get; } Property Value MessageOperationType UniqueId 消息的唯一ID [JsonIgnore] public int UniqueId { get; set; } Property Value int Methods SetMessageId(int) 设置消息ID public void SetMessageId(int messageId) Parameters messageId int SetOperationType(MessageOperationType) 设置消息业务类型 public void SetOperationType(MessageOperationType messageOperationType) Parameters messageOperationType MessageOperationType 消息业务类型 SetUniqueId(int) 设置唯一消息ID public void SetUniqueId(int uniqueId) Parameters uniqueId int ToFormatMessageString() 获取格式化后的消息字符串 public string ToFormatMessageString() Returns string ToJsonString() 获取JSON格式化后的消息字符串 public string ToJsonString() Returns string ToString() 转换为字符串 public override string ToString() Returns string UpdateUniqueId() 更新唯一消息ID public void UpdateUniqueId()"
  },
  "api/GameFrameX.NetWork.Messages.MessageObjectHeader.html": {
    "href": "api/GameFrameX.NetWork.Messages.MessageObjectHeader.html",
    "title": "Class MessageObjectHeader | GameFrameX.Server",
    "keywords": "Class MessageObjectHeader Namespace GameFrameX.NetWork.Messages Assembly GameFrameX.NetWork.dll 消息对象头 public class MessageObjectHeader : INetworkMessageHeader Inheritance object MessageObjectHeader Implements INetworkMessageHeader Derived InnerMessageObjectHeader Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties MessageId 消息ID [ProtoMember(1)] public int MessageId { get; set; } Property Value int OperationType 操作类型 [ProtoMember(2)] public MessageOperationType OperationType { get; set; } Property Value MessageOperationType UniqueId 唯一消息序列ID [ProtoMember(4)] public int UniqueId { get; set; } Property Value int ZipFlag 压缩标记 [ProtoMember(3)] public byte ZipFlag { get; set; } Property Value byte"
  },
  "api/GameFrameX.NetWork.Messages.html": {
    "href": "api/GameFrameX.NetWork.Messages.html",
    "title": "Namespace GameFrameX.NetWork.Messages | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.NetWork.Messages Classes CommandInfo 指令信息 InnerMessageObjectHeader 内部消息对象头 MessageObject 消息对象 MessageObjectHeader 消息对象头"
  },
  "api/GameFrameX.NetWork.OuterNetworkMessage.html": {
    "href": "api/GameFrameX.NetWork.OuterNetworkMessage.html",
    "title": "Class OuterNetworkMessage | GameFrameX.Server",
    "keywords": "Class OuterNetworkMessage Namespace GameFrameX.NetWork Assembly GameFrameX.NetWork.dll 外部消息 public sealed class OuterNetworkMessage : IOuterNetworkMessage, IMessage Inheritance object OuterNetworkMessage Implements IOuterNetworkMessage IMessage Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties Header 消息头对象 public INetworkMessageHeader Header { get; } Property Value INetworkMessageHeader MessageData 消息数据 public byte[] MessageData { get; } Property Value byte[] MessageType 消息类型 [JsonIgnore] public Type MessageType { get; } Property Value Type UniqueId 消息唯一ID public string UniqueId { get; } Property Value string Methods ClearData() 清除自定义数据 public void ClearData() Create(INetworkMessage, INetworkMessageHeader) 创建内部消息 public static IOuterNetworkMessage Create(INetworkMessage message, INetworkMessageHeader messageObjectHeader) Parameters message INetworkMessage messageObjectHeader INetworkMessageHeader Returns IOuterNetworkMessage Create(INetworkMessageHeader, byte[], Type) 创建内部消息 public static OuterNetworkMessage Create(INetworkMessageHeader messageObjectHeader, byte[] messageData, Type messageType) Parameters messageObjectHeader INetworkMessageHeader 消息头 messageData byte[] 消息体 messageType Type 消息体的类型 Returns OuterNetworkMessage DeserializeMessageObject() 转换消息数据为消息对象 public INetworkMessage DeserializeMessageObject() Returns INetworkMessage GetData() 获取自定义数据 public Dictionary<string, object> GetData() Returns Dictionary<string, object> GetData(string) 获取自定义数据 public object GetData(string key) Parameters key string Returns object RemoveData(string) 删除自定义数据 public bool RemoveData(string key) Parameters key string Returns bool SetData(string, object) 设置自定义数据 public void SetData(string key, object value) Parameters key string value object SetMessageData(byte[]) 设置消息数据 public void SetMessageData(byte[] messageData) Parameters messageData byte[] SetMessageHeader(INetworkMessageHeader) 设置消息头 public void SetMessageHeader(INetworkMessageHeader header) Parameters header INetworkMessageHeader SetMessageType(Type) 设置消息类型 public void SetMessageType(Type messageType) Parameters messageType Type SetUniqueId(string) 设置唯一消息ID public void SetUniqueId(string uniqueId) Parameters uniqueId string ToFormatMessageString() 获取格式化后的消息字符串 public string ToFormatMessageString() Returns string"
  },
  "api/GameFrameX.NetWork.RpcData.html": {
    "href": "api/GameFrameX.NetWork.RpcData.html",
    "title": "Class RpcData | GameFrameX.Server",
    "keywords": "Class RpcData Namespace GameFrameX.NetWork Assembly GameFrameX.NetWork.dll RPC 数据 public sealed class RpcData : IDisposable Inheritance object RpcData Implements IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties CreatedTime 创建时间 public long CreatedTime { get; } Property Value long IsReply 是否需要回复 public bool IsReply { get; } Property Value bool RequestMessage 请求消息 public IRequestMessage RequestMessage { get; } Property Value IRequestMessage ResponseMessage 响应消息 public IResponseMessage ResponseMessage { get; } Property Value IResponseMessage Task RPC 回复任务 public Task<IRpcResult> Task { get; } Property Value Task<IRpcResult> Time RPC 耗时时间.单位毫秒 从创建到回复的时间差 public long Time { get; } Property Value long Timeout 超时时间。单位毫秒 public int Timeout { get; } Property Value int UniqueId 消息的唯一ID 从RequestMessage中获得 public long UniqueId { get; } Property Value long Methods Create(IRequestMessage, bool, int) 创建 public static RpcData Create(IRequestMessage requestMessage, bool isReply = true, int timeout = 10000) Parameters requestMessage IRequestMessage 请求消息 isReply bool 是否需要回复 timeout int 超时时间,单位毫秒 Returns RpcData Dispose() public void Dispose() ~RpcData() 析构函数 protected ~RpcData() Reply(IResponseMessage) RPC 回复 public void Reply(IResponseMessage responseMessage) Parameters responseMessage IResponseMessage"
  },
  "api/GameFrameX.NetWork.RpcResult.html": {
    "href": "api/GameFrameX.NetWork.RpcResult.html",
    "title": "Class RpcResult | GameFrameX.Server",
    "keywords": "Class RpcResult Namespace GameFrameX.NetWork Assembly GameFrameX.NetWork.dll RPC请求结果 public sealed class RpcResult : IRpcResult, IDisposable Inheritance object RpcResult Implements IRpcResult IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties Error 错误信息 public string Error { get; } Property Value string IsSuccess 是否成功 public bool IsSuccess { get; } Property Value bool Message 返回消息 public IResponseMessage Message { get; } Property Value IResponseMessage Methods Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() ~RpcResult() 析构函数 protected ~RpcResult()"
  },
  "api/GameFrameX.NetWork.RpcSession.html": {
    "href": "api/GameFrameX.NetWork.RpcSession.html",
    "title": "Class RpcSession | GameFrameX.Server",
    "keywords": "Class RpcSession Namespace GameFrameX.NetWork Assembly GameFrameX.NetWork.dll RPC会话 public sealed class RpcSession : IRpcSession, IDisposable Inheritance object RpcSession Implements IRpcSession IDisposable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods Call(IRequestMessage, int) 异步调用,且等待返回 public Task<IRpcResult> Call(IRequestMessage message, int timeOutMillisecond = 10000) Parameters message IRequestMessage 调用消息对象 timeOutMillisecond int 调用超时,单位毫秒,默认10秒 Returns Task<IRpcResult> 返回消息对象 Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() ~RpcSession() 析构函数 protected ~RpcSession() Handler() 处理消息队列 public RpcData Handler() Returns RpcData Reply(IResponseMessage) 回复 public bool Reply(IResponseMessage message) Parameters message IResponseMessage Returns bool Send(IRequestMessage) 异步发送,不等待结果 public void Send(IRequestMessage message) Parameters message IRequestMessage 调用消息对象 Stop() 停止 public void Stop() Tick(int) 计时器 public void Tick(int elapseMillisecondsTime) Parameters elapseMillisecondsTime int 流逝时间,单位毫秒 TryPeek() 处理消息队列 public RpcData TryPeek() Returns RpcData"
  },
  "api/GameFrameX.NetWork.html": {
    "href": "api/GameFrameX.NetWork.html",
    "title": "Namespace GameFrameX.NetWork | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.NetWork Classes BaseNetWorkChannel 基础网络通道 DefaultNetWorkChannel 默认网络通道 InnerNetworkMessage 内部消息 OuterNetworkMessage 外部消息 RpcData RPC 数据 RpcResult RPC请求结果 RpcSession RPC会话 Interfaces IMessageHandler 消息处理器"
  },
  "api/GameFrameX.StartUp.Abstractions.IAppStartUp.html": {
    "href": "api/GameFrameX.StartUp.Abstractions.IAppStartUp.html",
    "title": "Interface IAppStartUp | GameFrameX.Server",
    "keywords": "Interface IAppStartUp Namespace GameFrameX.StartUp.Abstractions Assembly GameFrameX.StartUp.dll 程序启动器基类接口定义 public interface IAppStartUp Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties AppExitToken 应用退出 Task<string> AppExitToken { get; } Property Value Task<string> ServerType 服务器类型 ServerType ServerType { get; } Property Value ServerType Setting 配置信息 AppSetting Setting { get; } Property Value AppSetting Methods Init(ServerType, AppSetting, string[]) 初始化 bool Init(ServerType serverType, AppSetting setting, string[] args) Parameters serverType ServerType 服务器类型 setting AppSetting 启动设置 args string[] 启动参数 Returns bool StartAsync() 启动 Task StartAsync() Returns Task StopAsync(string) 终止服务器 Task StopAsync(string message = \"\") Parameters message string 终止原因 Returns Task"
  },
  "api/GameFrameX.StartUp.Abstractions.IFetalExceptionExitHandler.html": {
    "href": "api/GameFrameX.StartUp.Abstractions.IFetalExceptionExitHandler.html",
    "title": "Interface IFetalExceptionExitHandler | GameFrameX.Server",
    "keywords": "Interface IFetalExceptionExitHandler Namespace GameFrameX.StartUp.Abstractions Assembly GameFrameX.StartUp.dll 程序异常退出的执行器 public interface IFetalExceptionExitHandler Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods Run(string, AppSetting, string) 执行 void Run(string tag, AppSetting setting, string message) Parameters tag string 标签 setting AppSetting 服务器设置 message string 退出原因"
  },
  "api/GameFrameX.StartUp.Abstractions.html": {
    "href": "api/GameFrameX.StartUp.Abstractions.html",
    "title": "Namespace GameFrameX.StartUp.Abstractions | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.StartUp.Abstractions Interfaces IAppStartUp 程序启动器基类接口定义 IFetalExceptionExitHandler 程序异常退出的执行器"
  },
  "api/GameFrameX.StartUp.AppStartUpBase.html": {
    "href": "api/GameFrameX.StartUp.AppStartUpBase.html",
    "title": "Class AppStartUpBase | GameFrameX.Server",
    "keywords": "Class AppStartUpBase Namespace GameFrameX.StartUp Assembly GameFrameX.StartUp.dll 程序启动器基类 public abstract class AppStartUpBase : IAppStartUp Inheritance object AppStartUpBase Implements IAppStartUp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Fields AppExitSource 应用退出 protected readonly TaskCompletionSource<string> AppExitSource Field Value TaskCompletionSource<string> Properties AppExitToken 应用退出 public Task<string> AppExitToken { get; } Property Value Task<string> ListenOptions 监听配置 当InnerIp为空时.将使用Any 当InnerPort小于1000时.将抛出异常 外部不要修改任何值 public ListenOptions ListenOptions { get; protected set; } Property Value ListenOptions MessageDecoderHandler 消息解码处理器 protected IMessageDecoderHandler MessageDecoderHandler { get; } Property Value IMessageDecoderHandler MessageEncoderHandler 消息编码处理器 protected IMessageEncoderHandler MessageEncoderHandler { get; } Property Value IMessageEncoderHandler ServerType 服务器类型 public ServerType ServerType { get; } Property Value ServerType Setting 配置信息 public AppSetting Setting { get; protected set; } Property Value AppSetting Methods ConfigureSuperSocket(ServerOptions) 配置启动,当InnerIP为空时.将使用Any protected virtual void ConfigureSuperSocket(ServerOptions options) Parameters options ServerOptions Init() 初始化 protected virtual void Init() Init(ServerType, AppSetting, string[]) 初始化 public bool Init(ServerType serverType, AppSetting setting, string[] args = null) Parameters serverType ServerType 服务器类型 setting AppSetting 配置信息对象 args string[] 参数 Returns bool OnConnected(IAppSession) 有连接连上的时候触发 protected virtual ValueTask OnConnected(IAppSession appSession) Parameters appSession IAppSession Returns ValueTask OnDisconnected(IAppSession, CloseEventArgs) 断开连接 protected virtual ValueTask OnDisconnected(IAppSession appSession, CloseEventArgs disconnectEventArgs) Parameters appSession IAppSession disconnectEventArgs CloseEventArgs Returns ValueTask PackageErrorHandler(IAppSession, PackageHandlingException<IMessage>) 消息处理异常 protected virtual ValueTask<bool> PackageErrorHandler(IAppSession appSession, PackageHandlingException<IMessage> exception) Parameters appSession IAppSession exception PackageHandlingException<IMessage> Returns ValueTask<bool> PackageHandler(IAppSession, IMessage) 有消息包收到的时候触发 protected virtual ValueTask PackageHandler(IAppSession session, IMessage message) Parameters session IAppSession message IMessage Returns ValueTask StartAsync() 启动 public abstract Task StartAsync() Returns Task StartServerAsync<TMessageDecoderHandler, TMessageEncoderHandler>(IMessageCompressHandler, IMessageDecompressHandler) 启动服务器 protected Task StartServerAsync<TMessageDecoderHandler, TMessageEncoderHandler>(IMessageCompressHandler messageCompressHandler = null, IMessageDecompressHandler messageDecompressHandler = null) where TMessageDecoderHandler : class, IMessageDecoderHandler, IPackageDecoder<IMessage>, new() where TMessageEncoderHandler : class, IMessageEncoderHandler, IPackageEncoder<IMessage>, new() Parameters messageCompressHandler IMessageCompressHandler 消息编码的时候使用的压缩处理器，如果为空则不处理压缩消息 messageDecompressHandler IMessageDecompressHandler 消息解码的时候使用的解压处理器,如果为空则不处理压缩消息 Returns Task Type Parameters TMessageDecoderHandler 消息解码处理器类型 TMessageEncoderHandler 消息编码处理器类型 StartWebSocketServer() 启动WebSocket protected Task StartWebSocketServer() Returns Task StopAsync(string) 终止服务器 public virtual Task StopAsync(string message = \"\") Parameters message string 终止原因 Returns Task StopServer() 停止服务器 protected void StopServer()"
  },
  "api/GameFrameX.StartUp.GameApp.html": {
    "href": "api/GameFrameX.StartUp.GameApp.html",
    "title": "Class GameApp | GameFrameX.Server",
    "keywords": "Class GameApp Namespace GameFrameX.StartUp Assembly GameFrameX.StartUp.dll 程序入口类 public static class GameApp Inheritance object GameApp Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Entry(string[], Action, Action<LogOptions>) 启动入口函数 public static Task Entry(string[] args, Action initAction, Action<LogOptions> logConfiguration = null) Parameters args string[] 启动参数 initAction Action 在启动服务器之前执行,需要外部初始化协议注册 logConfiguration Action<LogOptions> 初始化日志系统之前回调,可以重写参数 Returns Task"
  },
  "api/GameFrameX.StartUp.Options.LauncherOptions.html": {
    "href": "api/GameFrameX.StartUp.Options.LauncherOptions.html",
    "title": "Class LauncherOptions | GameFrameX.Server",
    "keywords": "Class LauncherOptions Namespace GameFrameX.StartUp.Options Assembly GameFrameX.StartUp.dll 启动参数 public sealed class LauncherOptions Inheritance object LauncherOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties APMPort APM监控端口 [Option(\"APMPort\", HelpText = \"APM监控端口\")] public int APMPort { get; set; } Property Value int DBIp 数据库服务连接地址 [Option(\"DBIp\", HelpText = \"数据库服务连接地址\")] public string DBIp { get; set; } Property Value string DBPort 数据库服务连接端口 [Option(\"DBPort\", HelpText = \"数据库服务连接端口\")] public ushort DBPort { get; set; } Property Value ushort DataBaseName 数据库名称 [Option(\"DataBaseName\", HelpText = \"数据库名称\")] public string DataBaseName { get; set; } Property Value string DataBaseUrl 数据库 地址 [Option(\"DataBaseUrl\", HelpText = \"数据库 地址\")] public string DataBaseUrl { get; set; } Property Value string DataCenter 数据中心 public string DataCenter { get; set; } Property Value string DiscoveryCenterIp 发现中心地址 [Option(\"DiscoveryCenterIp\", HelpText = \"发现中心地址\")] public string DiscoveryCenterIp { get; set; } Property Value string DiscoveryCenterPort 发现中心端口 [Option(\"DiscoveryCenterPort\", HelpText = \"发现中心端口\")] public ushort DiscoveryCenterPort { get; set; } Property Value ushort HttpCode HTTP 响应码 [Option(\"HttpCode\", HelpText = \"HTTP 响应码\")] public string HttpCode { get; set; } Property Value string HttpPort HTTP 端口 [Option(\"HttpPort\", HelpText = \"HTTP 端口\")] public int HttpPort { get; set; } Property Value int HttpUrl Http 地址 [Option(\"HttpUrl\", HelpText = \"Http 地址\")] public string HttpUrl { get; set; } Property Value string HttpsPort HTTPS 端口 [Option(\"HttpsPort\", HelpText = \"HTTPS 端口\")] public int HttpsPort { get; set; } Property Value int InnerIp 内部IP [Option(\"InnerIp\", Default = \"0.0.0.0\", HelpText = \"内部IP\")] public string InnerIp { get; set; } Property Value string InnerPort 内部端口 [Option(\"InnerPort\", HelpText = \"内部端口\")] public ushort InnerPort { get; set; } Property Value ushort IsDebug 是否是Debug 模式 [Option(\"IsDebug\", HelpText = \"是否是Debug 模式\")] public bool IsDebug { get; set; } Property Value bool IsDebugReceive 是否打印接收数据 [Option(\"IsDebugReceive\", HelpText = \"是否打印接收数据\")] public bool IsDebugReceive { get; set; } Property Value bool IsDebugSend 是否打印发送数据 [Option(\"IsDebugSend\", HelpText = \"是否打印发送数据\")] public bool IsDebugSend { get; set; } Property Value bool Language 语言 public string Language { get; set; } Property Value string MaxModuleId 游戏逻辑服务器的处理最大模块ID [Option(\"MaxModuleId\", HelpText = \"游戏逻辑服务器的处理最大模块ID\")] public short MaxModuleId { get; set; } Property Value short MinModuleId 游戏逻辑服务器的处理最小模块ID [Option(\"MinModuleId\", HelpText = \"游戏逻辑服务器的处理最小模块ID\")] public short MinModuleId { get; set; } Property Value short OuterIp 外部IP [Option(\"OuterIp\", Default = \"0.0.0.0\", HelpText = \"外部IP\")] public string OuterIp { get; set; } Property Value string OuterPort 外部端口 [Option(\"OuterPort\", HelpText = \"外部端口\")] public ushort OuterPort { get; set; } Property Value ushort SaveDataInterval 保存数据间隔 [Option(\"SaveDataInterval\", Default = 5000, HelpText = \"保存数据间隔，单位毫秒\")] public int SaveDataInterval { get; set; } Property Value int ServerId 服务器ID [Option(\"ServerId\", HelpText = \"服务器ID\")] public int ServerId { get; set; } Property Value int ServerType 服务器类型 [Option(\"ServerType\", Required = true, HelpText = \"服务器类型,当该值无效时，默认为后续所有参数无效\")] public string ServerType { get; set; } Property Value string TagName 标签名称 [Option(\"TagName\", HelpText = \"标签名称\")] public string TagName { get; set; } Property Value string WsPort WebSocket 端口 [Option(\"WsPort\", HelpText = \"WebSocket 端口\")] public int WsPort { get; set; } Property Value int WssCertFilePath Wss 使用的证书路径 [Option(\"WssCertFilePath\", HelpText = \"Wss 使用的证书路径\")] public string WssCertFilePath { get; set; } Property Value string WssPort WebSocket 加密端口 [Option(\"WssPort\", HelpText = \"WebSocket 加密端口\")] public int WssPort { get; set; } Property Value int Methods CheckAPMPort() 检查APM监控端口 public void CheckAPMPort() Exceptions ArgumentOutOfRangeException CheckDataBaseName() 检查DataBaseName public void CheckDataBaseName() Exceptions ArgumentNullException CheckDataBaseUrl() 检查DataBaseUrl public void CheckDataBaseUrl() Exceptions ArgumentNullException CheckDbIp() 检查DBIp public void CheckDbIp() Exceptions ArgumentNullException CheckDbPort() 检查数据库服务连接端口 public void CheckDbPort() Exceptions ArgumentOutOfRangeException CheckDiscoveryCenterIp() 检查DiscoveryCenterIp public void CheckDiscoveryCenterIp() Exceptions ArgumentNullException CheckDiscoveryCenterPort() 检查DiscoveryCenterPort public void CheckDiscoveryCenterPort() Exceptions ArgumentOutOfRangeException CheckHttpCode() 检查HttpCode public void CheckHttpCode() Exceptions ArgumentNullException CheckHttpPort() 检查HttpPort public void CheckHttpPort() Exceptions ArgumentOutOfRangeException CheckHttpUrl() 检查HttpUrl public void CheckHttpUrl() Exceptions ArgumentNullException CheckHttpsPort() 检查HttpsPort public void CheckHttpsPort() Exceptions ArgumentOutOfRangeException CheckInnerIp() 检查InnerIp public void CheckInnerIp() Exceptions ArgumentNullException CheckInnerPort() 检查内部端口 public void CheckInnerPort() Exceptions ArgumentOutOfRangeException CheckMaxModuleId() 检查MaxModuleId public void CheckMaxModuleId() Exceptions ArgumentOutOfRangeException CheckMinModuleId() 检查MinModuleId public void CheckMinModuleId() Exceptions ArgumentOutOfRangeException CheckOuterIp() 检查OuterIp public void CheckOuterIp() Exceptions ArgumentNullException CheckOuterPort() 检查外部端口 public void CheckOuterPort() Exceptions ArgumentOutOfRangeException CheckServerId() 检查ServerId public void CheckServerId() Exceptions ArgumentOutOfRangeException CheckWsPort() 检查WsPort public void CheckWsPort() Exceptions ArgumentOutOfRangeException CheckWssCertFilePath() 检查WssCertFilePath public void CheckWssCertFilePath() Exceptions ArgumentNullException CheckWssPort() 检查WssPort public void CheckWssPort() Exceptions ArgumentOutOfRangeException"
  },
  "api/GameFrameX.StartUp.Options.html": {
    "href": "api/GameFrameX.StartUp.Options.html",
    "title": "Namespace GameFrameX.StartUp.Options | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.StartUp.Options Classes LauncherOptions 启动参数"
  },
  "api/GameFrameX.StartUp.StartUpTagAttribute.html": {
    "href": "api/GameFrameX.StartUp.StartUpTagAttribute.html",
    "title": "Class StartUpTagAttribute | GameFrameX.Server",
    "keywords": "Class StartUpTagAttribute Namespace GameFrameX.StartUp Assembly GameFrameX.StartUp.dll 启动属性 [AttributeUsage(AttributeTargets.Class, AllowMultiple = true, Inherited = false)] public class StartUpTagAttribute : Attribute Inheritance object Attribute StartUpTagAttribute Inherited Members Attribute.Equals(object) Attribute.GetCustomAttribute(Assembly, Type) Attribute.GetCustomAttribute(Assembly, Type, bool) Attribute.GetCustomAttribute(MemberInfo, Type) Attribute.GetCustomAttribute(MemberInfo, Type, bool) Attribute.GetCustomAttribute(Module, Type) Attribute.GetCustomAttribute(Module, Type, bool) Attribute.GetCustomAttribute(ParameterInfo, Type) Attribute.GetCustomAttribute(ParameterInfo, Type, bool) Attribute.GetCustomAttributes(Assembly) Attribute.GetCustomAttributes(Assembly, bool) Attribute.GetCustomAttributes(Assembly, Type) Attribute.GetCustomAttributes(Assembly, Type, bool) Attribute.GetCustomAttributes(MemberInfo) Attribute.GetCustomAttributes(MemberInfo, bool) Attribute.GetCustomAttributes(MemberInfo, Type) Attribute.GetCustomAttributes(MemberInfo, Type, bool) Attribute.GetCustomAttributes(Module) Attribute.GetCustomAttributes(Module, bool) Attribute.GetCustomAttributes(Module, Type) Attribute.GetCustomAttributes(Module, Type, bool) Attribute.GetCustomAttributes(ParameterInfo) Attribute.GetCustomAttributes(ParameterInfo, bool) Attribute.GetCustomAttributes(ParameterInfo, Type) Attribute.GetCustomAttributes(ParameterInfo, Type, bool) Attribute.GetHashCode() Attribute.IsDefaultAttribute() Attribute.IsDefined(Assembly, Type) Attribute.IsDefined(Assembly, Type, bool) Attribute.IsDefined(MemberInfo, Type) Attribute.IsDefined(MemberInfo, Type, bool) Attribute.IsDefined(Module, Type) Attribute.IsDefined(Module, Type, bool) Attribute.IsDefined(ParameterInfo, Type) Attribute.IsDefined(ParameterInfo, Type, bool) Attribute.Match(object) Attribute.TypeId object.Equals(object, object) object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors StartUpTagAttribute(ServerType, int) 构建启动属性 public StartUpTagAttribute(ServerType serverType, int priority = 1000) Parameters serverType ServerType 服务器类型 priority int 优先级，默认为1000 Fields Priority 启动优先级。值越小优先级越高 public readonly int Priority Field Value int ServerType 服务器类型 public readonly ServerType ServerType Field Value ServerType"
  },
  "api/GameFrameX.StartUp.html": {
    "href": "api/GameFrameX.StartUp.html",
    "title": "Namespace GameFrameX.StartUp | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.StartUp Classes AppStartUpBase 程序启动器基类 GameApp 程序入口类 StartUpTagAttribute 启动属性"
  },
  "api/GameFrameX.Utility.AssemblyHelper.html": {
    "href": "api/GameFrameX.Utility.AssemblyHelper.html",
    "title": "Class AssemblyHelper | GameFrameX.Server",
    "keywords": "Class AssemblyHelper Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 程序集辅助器 public static class AssemblyHelper Inheritance object AssemblyHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetAssemblies() 获取已加载的程序集。 public static Assembly[] GetAssemblies() Returns Assembly[] 已加载的程序集数组。 GetRuntimeImplementTypeNames(Type) 获取已加载的程序集中的指定类型的子类列表。 public static List<Type> GetRuntimeImplementTypeNames(Type type) Parameters type Type 指定类型。 Returns List<Type> 指定类型的子类列表。 GetRuntimeImplementTypeNamesInstance<T>() 获取已加载的程序集中的指定类型的子类实例化列表。 public static List<T> GetRuntimeImplementTypeNamesInstance<T>() Returns List<T> 指定类型的子类实例化列表。 Type Parameters T 指定类型。 GetRuntimeImplementTypeNames<T>() 获取已加载的程序集中的指定类型的子类列表。 public static List<Type> GetRuntimeImplementTypeNames<T>() Returns List<Type> 指定类型的子类列表。 Type Parameters T 指定类型。 GetRuntimeImplementTypeNames<T, TAttribute>() 获取已加载的程序集中的指定类型的子类列表，并过滤出具有指定特性的类型。 public static List<Type> GetRuntimeImplementTypeNames<T, TAttribute>() where TAttribute : Attribute Returns List<Type> 指定类型的子类列表，且这些类型具有指定的特性。 Type Parameters T 指定类型。 TAttribute 指定自定义的特性标记。 GetRuntimeTypeNames(Type) 获取已加载的程序集中的指定类型的子类列表，并返回它们的全名。 public static List<string> GetRuntimeTypeNames(Type type) Parameters type Type 指定类型。 Returns List<string> 指定类型的子类列表的全名。 GetType(string) 获取已加载的程序集中的指定类型。 public static Type GetType(string typeName) Parameters typeName string 要获取的类型名。 Returns Type 已加载的程序集中的指定类型，如果未找到则返回 null。 GetTypes() 获取已加载的程序集中的所有类型。 public static Type[] GetTypes() Returns Type[] 已加载的程序集中的所有类型数组。 GetTypes(List<Type>) 获取已加载的程序集中的所有类型，并将结果添加到指定的列表中。 public static void GetTypes(List<Type> results) Parameters results List<Type> 用于存储结果的列表。"
  },
  "api/GameFrameX.Utility.BigInteger.html": {
    "href": "api/GameFrameX.Utility.BigInteger.html",
    "title": "Class BigInteger | GameFrameX.Server",
    "keywords": "Class BigInteger Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll public sealed class BigInteger Inheritance object BigInteger Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors BigInteger() public BigInteger() BigInteger(BigInteger) Constructor (Default value provided by BigInteger) public BigInteger(BigInteger bi) Parameters bi BigInteger BigInteger(byte[]) Constructor (Default value provided by an array of bytes) public BigInteger(byte[] inData) Parameters inData byte[] Exceptions ArithmeticException BigInteger(byte[], int) Constructor (Default value provided by an array of bytes of the specified length.) public BigInteger(byte[] inData, int inLen) Parameters inData byte[] inLen int Exceptions ArithmeticException BigInteger(long) public BigInteger(long value) Parameters value long Exceptions ArithmeticException BigInteger(string, int) Constructor (Default value provided by a string of digits of the specified base) Example (base 10) To initialize \"a\" with the default value of 1234 in base 10 BigInteger a = new BigInteger(\"1234\", 10) To initialize \"a\" with the default value of -1234 BigInteger a = new BigInteger(\"-1234\", 10) Example (base 16) To initialize \"a\" with the default value of 0x1D4F in base 16 BigInteger a = new BigInteger(\"1D4F\", 16) To initialize \"a\" with the default value of -0x1D4F BigInteger a = new BigInteger(\"-1D4F\", 16) Note that string values are specified in the format. public BigInteger(string value, int radix = 10) Parameters value string radix int Exceptions ArithmeticException BigInteger(uint[]) Constructor (Default value provided by an array of unsigned integers) public BigInteger(uint[] inData) Parameters inData uint[] Exceptions ArithmeticException BigInteger(ulong) public BigInteger(ulong value) Parameters value ulong Exceptions ArithmeticException Fields dataLength number of actual chars used public int dataLength Field Value int primesBelow2000 primes smaller than 2000 to test the generated prime number public static readonly int[] primesBelow2000 Field Value int[] Methods BitCount() bitCount public int BitCount() Returns int CompareTo(BigInteger) public int CompareTo(BigInteger other) Parameters other BigInteger Returns int Equals(object) public override bool Equals(object o) Parameters o object Returns bool FermatLittleTest(int) 概率素数测试 public bool FermatLittleTest(int confidence) Parameters confidence int Returns bool Gcd(BigInteger) Returns gcd(this, bi) public BigInteger Gcd(BigInteger bi) Parameters bi BigInteger Returns BigInteger GenCoPrime(int, Random) Generates a random number with the specified number of bits such that gcd(number, this) = 1 public BigInteger GenCoPrime(int bits, Random rand) Parameters bits int rand Random Returns BigInteger GenPseudoPrime(int, int, Random) Generates a positive BigInteger that is probably prime. public static BigInteger GenPseudoPrime(int bits, int confidence, Random rand) Parameters bits int confidence int rand Random Returns BigInteger GenRandomBits(int, Random) Populates \"this\" with the specified amount of random bits public void GenRandomBits(int bits, Random rand) Parameters bits int rand Random Exceptions ArithmeticException GetBytes() Returns the value of the BigInteger as a byte array. The lowest index contains the MSB. public byte[] GetBytes() Returns byte[] GetHashCode() Serves as the default hash function. public override int GetHashCode() Returns int A hash code for the current object. IntValue() Returns the lowest 4 bytes of the BigInteger as an int. public int IntValue() Returns int IsProbablePrime() Determines whether this BigInteger is probably prime using a public bool IsProbablePrime() Returns bool IsProbablePrime(int) Determines whether a number is probably prime, using the Rabin-Miller's public bool IsProbablePrime(int confidence) Parameters confidence int Returns bool Jacobi(BigInteger, BigInteger) Computes the Jacobi Symbol for a and b. Algorithm adapted from [3] and [4] with some optimizations public static int Jacobi(BigInteger a, BigInteger b) Parameters a BigInteger b BigInteger Returns int Exceptions ArgumentException LongValue() Returns the lowest 8 bytes of the BigInteger as a long. public long LongValue() Returns long LucasSequence(BigInteger, BigInteger, BigInteger, BigInteger) Returns the k_th number in the Lucas Sequence reduced modulo n public static BigInteger[] LucasSequence(BigInteger P, BigInteger Q, BigInteger k, BigInteger n) Parameters P BigInteger Q BigInteger k BigInteger n BigInteger Returns BigInteger[] LucasStrongTest() Implementation of the Lucas Strong Pseudo Prime test public bool LucasStrongTest() Returns bool ModInverse(BigInteger) Returns the modulo inverse of this. Throws ArithmeticException if the inverse does not exist. (i.e. gcd(this, modulus) != 1) public BigInteger ModInverse(BigInteger modulus) Parameters modulus BigInteger Returns BigInteger Exceptions ArithmeticException ModPow(BigInteger, BigInteger) Modulo Exponentiation public BigInteger ModPow(BigInteger exp, BigInteger n) Parameters exp BigInteger n BigInteger Returns BigInteger Exceptions ArithmeticException RabinMillerTest(int) RabinMillerTest public bool RabinMillerTest(int confidence) Parameters confidence int Returns bool SetBit(uint) Sets the value of the specified bit to 1 The Least Significant Bit position is 0. public void SetBit(uint bitNum) Parameters bitNum uint SolovayStrassenTest(int) Solovay-Strassen public bool SolovayStrassenTest(int confidence) Parameters confidence int Returns bool Sqrt() Returns a value that is equivalent to the integer square root public BigInteger Sqrt() Returns BigInteger ToHexString() public string ToHexString() Returns string ToString() Returns a string representing the BigInteger in base 10. public override string ToString() Returns string ToString(int) public string ToString(int radix) Parameters radix int Returns string Exceptions ArgumentException UnsetBit(uint) Sets the value of the specified bit to 0 The Least Significant Bit position is 0. public void UnsetBit(uint bitNum) Parameters bitNum uint abs() Returns the absolute value public BigInteger abs() Returns BigInteger max(BigInteger) Returns max(this, bi) public BigInteger max(BigInteger bi) Parameters bi BigInteger Returns BigInteger min(BigInteger) Returns min(this, bi) public BigInteger min(BigInteger bi) Parameters bi BigInteger Returns BigInteger Operators operator +(BigInteger, BigInteger) Overloading of addition operator public static BigInteger operator +(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger bi2 BigInteger Returns BigInteger Exceptions ArithmeticException operator &(BigInteger, BigInteger) Overloading of bitwise AND operator public static BigInteger operator &(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger bi2 BigInteger Returns BigInteger operator |(BigInteger, BigInteger) Overloading of bitwise OR operator public static BigInteger operator |(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger bi2 BigInteger Returns BigInteger operator --(BigInteger) Overloading of the unary -- operator public static BigInteger operator --(BigInteger bi1) Parameters bi1 BigInteger Returns BigInteger Exceptions ArithmeticException operator /(BigInteger, BigInteger) Overloading of division operator public static BigInteger operator /(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger bi2 BigInteger Returns BigInteger operator ==(BigInteger, BigInteger) Overloading of equality operator public static bool operator ==(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger bi2 BigInteger Returns bool operator ^(BigInteger, BigInteger) Overloading of bitwise XOR operator public static BigInteger operator ^(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger bi2 BigInteger Returns BigInteger operator >(BigInteger, BigInteger) Overloading of inequality operator public static bool operator >(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger bi2 BigInteger Returns bool operator >=(BigInteger, BigInteger) public static bool operator >=(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger bi2 BigInteger Returns bool implicit operator BigInteger(int) public static implicit operator BigInteger(int value) Parameters value int Returns BigInteger implicit operator BigInteger(long) Overloading of the typecast operator. For BigInteger bi = 10; public static implicit operator BigInteger(long value) Parameters value long Returns BigInteger implicit operator BigInteger(uint) public static implicit operator BigInteger(uint value) Parameters value uint Returns BigInteger implicit operator BigInteger(ulong) public static implicit operator BigInteger(ulong value) Parameters value ulong Returns BigInteger operator ++(BigInteger) Overloading of the unary ++ operator public static BigInteger operator ++(BigInteger bi1) Parameters bi1 BigInteger Returns BigInteger Exceptions ArithmeticException operator !=(BigInteger, BigInteger) public static bool operator !=(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger bi2 BigInteger Returns bool operator <<(BigInteger, int) public static BigInteger operator <<(BigInteger bi1, int shiftVal) Parameters bi1 BigInteger shiftVal int Returns BigInteger operator <(BigInteger, BigInteger) public static bool operator <(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger bi2 BigInteger Returns bool operator <=(BigInteger, BigInteger) public static bool operator <=(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger bi2 BigInteger Returns bool operator %(BigInteger, BigInteger) Overloading of modulus operator public static BigInteger operator %(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger bi2 BigInteger Returns BigInteger operator *(BigInteger, BigInteger) Overloading of multiplication operator public static BigInteger operator *(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger bi2 BigInteger Returns BigInteger Exceptions ArithmeticException operator ~(BigInteger) Overloading of the NOT operator (1's complement) public static BigInteger operator ~(BigInteger bi1) Parameters bi1 BigInteger Returns BigInteger operator >>(BigInteger, int) Overloading of unary >> operators public static BigInteger operator >>(BigInteger bi1, int shiftVal) Parameters bi1 BigInteger shiftVal int Returns BigInteger operator -(BigInteger, BigInteger) Overloading of subtraction operator public static BigInteger operator -(BigInteger bi1, BigInteger bi2) Parameters bi1 BigInteger bi2 BigInteger Returns BigInteger Exceptions ArithmeticException operator -(BigInteger) Overloading of the NEGATE operator (2's complement) public static BigInteger operator -(BigInteger bi1) Parameters bi1 BigInteger Returns BigInteger Exceptions ArithmeticException"
  },
  "api/GameFrameX.Utility.Compression.html": {
    "href": "api/GameFrameX.Utility.Compression.html",
    "title": "Class Compression | GameFrameX.Server",
    "keywords": "Class Compression Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 压缩解压缩辅助器。 public static class Compression Inheritance object Compression Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Compress(byte[]) 压缩数据。 public static byte[] Compress(byte[] bytes) Parameters bytes byte[] 要压缩的原始字节数组。 Returns byte[] 压缩后的字节数组。 Decompress(byte[]) 解压数据。 public static byte[] Decompress(byte[] bytes) Parameters bytes byte[] 要解压的压缩字节数组。 Returns byte[] 解压后的字节数组。"
  },
  "api/GameFrameX.Utility.ConsoleHelper.html": {
    "href": "api/GameFrameX.Utility.ConsoleHelper.html",
    "title": "Class ConsoleHelper | GameFrameX.Server",
    "keywords": "Class ConsoleHelper Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 控制台辅助器 public static class ConsoleHelper Inheritance object ConsoleHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ConsoleLogo() 打印控制台logo public static void ConsoleLogo()"
  },
  "api/GameFrameX.Utility.Extensions.AlreadyArgumentException.html": {
    "href": "api/GameFrameX.Utility.Extensions.AlreadyArgumentException.html",
    "title": "Class AlreadyArgumentException | GameFrameX.Server",
    "keywords": "Class AlreadyArgumentException Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll 已经存在参数重复异常 public sealed class AlreadyArgumentException : Exception, ISerializable Inheritance object Exception AlreadyArgumentException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite object.Equals(object) object.Equals(object, object) object.GetHashCode() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors AlreadyArgumentException(string) 已经存在参数重复 public AlreadyArgumentException(string message) Parameters message string 异常消息"
  },
  "api/GameFrameX.Utility.Extensions.BidirectionalDictionary-2.html": {
    "href": "api/GameFrameX.Utility.Extensions.BidirectionalDictionary-2.html",
    "title": "Class BidirectionalDictionary<TKey, TValue> | GameFrameX.Server",
    "keywords": "Class BidirectionalDictionary<TKey, TValue> Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll 双向字典，实现键和值的双向映射。 public class BidirectionalDictionary<TKey, TValue> Type Parameters TKey 键的类型。 TValue 值的类型。 Inheritance object BidirectionalDictionary<TKey, TValue> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors BidirectionalDictionary(int) 初始化 BidirectionalDictionary<TKey, TValue> 类的新实例。 public BidirectionalDictionary(int initialCapacity = 8) Parameters initialCapacity int Methods Clear() 清空双向字典中的所有键值对。 public void Clear() TryAdd(TKey, TValue) 尝试向双向字典中添加键值对。 public bool TryAdd(TKey key, TValue value) Parameters key TKey 要添加的键。 value TValue 要添加的值。 Returns bool 如果成功添加键值对，则为 true；否则为 false。 TryGetKey(TValue, out TKey) 尝试根据值获取对应的键。 public bool TryGetKey(TValue value, out TKey key) Parameters value TValue 要查找的值。 key TKey 查找到的键。 Returns bool 如果成功找到键，则为 true；否则为 false。 TryGetValue(TKey, out TValue) 尝试根据键获取对应的值。 public bool TryGetValue(TKey key, out TValue value) Parameters key TKey 要查找的键。 value TValue 查找到的值。 Returns bool 如果成功找到值，则为 true；否则为 false。"
  },
  "api/GameFrameX.Utility.Extensions.ByteExtension.html": {
    "href": "api/GameFrameX.Utility.Extensions.ByteExtension.html",
    "title": "Class ByteExtension | GameFrameX.Server",
    "keywords": "Class ByteExtension Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll 提供字节和字节数组的扩展方法，用于各种格式的转换和读写操作。 public static class ByteExtension Inheritance object ByteExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadBool(byte[], ref int) 从字节数组中以指定偏移量读取布尔值。 public static bool ReadBool(this byte[] buffer, ref int offset) Parameters buffer byte[] 要从中读取数据的字节数组。 offset int 读取数据的起始偏移量，此偏移量在读取后会自动增加。 Returns bool 读取的布尔值。 Exceptions Exception 当偏移量超过数组长度时，将抛出异常。 ReadByte(byte[], ref int) 从指定偏移量读取 byte 类型数据。 public static byte ReadByte(this byte[] buffer, ref int offset) Parameters buffer byte[] 要操作的字节缓冲区。 offset int 操作的起始偏移量，操作完成后，会自动累加字节的字节数。 Returns byte 返回从缓冲区读取的 byte 类型数据。 ReadBytes(byte[], int, int) 从指定偏移量开始读取指定长度的字节数组。 public static byte[] ReadBytes(this byte[] buffer, int offset, int len) Parameters buffer byte[] 要操作的字节缓冲区。 offset int 操作的起始偏移量。 len int 需要读取的字节数组长度。 Returns byte[] 返回从缓冲区读取的 byte[] 类型数据。 ReadBytes(byte[], ref int) 从指定偏移量开始读取指定长度的字节数组，长度作为 int 类型数据在字节数组的开头。 public static byte[] ReadBytes(this byte[] buffer, ref int offset) Parameters buffer byte[] 要操作的字节缓冲区。 offset int 操作的起始偏移量，操作完成后，会自动累加读取的字节长度以及 int 类型长度。 Returns byte[] 返回从缓冲区读取的 byte[] 类型数据。 ReadBytes(byte[], ref int, int) 从指定偏移量开始读取指定长度的字节数组。 public static byte[] ReadBytes(this byte[] buffer, ref int offset, int len) Parameters buffer byte[] 要操作的字节缓冲区。 offset int 操作的起始偏移量。 len int 需要读取的字节数组长度。 Returns byte[] 返回从缓冲区读取的 byte[] 类型数据。 ReadDouble(byte[], ref int) 从指定偏移量读取 double 类型数据。 public static double ReadDouble(this byte[] buffer, ref int offset) Parameters buffer byte[] 要操作的字节缓冲区。 offset int 操作的起始偏移量，操作完成后，会自动累加双精度浮点数的字节数。 Returns double 返回从缓冲区读取的 double 类型数据。 ReadFloat(byte[], ref int) 从给定的字节缓冲区中读取浮点数，并更新偏移量。 public static float ReadFloat(this byte[] buffer, ref int offset) Parameters buffer byte[] 包含了要读取数据的字节缓冲区。 offset int 读取数据的起始位置，该方法会更新该值。 Returns float 从字节缓冲区中读取的浮点数。 Exceptions Exception 当尝试读取的位置超出了缓冲区的边界时，会抛出此异常。 ReadInt(byte[], ref int) 从字节数组中读取32位有符号整数，并将偏移量向前移动。 public static int ReadInt(this byte[] buffer, ref int offset) Parameters buffer byte[] 要读取的字节数组。 offset int 引用偏移量。 Returns int 返回读取的32位有符号整数。 ReadLong(byte[], ref int) 从字节数组中读取64位有符号整数，并将偏移量向前移动。 public static long ReadLong(this byte[] buffer, ref int offset) Parameters buffer byte[] 要读取的字节数组。 offset int 引用偏移量。 Returns long 返回读取的64位有符号整数。 ReadSByte(byte[], ref int) 从字节数组中以指定偏移量读取有符号字节。 public static sbyte ReadSByte(this byte[] buffer, ref int offset) Parameters buffer byte[] 要从中读取数据的字节数组。 offset int 读取数据的起始偏移量，此偏移量在读取后会自动增加。 Returns sbyte 读取的有符号字节。 Exceptions Exception 当偏移量超过数组长度时，将抛出异常。 ReadShort(byte[], ref int) 从字节数组读取16位有符号整数，并将偏移量前移。 public static short ReadShort(this byte[] buffer, ref int offset) Parameters buffer byte[] 要读取的字节数组。 offset int 引用偏移量。 Returns short 返回读取的16位有符号整数。 ReadString(byte[], ref int) 从字节数组中以指定偏移量读取字符串。 public static string ReadString(this byte[] buffer, ref int offset) Parameters buffer byte[] 要从中读取数据的字节数组。 offset int 读取数据的起始偏移量，此偏移量在读取后会自动增加。 Returns string 读取的字符串，若读取长度小于等于0或偏移量超出数组长度，返回空字符串。 ReadUInt(byte[], ref int) 从字节数组中读取32位无符号整数，并将偏移量向前移动。 public static uint ReadUInt(this byte[] buffer, ref int offset) Parameters buffer byte[] 要读取的字节数组。 offset int 引用偏移量。 Returns uint 返回读取的32位无符号整数。 ReadULong(byte[], ref int) 从字节数组中读取64位无符号整数，并将偏移量向前移动。 public static ulong ReadULong(this byte[] buffer, ref int offset) Parameters buffer byte[] 要读取的字节数组。 offset int 引用偏移量。 Returns ulong 返回读取的64位无符号整数。 ReadUShort(byte[], ref int) 从字节数组中读取16位无符号整数，并将偏移量向前移动。 public static ushort ReadUShort(this byte[] buffer, ref int offset) Parameters buffer byte[] 要读取的字节数组。 offset int 引用偏移量。 Returns ushort 返回读取的16位无符号整数。 ToArrayString(byte[]) 将字节数组转换为字符串，每个字节之间用空格分隔。 public static string ToArrayString(this byte[] bytes) Parameters bytes byte[] 要转换的字节数组。 Returns string 字符串表示形式。 ToDefaultString(byte[]) 将字节数组转换为默认编码的字符串。 public static string ToDefaultString(this byte[] bytes) Parameters bytes byte[] 要转换的字节数组。 Returns string 字符串。 ToDefaultString(byte[], int, int) 将字节数组的指定范围转换为默认编码的字符串。 public static string ToDefaultString(this byte[] bytes, int index, int count) Parameters bytes byte[] 要转换的字节数组。 index int 起始偏移量。 count int 要转换的字节数。 Returns string 字符串。 ToHex(byte) 将字节转换为16进制字符串。 public static string ToHex(this byte b) Parameters b byte 要转换的字节。 Returns string 16进制字符串。 ToHex(byte[]) 将字节数组转换为16进制字符串。 public static string ToHex(this byte[] bytes) Parameters bytes byte[] 要转换的字节数组。 Returns string 16进制字符串。 ToHex(byte[], int, int) 将字节数组的指定范围转换为16进制字符串。 public static string ToHex(this byte[] bytes, int offset, int count) Parameters bytes byte[] 要转换的字节数组。 offset int 起始偏移量。 count int 要转换的字节数。 Returns string 16进制字符串。 ToHex(byte[], string) 将字节数组转换为指定格式的字符串。 public static string ToHex(this byte[] bytes, string format) Parameters bytes byte[] 要转换的字节数组。 format string 格式化字符串。 Returns string 格式化后的字符串。 ToUtf8String(byte[]) 将字节数组转换为UTF8编码的字符串。 public static string ToUtf8String(this byte[] bytes) Parameters bytes byte[] 要转换的字节数组。 Returns string UTF8编码的字符串。 ToUtf8String(byte[], int, int) 将字节数组的指定范围转换为UTF8编码的字符串。 public static string ToUtf8String(this byte[] bytes, int index, int count) Parameters bytes byte[] 要转换的字节数组。 index int 起始偏移量。 count int 要转换的字节数。 Returns string UTF8编码的字符串。 WriteBool(byte[], bool, ref int) 将一个布尔值写入指定的缓冲区，并更新偏移量。 public static void WriteBool(this byte[] buffer, bool value, ref int offset) Parameters buffer byte[] 要写入的缓冲区。 value bool 要写入的值。 offset int 要写入值的缓冲区中的偏移量。 WriteByte(byte[], byte, ref int) 将一个8位整数写入指定的缓冲区，并更新偏移量。 public static void WriteByte(this byte[] buffer, byte value, ref int offset) Parameters buffer byte[] 要写入的缓冲区。 value byte 要写入的值。 offset int 要写入值的缓冲区中的偏移量。 WriteBytes(byte[], byte[], ref int) 将一个字节数组写入指定的缓冲区，并更新偏移量。 public static void WriteBytes(this byte[] buffer, byte[] value, ref int offset) Parameters buffer byte[] 要写入的缓冲区。 value byte[] 要写入的值。 offset int 要写入值的缓冲区中的偏移量。 WriteBytesWithoutLength(byte[], byte[], ref int) 将一个字节数组写入指定的缓冲区，并更新偏移量。 public static void WriteBytesWithoutLength(this byte[] buffer, byte[] value, ref int offset) Parameters buffer byte[] 要写入的缓冲区。 value byte[] 要写入的值。 offset int 要写入值的缓冲区中的偏移量。 WriteDouble(byte[], double, ref int) 将一个双精度浮点数写入指定的缓冲区，并更新偏移量。 public static void WriteDouble(this byte[] buffer, double value, ref int offset) Parameters buffer byte[] 要写入的缓冲区。 value double 要写入的值。 offset int 要写入值的缓冲区中的偏移量。 WriteFloat(byte[], float, ref int) 将一个单精度浮点数写入指定的缓冲区，并更新偏移量。 public static void WriteFloat(this byte[] buffer, float value, ref int offset) Parameters buffer byte[] 要写入的缓冲区。 value float 要写入的值。 offset int 要写入值的缓冲区中的偏移量。 WriteInt(byte[], int, ref int) 将一个32位整数写入指定的缓冲区，并更新偏移量。 public static void WriteInt(this byte[] buffer, int value, ref int offset) Parameters buffer byte[] 要写入的缓冲区。 value int 要写入的值。 offset int 要写入值的缓冲区中的偏移量。 WriteLong(byte[], long, ref int) 将一个64位整数写入指定的缓冲区，并更新偏移量。 public static void WriteLong(this byte[] buffer, long value, ref int offset) Parameters buffer byte[] 要写入的缓冲区。 value long 要写入的值。 offset int 要写入值的缓冲区中的偏移量。 WriteSByte(byte[], sbyte, ref int) 将一个字节写入指定的缓冲区，并更新偏移量。 public static void WriteSByte(this byte[] buffer, sbyte value, ref int offset) Parameters buffer byte[] 要写入的缓冲区。 value sbyte 要写入的值。 offset int 要写入值的缓冲区中的偏移量。 WriteShort(byte[], short, ref int) 将一个16位整数写入指定的缓冲区，并更新偏移量。 public static void WriteShort(this byte[] buffer, short value, ref int offset) Parameters buffer byte[] 要写入的缓冲区。 value short 要写入的值。 offset int 要写入值的缓冲区中的偏移量。 WriteString(byte[], string, ref int) 将一个字符串写入指定的缓冲区，并更新偏移量。 public static void WriteString(this byte[] buffer, string value, ref int offset) Parameters buffer byte[] 要写入的缓冲区。 value string 要写入的值。 offset int 要写入值的缓冲区中的偏移量。 WriteUInt(byte[], uint, ref int) 将一个32位无符号整数写入指定的缓冲区，并更新偏移量。 public static void WriteUInt(this byte[] buffer, uint value, ref int offset) Parameters buffer byte[] 要写入的缓冲区。 value uint 要写入的值。 offset int 要写入值的缓冲区中的偏移量。 WriteULong(byte[], ulong, ref int) 将一个64位无符号整数写入指定的缓冲区，并更新偏移量。 public static void WriteULong(this byte[] buffer, ulong value, ref int offset) Parameters buffer byte[] 要写入的缓冲区。 value ulong 要写入的值。 offset int 要写入值的缓冲区中的偏移量。 WriteUShort(byte[], ushort, ref int) 将一个16位无符号整数写入指定的缓冲区，并更新偏移量。 public static void WriteUShort(this byte[] buffer, ushort value, ref int offset) Parameters buffer byte[] 要写入的缓冲区。 value ushort 要写入的值。 offset int 要写入值的缓冲区中的偏移量。"
  },
  "api/GameFrameX.Utility.Extensions.CollectionExtensions.html": {
    "href": "api/GameFrameX.Utility.Extensions.CollectionExtensions.html",
    "title": "Class CollectionExtensions | GameFrameX.Server",
    "keywords": "Class CollectionExtensions Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll public static class CollectionExtensions Inheritance object CollectionExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddRange<T>(HashSet<T>, IEnumerable<T>) 将一个可枚举集合的元素添加到哈希集合中。 public static void AddRange<T>(this HashSet<T> c, IEnumerable<T> e) Parameters c HashSet<T> 要添加元素的哈希集合。 e IEnumerable<T> 要添加的元素的可枚举集合。 Type Parameters T 哈希集合元素的类型。 GetOrAdd<TKey, TValue>(Dictionary<TKey, TValue>, TKey) 获取指定键的值，如果字典中不存在该键，则使用无参构造函数创建一个新的值并添加到字典中。 public static TValue GetOrAdd<TKey, TValue>(this Dictionary<TKey, TValue> self, TKey key) where TValue : new() Parameters self Dictionary<TKey, TValue> 要操作的字典。 key TKey 要获取值的键。 Returns TValue 指定键的值。 Type Parameters TKey 键的类型。 TValue 值的类型。 GetOrAdd<TKey, TValue>(Dictionary<TKey, TValue>, TKey, Func<TKey, TValue>) 获取指定键的值，如果字典中不存在该键，则使用指定的函数获取值并添加到字典中。 public static TValue GetOrAdd<TKey, TValue>(this Dictionary<TKey, TValue> self, TKey key, Func<TKey, TValue> valueGetter) Parameters self Dictionary<TKey, TValue> 要操作的字典。 key TKey 要获取值的键。 valueGetter Func<TKey, TValue> 用于获取值的函数。 Returns TValue 指定键的值。 Type Parameters TKey 键的类型。 TValue 值的类型。 IsNullOrEmpty<T>(ICollection<T>) 检查集合是否为 null 或空。 public static bool IsNullOrEmpty<T>(this ICollection<T> self) Parameters self ICollection<T> 要检查的集合。 Returns bool 如果集合为 null 或空，则为 true；否则为 false。 Type Parameters T 集合元素的类型。 Merge<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue, Func<TValue, TValue, TValue>) 合并字典中的键值对。如果字典中已存在指定的键，则使用指定的函数对原有值和新值进行合并；否则直接添加键值对。 public static void Merge<TKey, TValue>(this Dictionary<TKey, TValue> self, TKey k, TValue v, Func<TValue, TValue, TValue> func) Parameters self Dictionary<TKey, TValue> 要合并的字典。 k TKey 要添加或合并的键。 v TValue 要添加或合并的值。 func Func<TValue, TValue, TValue> 用于合并值的函数。 Type Parameters TKey 键的类型。 TValue 值的类型。 Random<T>(List<T>) 从列表中随机获取一个对象。 public static T Random<T>(this List<T> list) Parameters list List<T> 要随机的列表。 Returns T Type Parameters T 列表元素的类型。 RemoveIf<T>(List<T>, Predicate<T>) 从列表中移除满足条件的元素。 public static void RemoveIf<T>(this List<T> list, Predicate<T> condition) Parameters list List<T> 要操作的列表。 condition Predicate<T> 用于判断元素是否满足移除条件的委托。 Type Parameters T 列表元素的类型。 RemoveIf<TKey, TValue>(Dictionary<TKey, TValue>, Func<TKey, TValue, bool>) 根据指定条件从字典中移除键值对。 public static int RemoveIf<TKey, TValue>(this Dictionary<TKey, TValue> self, Func<TKey, TValue, bool> predict) Parameters self Dictionary<TKey, TValue> 要操作的字典。 predict Func<TKey, TValue, bool> 判断是否移除键值对的条件。 Returns int 移除的键值对数量。 Type Parameters TKey 键的类型。 TValue 值的类型。 Shuffer<T>(List<T>) 打乱列表中的元素顺序。 public static void Shuffer<T>(this List<T> list) Parameters list List<T> 要打乱顺序的列表。 Type Parameters T 列表元素的类型。"
  },
  "api/GameFrameX.Utility.Extensions.ConcurrentLimitedQueue-1.html": {
    "href": "api/GameFrameX.Utility.Extensions.ConcurrentLimitedQueue-1.html",
    "title": "Class ConcurrentLimitedQueue<T> | GameFrameX.Server",
    "keywords": "Class ConcurrentLimitedQueue<T> Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll 定长队列，当队列达到指定长度时，新元素入队会自动移除最旧的元素。 public class ConcurrentLimitedQueue<T> : ConcurrentQueue<T>, IProducerConsumerCollection<T>, ICollection, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable Type Parameters T 队列中元素的类型。 Inheritance object ConcurrentQueue<T> ConcurrentLimitedQueue<T> Implements IProducerConsumerCollection<T> ICollection IReadOnlyCollection<T> IEnumerable<T> IEnumerable Inherited Members ConcurrentQueue<T>.Clear() ConcurrentQueue<T>.CopyTo(T[], int) ConcurrentQueue<T>.GetEnumerator() ConcurrentQueue<T>.ToArray() ConcurrentQueue<T>.TryDequeue(out T) ConcurrentQueue<T>.TryPeek(out T) ConcurrentQueue<T>.Count ConcurrentQueue<T>.IsEmpty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) IEnumerableExtensions.AddRangeIf<T>(ConcurrentQueue<T>, Func<T, bool>, params T[]) IEnumerableExtensions.AddRange<T>(ConcurrentQueue<T>, params T[]) IDictionaryExtensions.ToConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, TSource) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToDictionarySafety<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IDictionaryExtensions.ToDictionarySafety<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, TSource) IDictionaryExtensions.ToDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToDisposableConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToDisposableConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToDisposableConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToDisposableConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToDisposableDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToDisposableDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToDisposableDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToDisposableDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToLookupAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToLookupX<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IDictionaryExtensions.ToLookupX<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IEnumerableExtensions.AsNotNull<T>(IEnumerable<T>) IEnumerableExtensions.CompareChangesPlus<T1, T2>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, bool>) IEnumerableExtensions.CompareChanges<T1, T2>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, bool>) IEnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IEnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>) IEnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>, IEqualityComparer<TKey>) IEnumerableExtensions.ExceptBy<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, bool>) IEnumerableExtensions.ForAsync<T>(IEnumerable<T>, Func<T, int, Task>, int, CancellationToken) IEnumerableExtensions.ForAsync<T>(IEnumerable<T>, Func<T, int, Task>, CancellationToken) IEnumerableExtensions.ForEach<T>(IEnumerable<T>, Action<T>) IEnumerableExtensions.ForeachAsync<T>(IEnumerable<T>, Func<T, Task>, int, CancellationToken) IEnumerableExtensions.ForeachAsync<T>(IEnumerable<T>, Func<T, Task>, CancellationToken) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>, IEqualityComparer<TKey>) IEnumerableExtensions.IntersectBy<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, bool>) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) IEnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>) IEnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, TSource) IEnumerableExtensions.MaxOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) IEnumerableExtensions.MaxOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>, TResult) IEnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>) IEnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, TSource) IEnumerableExtensions.MinOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) IEnumerableExtensions.MinOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>, TResult) IEnumerableExtensions.OrderByRandom<T>(IEnumerable<T>) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, int, Task<TResult>>) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, int, Task<TResult>>, int) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, Task<TResult>>) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, Task<TResult>>, int) IEnumerableExtensions.SequenceEqual<T>(IEnumerable<T>, IEnumerable<T>, Func<T, T, bool>) IEnumerableExtensions.SequenceEqual<T1, T2>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, bool>) IEnumerableExtensions.ToHashSet<T, TResult>(IEnumerable<T>, Func<T, TResult>) IEnumerableExtensions.WhereIf<T>(IEnumerable<T>, bool, Func<T, bool>) IEnumerableExtensions.WhereIf<T>(IEnumerable<T>, Func<bool>, Func<T, bool>) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors ConcurrentLimitedQueue(IEnumerable<T>) 使用指定的集合初始化一个新的 ConcurrentLimitedQueue<T> 实例，并设置队列的最大长度为集合的元素数量。 public ConcurrentLimitedQueue(IEnumerable<T> list) Parameters list IEnumerable<T> 用于初始化队列的集合。 ConcurrentLimitedQueue(int) 初始化一个新的 ConcurrentLimitedQueue<T> 实例，指定队列的最大长度。 public ConcurrentLimitedQueue(int limit) Parameters limit int 队列的最大长度。 Properties Limit 队列的最大长度。 public int Limit { get; set; } Property Value int Methods Enqueue(T) 将一个元素添加到队列中。如果队列已满，则移除最旧的元素。 public void Enqueue(T item) Parameters item T 要添加的元素。 Operators implicit operator ConcurrentLimitedQueue<T>(List<T>) 将一个列表隐式转换为 ConcurrentLimitedQueue<T>。 public static implicit operator ConcurrentLimitedQueue<T>(List<T> list) Parameters list List<T> 要转换的列表。 Returns ConcurrentLimitedQueue<T> 一个新的 ConcurrentLimitedQueue<T> 实例。"
  },
  "api/GameFrameX.Utility.Extensions.ConstSize.html": {
    "href": "api/GameFrameX.Utility.Extensions.ConstSize.html",
    "title": "Class ConstSize | GameFrameX.Server",
    "keywords": "Class ConstSize Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll 常量型变量的字节数 public static class ConstSize Inheritance object ConstSize Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields BoolSize 布尔型变量的字节数。 public const int BoolSize = 1 Field Value int ByteSize 字节型变量（8 位）的字节数。 public const int ByteSize = 1 Field Value int DoubleSize 双精度浮点型变量的字节数。 public const int DoubleSize = 8 Field Value int FloatSize 单精度浮点型变量的字节数。 public const int FloatSize = 4 Field Value int IntSize 整型变量（32 位）的字节数。 public const int IntSize = 4 Field Value int LongSize 长整型变量（64 位）的字节数。 public const int LongSize = 8 Field Value int SbyteSize 有符号字节类型变量的字节数。 public const int SbyteSize = 1 Field Value int ShortSize 短整型变量（16 位）的字节数。 public const int ShortSize = 2 Field Value int UIntSize 无符号整型变量（32 位）的字节数。 public const int UIntSize = 4 Field Value int ULongSize 无符号长整型变量（64 位）的字节数。 public const int ULongSize = 8 Field Value int UShortSize 无符号短整型变量（16 位）的字节数。 public const int UShortSize = 2 Field Value int"
  },
  "api/GameFrameX.Utility.Extensions.DateTimeExtensions.html": {
    "href": "api/GameFrameX.Utility.Extensions.DateTimeExtensions.html",
    "title": "Class DateTimeExtensions | GameFrameX.Server",
    "keywords": "Class DateTimeExtensions Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll 提供对 DateTime 类型的扩展方法。 public static class DateTimeExtensions Inheritance object DateTimeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetDaysFrom(DateTime, DateTime) 获取从指定日期到当前日期的天数差。 public static int GetDaysFrom(this DateTime now, DateTime dt) Parameters now DateTime 当前日期。 dt DateTime 指定的日期。 Returns int 从指定日期到当前日期的天数差。 GetDaysFromDefault(DateTime) 获取从默认日期（1970年1月1日）到当前日期的天数差。 public static int GetDaysFromDefault(this DateTime now) Parameters now DateTime 当前日期。 Returns int 从默认日期到当前日期的天数差。"
  },
  "api/GameFrameX.Utility.Extensions.DisposableConcurrentDictionary-2.html": {
    "href": "api/GameFrameX.Utility.Extensions.DisposableConcurrentDictionary-2.html",
    "title": "Class DisposableConcurrentDictionary<TKey, TValue> | GameFrameX.Server",
    "keywords": "Class DisposableConcurrentDictionary<TKey, TValue> Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll 值可被Dispose的并发字典类型 public class DisposableConcurrentDictionary<TKey, TValue> : NullableConcurrentDictionary<TKey, TValue>, IDictionary<NullObject<TKey>, TValue>, ICollection<KeyValuePair<NullObject<TKey>, TValue>>, IReadOnlyDictionary<NullObject<TKey>, TValue>, IReadOnlyCollection<KeyValuePair<NullObject<TKey>, TValue>>, IEnumerable<KeyValuePair<NullObject<TKey>, TValue>>, IDictionary, ICollection, IEnumerable, IDisposable where TValue : IDisposable Type Parameters TKey 键的类型。 TValue 值的类型，必须实现IDisposable接口。 Inheritance object ConcurrentDictionary<NullObject<TKey>, TValue> NullableConcurrentDictionary<TKey, TValue> DisposableConcurrentDictionary<TKey, TValue> Implements IDictionary<NullObject<TKey>, TValue> ICollection<KeyValuePair<NullObject<TKey>, TValue>> IReadOnlyDictionary<NullObject<TKey>, TValue> IReadOnlyCollection<KeyValuePair<NullObject<TKey>, TValue>> IEnumerable<KeyValuePair<NullObject<TKey>, TValue>> IDictionary ICollection IEnumerable IDisposable Inherited Members NullableConcurrentDictionary<TKey, TValue>.this[NullObject<TKey>] NullableConcurrentDictionary<TKey, TValue>.this[Func<KeyValuePair<TKey, TValue>, bool>] NullableConcurrentDictionary<TKey, TValue>.this[Func<TKey, TValue, bool>] NullableConcurrentDictionary<TKey, TValue>.this[Func<TKey, bool>] NullableConcurrentDictionary<TKey, TValue>.this[Func<TValue, bool>] NullableConcurrentDictionary<TKey, TValue>.this[TKey] NullableConcurrentDictionary<TKey, TValue>.ContainsKey(TKey) NullableConcurrentDictionary<TKey, TValue>.TryAdd(TKey, TValue) NullableConcurrentDictionary<TKey, TValue>.TryRemove(TKey, out TValue) NullableConcurrentDictionary<TKey, TValue>.TryUpdate(TKey, TValue, TValue) NullableConcurrentDictionary<TKey, TValue>.TryGetValue(TKey, out TValue) ConcurrentDictionary<NullObject<TKey>, TValue>.AddOrUpdate(NullObject<TKey>, Func<NullObject<TKey>, TValue>, Func<NullObject<TKey>, TValue, TValue>) ConcurrentDictionary<NullObject<TKey>, TValue>.AddOrUpdate(NullObject<TKey>, TValue, Func<NullObject<TKey>, TValue, TValue>) ConcurrentDictionary<NullObject<TKey>, TValue>.AddOrUpdate<TArg>(NullObject<TKey>, Func<NullObject<TKey>, TArg, TValue>, Func<NullObject<TKey>, TValue, TArg, TValue>, TArg) ConcurrentDictionary<NullObject<TKey>, TValue>.Clear() ConcurrentDictionary<NullObject<TKey>, TValue>.ContainsKey(NullObject<TKey>) ConcurrentDictionary<NullObject<TKey>, TValue>.GetEnumerator() ConcurrentDictionary<NullObject<TKey>, TValue>.GetOrAdd(NullObject<TKey>, Func<NullObject<TKey>, TValue>) ConcurrentDictionary<NullObject<TKey>, TValue>.GetOrAdd(NullObject<TKey>, TValue) ConcurrentDictionary<NullObject<TKey>, TValue>.GetOrAdd<TArg>(NullObject<TKey>, Func<NullObject<TKey>, TArg, TValue>, TArg) ConcurrentDictionary<NullObject<TKey>, TValue>.ToArray() ConcurrentDictionary<NullObject<TKey>, TValue>.TryAdd(NullObject<TKey>, TValue) ConcurrentDictionary<NullObject<TKey>, TValue>.TryGetValue(NullObject<TKey>, out TValue) ConcurrentDictionary<NullObject<TKey>, TValue>.TryRemove(KeyValuePair<NullObject<TKey>, TValue>) ConcurrentDictionary<NullObject<TKey>, TValue>.TryRemove(NullObject<TKey>, out TValue) ConcurrentDictionary<NullObject<TKey>, TValue>.TryUpdate(NullObject<TKey>, TValue, TValue) ConcurrentDictionary<NullObject<TKey>, TValue>.Comparer ConcurrentDictionary<NullObject<TKey>, TValue>.Count ConcurrentDictionary<NullObject<TKey>, TValue>.IsEmpty ConcurrentDictionary<NullObject<TKey>, TValue>.this[NullObject<TKey>] ConcurrentDictionary<NullObject<TKey>, TValue>.Keys ConcurrentDictionary<NullObject<TKey>, TValue>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, TKey, Func<TKey, Task<TValue>>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateTo<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, IDictionary<TKey, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, IDictionary<TKey, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, TKey, TValue, TValue) IDictionaryExtensions.AsDictionary<TKey, TValue>(ConcurrentDictionary<TKey, TValue>) IDictionaryExtensions.AsDictionary<TKey, TValue>(ConcurrentDictionary<TKey, TValue>, TValue) CollectionExtensions.IsNullOrEmpty<T>(ICollection<T>) IEnumerableExtensions.AddRangeIfNotContains<T>(ICollection<T>, params T[]) IEnumerableExtensions.AddRangeIf<T>(ICollection<T>, Func<T, bool>, params T[]) IEnumerableExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) IEnumerableExtensions.AddRange<T>(ICollection<T>, params T[]) IEnumerableExtensions.RemoveWhere<T>(ICollection<T>, Func<T, bool>) IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TKey, Task<TValue>>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateToAsync<TKey, TValue>(IDictionary<TKey, TValue>, NullableConcurrentDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateToAsync<TKey, TValue>(IDictionary<TKey, TValue>, NullableDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateToAsync<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateTo<TKey, TValue>(IDictionary<TKey, TValue>, NullableConcurrentDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdateTo<TKey, TValue>(IDictionary<TKey, TValue>, NullableDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdateTo<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>) IDictionaryExtensions.AddOrUpdateTo<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue, TValue) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.ForEachAsync<TKey, TValue>(IDictionary<TKey, TValue>, Func<TKey, TValue, Task>) IDictionaryExtensions.ForEach<TKey, TValue>(IDictionary<TKey, TValue>, Action<TKey, TValue>) IDictionaryExtensions.GetOrAddAsync<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<Task<TValue>>) IDictionaryExtensions.GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TValue>) IDictionaryExtensions.ToConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, TSource) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToDictionarySafety<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IDictionaryExtensions.ToDictionarySafety<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, TSource) IDictionaryExtensions.ToDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToDisposableConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToDisposableConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToDisposableConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToDisposableConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToDisposableDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToDisposableDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToDisposableDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToDisposableDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToLookupAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToLookupX<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IDictionaryExtensions.ToLookupX<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IEnumerableExtensions.AsNotNull<T>(IEnumerable<T>) IEnumerableExtensions.CompareChangesPlus<T1, T2>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, bool>) IEnumerableExtensions.CompareChanges<T1, T2>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, bool>) IEnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IEnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>) IEnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>, IEqualityComparer<TKey>) IEnumerableExtensions.ExceptBy<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, bool>) IEnumerableExtensions.ForAsync<T>(IEnumerable<T>, Func<T, int, Task>, int, CancellationToken) IEnumerableExtensions.ForAsync<T>(IEnumerable<T>, Func<T, int, Task>, CancellationToken) IEnumerableExtensions.ForEach<T>(IEnumerable<T>, Action<T>) IEnumerableExtensions.ForeachAsync<T>(IEnumerable<T>, Func<T, Task>, int, CancellationToken) IEnumerableExtensions.ForeachAsync<T>(IEnumerable<T>, Func<T, Task>, CancellationToken) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>, IEqualityComparer<TKey>) IEnumerableExtensions.IntersectBy<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, bool>) IEnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>) IEnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, TSource) IEnumerableExtensions.MaxOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) IEnumerableExtensions.MaxOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>, TResult) IEnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>) IEnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, TSource) IEnumerableExtensions.MinOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) IEnumerableExtensions.MinOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>, TResult) IEnumerableExtensions.OrderByRandom<T>(IEnumerable<T>) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, int, Task<TResult>>) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, int, Task<TResult>>, int) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, Task<TResult>>) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, Task<TResult>>, int) IEnumerableExtensions.SequenceEqual<T>(IEnumerable<T>, IEnumerable<T>, Func<T, T, bool>) IEnumerableExtensions.SequenceEqual<T1, T2>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, bool>) IEnumerableExtensions.ToHashSet<T, TResult>(IEnumerable<T>, Func<T, TResult>) IEnumerableExtensions.WhereIf<T>(IEnumerable<T>, bool, Func<T, bool>) IEnumerableExtensions.WhereIf<T>(IEnumerable<T>, Func<bool>, Func<T, bool>) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors DisposableConcurrentDictionary() 初始化一个新的 DisposableConcurrentDictionary<TKey, TValue> 实例。 public DisposableConcurrentDictionary() DisposableConcurrentDictionary(IEqualityComparer<NullObject<TKey>>) 使用指定的比较器初始化一个新的 DisposableConcurrentDictionary<TKey, TValue> 实例。 public DisposableConcurrentDictionary(IEqualityComparer<NullObject<TKey>> comparer) Parameters comparer IEqualityComparer<NullObject<TKey>> 用于比较键的比较器。 DisposableConcurrentDictionary(int, int) 使用指定的并发级别和初始容量初始化一个新的 DisposableConcurrentDictionary<TKey, TValue> 实例。 public DisposableConcurrentDictionary(int concurrencyLevel, int capacity) Parameters concurrencyLevel int 并发级别，即字典可以同时支持的线程数。 capacity int 字典的初始容量。 DisposableConcurrentDictionary(TValue) 使用指定的默认值初始化一个新的 DisposableConcurrentDictionary<TKey, TValue> 实例。 public DisposableConcurrentDictionary(TValue fallbackValue) Parameters fallbackValue TValue 当键不存在时返回的默认值。 Methods Dispose() 释放资源。 public void Dispose() Dispose(bool) 释放资源。 protected virtual void Dispose(bool disposing) Parameters disposing bool 指示是否应释放托管资源。 ~DisposableConcurrentDictionary() 终结器，确保未释放的资源在对象被垃圾回收时被释放。 protected ~DisposableConcurrentDictionary()"
  },
  "api/GameFrameX.Utility.Extensions.DisposableDictionary-2.html": {
    "href": "api/GameFrameX.Utility.Extensions.DisposableDictionary-2.html",
    "title": "Class DisposableDictionary<TKey, TValue> | GameFrameX.Server",
    "keywords": "Class DisposableDictionary<TKey, TValue> Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll 值可被Dispose的字典类型 public class DisposableDictionary<TKey, TValue> : NullableDictionary<TKey, TValue>, IDictionary<NullObject<TKey>, TValue>, ICollection<KeyValuePair<NullObject<TKey>, TValue>>, IReadOnlyDictionary<NullObject<TKey>, TValue>, IReadOnlyCollection<KeyValuePair<NullObject<TKey>, TValue>>, IEnumerable<KeyValuePair<NullObject<TKey>, TValue>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable, IDisposable where TValue : IDisposable Type Parameters TKey 键的类型。 TValue 值的类型，必须实现IDisposable接口。 Inheritance object Dictionary<NullObject<TKey>, TValue> NullableDictionary<TKey, TValue> DisposableDictionary<TKey, TValue> Implements IDictionary<NullObject<TKey>, TValue> ICollection<KeyValuePair<NullObject<TKey>, TValue>> IReadOnlyDictionary<NullObject<TKey>, TValue> IReadOnlyCollection<KeyValuePair<NullObject<TKey>, TValue>> IEnumerable<KeyValuePair<NullObject<TKey>, TValue>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable IDisposable Inherited Members NullableDictionary<TKey, TValue>.this[NullObject<TKey>] NullableDictionary<TKey, TValue>.this[Func<KeyValuePair<TKey, TValue>, bool>] NullableDictionary<TKey, TValue>.this[Func<TKey, TValue, bool>] NullableDictionary<TKey, TValue>.this[Func<TKey, bool>] NullableDictionary<TKey, TValue>.this[Func<TValue, bool>] NullableDictionary<TKey, TValue>.this[TKey] NullableDictionary<TKey, TValue>.ContainsKey(TKey) NullableDictionary<TKey, TValue>.Add(TKey, TValue) NullableDictionary<TKey, TValue>.Remove(TKey) NullableDictionary<TKey, TValue>.TryGetValue(TKey, out TValue) Dictionary<NullObject<TKey>, TValue>.Add(NullObject<TKey>, TValue) Dictionary<NullObject<TKey>, TValue>.Clear() Dictionary<NullObject<TKey>, TValue>.ContainsKey(NullObject<TKey>) Dictionary<NullObject<TKey>, TValue>.ContainsValue(TValue) Dictionary<NullObject<TKey>, TValue>.EnsureCapacity(int) Dictionary<NullObject<TKey>, TValue>.GetEnumerator() Dictionary<NullObject<TKey>, TValue>.OnDeserialization(object) Dictionary<NullObject<TKey>, TValue>.Remove(NullObject<TKey>) Dictionary<NullObject<TKey>, TValue>.Remove(NullObject<TKey>, out TValue) Dictionary<NullObject<TKey>, TValue>.TrimExcess() Dictionary<NullObject<TKey>, TValue>.TrimExcess(int) Dictionary<NullObject<TKey>, TValue>.TryAdd(NullObject<TKey>, TValue) Dictionary<NullObject<TKey>, TValue>.TryGetValue(NullObject<TKey>, out TValue) Dictionary<NullObject<TKey>, TValue>.Comparer Dictionary<NullObject<TKey>, TValue>.Count Dictionary<NullObject<TKey>, TValue>.this[NullObject<TKey>] Dictionary<NullObject<TKey>, TValue>.Keys Dictionary<NullObject<TKey>, TValue>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(NullableDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(NullableDictionary<TKey, TValue>, TKey, Func<TKey, Task<TValue>>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(NullableDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateTo<TKey, TValue>(NullableDictionary<TKey, TValue>, IDictionary<TKey, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(NullableDictionary<TKey, TValue>, IDictionary<TKey, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(NullableDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(NullableDictionary<TKey, TValue>, TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(NullableDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(NullableDictionary<TKey, TValue>, TKey, TValue, TValue) CollectionExtensions.GetOrAdd<TKey, TValue>(Dictionary<TKey, TValue>, TKey, Func<TKey, TValue>) CollectionExtensions.Merge<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue, Func<TValue, TValue, TValue>) CollectionExtensions.RemoveIf<TKey, TValue>(Dictionary<TKey, TValue>, Func<TKey, TValue, bool>) IDictionaryExtensions.AsConcurrentDictionary<TKey, TValue>(Dictionary<TKey, TValue>) IDictionaryExtensions.AsConcurrentDictionary<TKey, TValue>(Dictionary<TKey, TValue>, TValue) IDictionaryExtensions.GetOrAdd<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue) CollectionExtensions.IsNullOrEmpty<T>(ICollection<T>) IEnumerableExtensions.AddRangeIfNotContains<T>(ICollection<T>, params T[]) IEnumerableExtensions.AddRangeIf<T>(ICollection<T>, Func<T, bool>, params T[]) IEnumerableExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) IEnumerableExtensions.AddRange<T>(ICollection<T>, params T[]) IEnumerableExtensions.RemoveWhere<T>(ICollection<T>, Func<T, bool>) IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TKey, Task<TValue>>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateToAsync<TKey, TValue>(IDictionary<TKey, TValue>, NullableConcurrentDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateToAsync<TKey, TValue>(IDictionary<TKey, TValue>, NullableDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateToAsync<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateTo<TKey, TValue>(IDictionary<TKey, TValue>, NullableConcurrentDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdateTo<TKey, TValue>(IDictionary<TKey, TValue>, NullableDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdateTo<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>) IDictionaryExtensions.AddOrUpdateTo<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue, TValue) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.ForEachAsync<TKey, TValue>(IDictionary<TKey, TValue>, Func<TKey, TValue, Task>) IDictionaryExtensions.ForEach<TKey, TValue>(IDictionary<TKey, TValue>, Action<TKey, TValue>) IDictionaryExtensions.GetOrAddAsync<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<Task<TValue>>) IDictionaryExtensions.GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TValue>) IDictionaryExtensions.ToConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, TSource) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToDictionarySafety<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IDictionaryExtensions.ToDictionarySafety<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, TSource) IDictionaryExtensions.ToDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToDisposableConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToDisposableConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToDisposableConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToDisposableConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToDisposableDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToDisposableDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToDisposableDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToDisposableDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToLookupAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToLookupX<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IDictionaryExtensions.ToLookupX<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IEnumerableExtensions.AsNotNull<T>(IEnumerable<T>) IEnumerableExtensions.CompareChangesPlus<T1, T2>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, bool>) IEnumerableExtensions.CompareChanges<T1, T2>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, bool>) IEnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IEnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>) IEnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>, IEqualityComparer<TKey>) IEnumerableExtensions.ExceptBy<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, bool>) IEnumerableExtensions.ForAsync<T>(IEnumerable<T>, Func<T, int, Task>, int, CancellationToken) IEnumerableExtensions.ForAsync<T>(IEnumerable<T>, Func<T, int, Task>, CancellationToken) IEnumerableExtensions.ForEach<T>(IEnumerable<T>, Action<T>) IEnumerableExtensions.ForeachAsync<T>(IEnumerable<T>, Func<T, Task>, int, CancellationToken) IEnumerableExtensions.ForeachAsync<T>(IEnumerable<T>, Func<T, Task>, CancellationToken) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>, IEqualityComparer<TKey>) IEnumerableExtensions.IntersectBy<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, bool>) IEnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>) IEnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, TSource) IEnumerableExtensions.MaxOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) IEnumerableExtensions.MaxOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>, TResult) IEnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>) IEnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, TSource) IEnumerableExtensions.MinOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) IEnumerableExtensions.MinOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>, TResult) IEnumerableExtensions.OrderByRandom<T>(IEnumerable<T>) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, int, Task<TResult>>) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, int, Task<TResult>>, int) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, Task<TResult>>) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, Task<TResult>>, int) IEnumerableExtensions.SequenceEqual<T>(IEnumerable<T>, IEnumerable<T>, Func<T, T, bool>) IEnumerableExtensions.SequenceEqual<T1, T2>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, bool>) IEnumerableExtensions.ToHashSet<T, TResult>(IEnumerable<T>, Func<T, TResult>) IEnumerableExtensions.WhereIf<T>(IEnumerable<T>, bool, Func<T, bool>) IEnumerableExtensions.WhereIf<T>(IEnumerable<T>, Func<bool>, Func<T, bool>) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors DisposableDictionary() 初始化一个新的 DisposableDictionary<TKey, TValue> 实例。 public DisposableDictionary() DisposableDictionary(IDictionary<NullObject<TKey>, TValue>) 使用指定的字典初始化一个新的 DisposableDictionary<TKey, TValue> 实例。 public DisposableDictionary(IDictionary<NullObject<TKey>, TValue> dictionary) Parameters dictionary IDictionary<NullObject<TKey>, TValue> 用于初始化的字典。 DisposableDictionary(int) 使用指定的初始容量初始化一个新的 DisposableDictionary<TKey, TValue> 实例。 public DisposableDictionary(int capacity) Parameters capacity int 字典的初始容量。 DisposableDictionary(TValue) 使用指定的默认值初始化一个新的 DisposableDictionary<TKey, TValue> 实例。 public DisposableDictionary(TValue fallbackValue) Parameters fallbackValue TValue 当键不存在时返回的默认值。 Methods Dispose() 释放资源。 public void Dispose() Dispose(bool) 释放资源。 protected virtual void Dispose(bool disposing) Parameters disposing bool 指示是否应释放托管资源。 ~DisposableDictionary() 终结器，确保未释放的资源在对象被垃圾回收时被释放。 protected ~DisposableDictionary()"
  },
  "api/GameFrameX.Utility.Extensions.ExpressionExtension.html": {
    "href": "api/GameFrameX.Utility.Extensions.ExpressionExtension.html",
    "title": "Class ExpressionExtension | GameFrameX.Server",
    "keywords": "Class ExpressionExtension Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll 提供对 Expression 类型的扩展方法，用于组合和操作表达式树。 public static class ExpressionExtension Inheritance object ExpressionExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AndIf<T>(Expression<Func<T, bool>>, Func<bool>, Expression<Func<T, bool>>) 根据条件将两个表达式进行逻辑与运算，使用短路求值。 当条件为false时，仅返回左表达式；当条件为true时，返回两个表达式的逻辑与运算结果。 public static Expression<Func<T, bool>> AndIf<T>(this Expression<Func<T, bool>> leftExpression, Func<bool> condition, Expression<Func<T, bool>> rightExpression) Parameters leftExpression Expression<Func<T, bool>> 第一个表达式，作为逻辑与运算的左操作数。 condition Func<bool> 决定是否执行逻辑与运算的条件委托。 rightExpression Expression<Func<T, bool>> 第二个表达式，作为逻辑与运算的右操作数。 Returns Expression<Func<T, bool>> 当条件为true时返回两个表达式的逻辑与运算结果，否则返回左表达式。 Type Parameters T 表达式的参数类型。 Exceptions ArgumentNullException 当任何参数为null时抛出。 And<T>(Expression<Func<T, bool>>, Expression<Func<T, bool>>) 将两个表达式进行逻辑与运算，使用短路求值。 public static Expression<Func<T, bool>> And<T>(this Expression<Func<T, bool>> leftExpression, Expression<Func<T, bool>> rightExpression) Parameters leftExpression Expression<Func<T, bool>> 第一个表达式，作为逻辑与运算的左操作数。 rightExpression Expression<Func<T, bool>> 第二个表达式，作为逻辑与运算的右操作数。 Returns Expression<Func<T, bool>> 一个新的表达式，表示两个输入表达式的逻辑与运算结果。 Type Parameters T 表达式的参数类型。 Exceptions ArgumentNullException 当 leftExpression 或 rightExpression 为 null 时抛出。 Not<T>(Expression<Func<T, bool>>) public static Expression<Func<T, bool>> Not<T>(this Expression<Func<T, bool>> expr) Parameters expr Expression<Func<T, bool>> Returns Expression<Func<T, bool>> Type Parameters T OrIf<T>(Expression<Func<T, bool>>, Func<bool>, Expression<Func<T, bool>>) 根据条件将两个表达式进行逻辑或运算，使用短路求值。 当条件为false时，仅返回左表达式；当条件为true时，返回两个表达式的逻辑或运算结果。 public static Expression<Func<T, bool>> OrIf<T>(this Expression<Func<T, bool>> leftExpression, Func<bool> condition, Expression<Func<T, bool>> rightExpression) Parameters leftExpression Expression<Func<T, bool>> 第一个表达式，作为逻辑或运算的左操作数。 condition Func<bool> 决定是否执行逻辑或运算的条件委托。 rightExpression Expression<Func<T, bool>> 第二个表达式，作为逻辑或运算的右操作数。 Returns Expression<Func<T, bool>> 当条件为true时返回两个表达式的逻辑或运算结果，否则返回左表达式。 Type Parameters T 表达式的参数类型。 Exceptions ArgumentNullException 当任何参数为null时抛出。 Or<T>(Expression<Func<T, bool>>, Expression<Func<T, bool>>) 将两个表达式进行逻辑或运算，使用短路求值。 public static Expression<Func<T, bool>> Or<T>(this Expression<Func<T, bool>> leftExpression, Expression<Func<T, bool>> rightExpression) Parameters leftExpression Expression<Func<T, bool>> 第一个表达式，作为逻辑或运算的左操作数。 rightExpression Expression<Func<T, bool>> 第二个表达式，作为逻辑或运算的右操作数。 Returns Expression<Func<T, bool>> 一个新的表达式，表示两个输入表达式的逻辑或运算结果。 Type Parameters T 表达式的参数类型。 Exceptions ArgumentNullException 当 leftExpression 或 rightExpression 为 null 时抛出。"
  },
  "api/GameFrameX.Utility.Extensions.ExpressionVisitorCustom.html": {
    "href": "api/GameFrameX.Utility.Extensions.ExpressionVisitorCustom.html",
    "title": "Class ExpressionVisitorCustom | GameFrameX.Server",
    "keywords": "Class ExpressionVisitorCustom Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll 表达式访问器的自定义实现。 public class ExpressionVisitorCustom : ExpressionVisitor Inheritance object ExpressionVisitor ExpressionVisitorCustom Inherited Members ExpressionVisitor.Visit(ReadOnlyCollection<Expression>) ExpressionVisitor.Visit(Expression) ExpressionVisitor.VisitAndConvert<T>(ReadOnlyCollection<T>, string) ExpressionVisitor.VisitAndConvert<T>(T, string) ExpressionVisitor.VisitBinary(BinaryExpression) ExpressionVisitor.VisitBlock(BlockExpression) ExpressionVisitor.VisitCatchBlock(CatchBlock) ExpressionVisitor.VisitConditional(ConditionalExpression) ExpressionVisitor.VisitConstant(ConstantExpression) ExpressionVisitor.VisitDebugInfo(DebugInfoExpression) ExpressionVisitor.VisitDefault(DefaultExpression) ExpressionVisitor.VisitDynamic(DynamicExpression) ExpressionVisitor.VisitElementInit(ElementInit) ExpressionVisitor.VisitExtension(Expression) ExpressionVisitor.VisitGoto(GotoExpression) ExpressionVisitor.VisitIndex(IndexExpression) ExpressionVisitor.VisitInvocation(InvocationExpression) ExpressionVisitor.VisitLabel(LabelExpression) ExpressionVisitor.VisitLabelTarget(LabelTarget) ExpressionVisitor.VisitLambda<T>(Expression<T>) ExpressionVisitor.VisitListInit(ListInitExpression) ExpressionVisitor.VisitLoop(LoopExpression) ExpressionVisitor.VisitMember(MemberExpression) ExpressionVisitor.VisitMemberAssignment(MemberAssignment) ExpressionVisitor.VisitMemberBinding(MemberBinding) ExpressionVisitor.VisitMemberInit(MemberInitExpression) ExpressionVisitor.VisitMemberListBinding(MemberListBinding) ExpressionVisitor.VisitMemberMemberBinding(MemberMemberBinding) ExpressionVisitor.VisitMethodCall(MethodCallExpression) ExpressionVisitor.VisitNew(NewExpression) ExpressionVisitor.VisitNewArray(NewArrayExpression) ExpressionVisitor.VisitRuntimeVariables(RuntimeVariablesExpression) ExpressionVisitor.VisitSwitch(SwitchExpression) ExpressionVisitor.VisitSwitchCase(SwitchCase) ExpressionVisitor.VisitTry(TryExpression) ExpressionVisitor.VisitTypeBinary(TypeBinaryExpression) ExpressionVisitor.VisitUnary(UnaryExpression) ExpressionVisitor.Visit<T>(ReadOnlyCollection<T>, Func<T, T>) object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors ExpressionVisitorCustom(ParameterExpression) 初始化 ExpressionVisitorCustom 类的新实例。 public ExpressionVisitorCustom(ParameterExpression param) Parameters param ParameterExpression 访问器中的参数表达式。 Properties Parameter 获取或设置访问器中的参数表达式。 public ParameterExpression Parameter { get; } Property Value ParameterExpression Methods VisitParameter(ParameterExpression) 访问参数表达式。 protected override Expression VisitParameter(ParameterExpression node) Parameters node ParameterExpression 要访问的参数表达式。 Returns Expression 返回访问后的表达式。"
  },
  "api/GameFrameX.Utility.Extensions.IDictionaryExtensions.html": {
    "href": "api/GameFrameX.Utility.Extensions.IDictionaryExtensions.html",
    "title": "Class IDictionaryExtensions | GameFrameX.Server",
    "keywords": "Class IDictionaryExtensions Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll 字典扩展 public static class IDictionaryExtensions Inheritance object IDictionaryExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddOrUpdateAsync<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) 添加或更新键值对 public static Task AddOrUpdateAsync<TKey, TValue>(this NullableConcurrentDictionary<TKey, TValue> self, IDictionary<TKey, TValue> that, Func<TKey, TValue, Task<TValue>> updateValueFactory) Parameters self NullableConcurrentDictionary<TKey, TValue> that IDictionary<TKey, TValue> 另一个字典集 updateValueFactory Func<TKey, TValue, Task<TValue>> 更新时的操作 Returns Task Type Parameters TKey TValue AddOrUpdateAsync<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, TKey, Func<TKey, Task<TValue>>, Func<TKey, TValue, Task<TValue>>) 添加或更新键值对 public static Task<TValue> AddOrUpdateAsync<TKey, TValue>(this NullableConcurrentDictionary<TKey, TValue> self, TKey key, Func<TKey, Task<TValue>> addValueFactory, Func<TKey, TValue, Task<TValue>> updateValueFactory) Parameters self NullableConcurrentDictionary<TKey, TValue> key TKey 键 addValueFactory Func<TKey, Task<TValue>> 添加时的操作 updateValueFactory Func<TKey, TValue, Task<TValue>> 更新时的操作 Returns Task<TValue> Type Parameters TKey TValue AddOrUpdateAsync<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, Task<TValue>>) 添加或更新键值对 public static Task<TValue> AddOrUpdateAsync<TKey, TValue>(this NullableConcurrentDictionary<TKey, TValue> self, TKey key, TValue addValue, Func<TKey, TValue, Task<TValue>> updateValueFactory) Parameters self NullableConcurrentDictionary<TKey, TValue> key TKey 键 addValue TValue 添加时的值 updateValueFactory Func<TKey, TValue, Task<TValue>> 更新时的操作 Returns Task<TValue> Type Parameters TKey TValue AddOrUpdateAsync<TKey, TValue>(NullableDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) 添加或更新键值对 public static Task AddOrUpdateAsync<TKey, TValue>(this NullableDictionary<TKey, TValue> self, IDictionary<TKey, TValue> that, Func<TKey, TValue, Task<TValue>> updateValueFactory) Parameters self NullableDictionary<TKey, TValue> that IDictionary<TKey, TValue> 另一个字典集 updateValueFactory Func<TKey, TValue, Task<TValue>> 更新时的操作 Returns Task Type Parameters TKey TValue AddOrUpdateAsync<TKey, TValue>(NullableDictionary<TKey, TValue>, TKey, Func<TKey, Task<TValue>>, Func<TKey, TValue, Task<TValue>>) 添加或更新键值对 public static Task<TValue> AddOrUpdateAsync<TKey, TValue>(this NullableDictionary<TKey, TValue> self, TKey key, Func<TKey, Task<TValue>> addValueFactory, Func<TKey, TValue, Task<TValue>> updateValueFactory) Parameters self NullableDictionary<TKey, TValue> key TKey 键 addValueFactory Func<TKey, Task<TValue>> 添加时的操作 updateValueFactory Func<TKey, TValue, Task<TValue>> 更新时的操作 Returns Task<TValue> Type Parameters TKey TValue AddOrUpdateAsync<TKey, TValue>(NullableDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, Task<TValue>>) 添加或更新键值对 public static Task<TValue> AddOrUpdateAsync<TKey, TValue>(this NullableDictionary<TKey, TValue> self, TKey key, TValue addValue, Func<TKey, TValue, Task<TValue>> updateValueFactory) Parameters self NullableDictionary<TKey, TValue> key TKey 键 addValue TValue 添加时的值 updateValueFactory Func<TKey, TValue, Task<TValue>> 更新时的操作 Returns Task<TValue> Type Parameters TKey TValue AddOrUpdateAsync<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) 添加或更新键值对 public static Task AddOrUpdateAsync<TKey, TValue>(this IDictionary<TKey, TValue> self, IDictionary<TKey, TValue> that, Func<TKey, TValue, Task<TValue>> updateValueFactory) Parameters self IDictionary<TKey, TValue> that IDictionary<TKey, TValue> 另一个字典集 updateValueFactory Func<TKey, TValue, Task<TValue>> 更新时的操作 Returns Task Type Parameters TKey TValue AddOrUpdateAsync<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TKey, Task<TValue>>, Func<TKey, TValue, Task<TValue>>) 添加或更新键值对 public static Task<TValue> AddOrUpdateAsync<TKey, TValue>(this IDictionary<TKey, TValue> self, TKey key, Func<TKey, Task<TValue>> addValueFactory, Func<TKey, TValue, Task<TValue>> updateValueFactory) Parameters self IDictionary<TKey, TValue> key TKey 键 addValueFactory Func<TKey, Task<TValue>> 添加时的操作 updateValueFactory Func<TKey, TValue, Task<TValue>> 更新时的操作 Returns Task<TValue> Type Parameters TKey TValue AddOrUpdateAsync<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, Task<TValue>>) 添加或更新键值对 public static Task<TValue> AddOrUpdateAsync<TKey, TValue>(this IDictionary<TKey, TValue> self, TKey key, TValue addValue, Func<TKey, TValue, Task<TValue>> updateValueFactory) Parameters self IDictionary<TKey, TValue> key TKey 键 addValue TValue 添加时的值 updateValueFactory Func<TKey, TValue, Task<TValue>> 更新时的操作 Returns Task<TValue> Type Parameters TKey TValue AddOrUpdateToAsync<TKey, TValue>(IDictionary<TKey, TValue>, NullableConcurrentDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) 添加或更新键值对 public static Task AddOrUpdateToAsync<TKey, TValue>(this IDictionary<TKey, TValue> self, NullableConcurrentDictionary<TKey, TValue> that, Func<TKey, TValue, Task<TValue>> updateValueFactory) Parameters self IDictionary<TKey, TValue> that NullableConcurrentDictionary<TKey, TValue> 另一个字典集 updateValueFactory Func<TKey, TValue, Task<TValue>> 更新时的操作 Returns Task Type Parameters TKey TValue AddOrUpdateToAsync<TKey, TValue>(IDictionary<TKey, TValue>, NullableDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) 添加或更新键值对 public static Task AddOrUpdateToAsync<TKey, TValue>(this IDictionary<TKey, TValue> self, NullableDictionary<TKey, TValue> that, Func<TKey, TValue, Task<TValue>> updateValueFactory) Parameters self IDictionary<TKey, TValue> that NullableDictionary<TKey, TValue> 另一个字典集 updateValueFactory Func<TKey, TValue, Task<TValue>> 更新时的操作 Returns Task Type Parameters TKey TValue AddOrUpdateToAsync<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) 添加或更新键值对 public static Task AddOrUpdateToAsync<TKey, TValue>(this IDictionary<TKey, TValue> self, IDictionary<TKey, TValue> that, Func<TKey, TValue, Task<TValue>> updateValueFactory) Parameters self IDictionary<TKey, TValue> that IDictionary<TKey, TValue> 另一个字典集 updateValueFactory Func<TKey, TValue, Task<TValue>> 更新时的操作 Returns Task Type Parameters TKey TValue AddOrUpdateTo<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, IDictionary<TKey, TValue>) 添加或更新键值对 public static void AddOrUpdateTo<TKey, TValue>(this NullableConcurrentDictionary<TKey, TValue> self, IDictionary<TKey, TValue> that) Parameters self NullableConcurrentDictionary<TKey, TValue> that IDictionary<TKey, TValue> 另一个字典集 Type Parameters TKey TValue AddOrUpdateTo<TKey, TValue>(NullableDictionary<TKey, TValue>, IDictionary<TKey, TValue>) 添加或更新键值对 public static void AddOrUpdateTo<TKey, TValue>(this NullableDictionary<TKey, TValue> self, IDictionary<TKey, TValue> that) Parameters self NullableDictionary<TKey, TValue> that IDictionary<TKey, TValue> 另一个字典集 Type Parameters TKey TValue AddOrUpdateTo<TKey, TValue>(IDictionary<TKey, TValue>, NullableConcurrentDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) 添加或更新键值对 public static void AddOrUpdateTo<TKey, TValue>(this IDictionary<TKey, TValue> self, NullableConcurrentDictionary<TKey, TValue> that, Func<TKey, TValue, TValue> updateValueFactory) Parameters self IDictionary<TKey, TValue> that NullableConcurrentDictionary<TKey, TValue> 另一个字典集 updateValueFactory Func<TKey, TValue, TValue> 更新时的操作 Type Parameters TKey TValue AddOrUpdateTo<TKey, TValue>(IDictionary<TKey, TValue>, NullableDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) 添加或更新键值对 public static void AddOrUpdateTo<TKey, TValue>(this IDictionary<TKey, TValue> self, NullableDictionary<TKey, TValue> that, Func<TKey, TValue, TValue> updateValueFactory) Parameters self IDictionary<TKey, TValue> that NullableDictionary<TKey, TValue> 另一个字典集 updateValueFactory Func<TKey, TValue, TValue> 更新时的操作 Type Parameters TKey TValue AddOrUpdateTo<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>) 添加或更新键值对 public static void AddOrUpdateTo<TKey, TValue>(this IDictionary<TKey, TValue> self, IDictionary<TKey, TValue> that) Parameters self IDictionary<TKey, TValue> that IDictionary<TKey, TValue> 另一个字典集 Type Parameters TKey TValue AddOrUpdateTo<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) 添加或更新键值对 public static void AddOrUpdateTo<TKey, TValue>(this IDictionary<TKey, TValue> self, IDictionary<TKey, TValue> that, Func<TKey, TValue, TValue> updateValueFactory) Parameters self IDictionary<TKey, TValue> that IDictionary<TKey, TValue> 另一个字典集 updateValueFactory Func<TKey, TValue, TValue> 更新时的操作 Type Parameters TKey TValue AddOrUpdate<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, IDictionary<TKey, TValue>) 添加或更新键值对 public static void AddOrUpdate<TKey, TValue>(this NullableConcurrentDictionary<TKey, TValue> self, IDictionary<TKey, TValue> that) Parameters self NullableConcurrentDictionary<TKey, TValue> that IDictionary<TKey, TValue> 另一个字典集 Type Parameters TKey TValue AddOrUpdate<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) 添加或更新键值对 public static void AddOrUpdate<TKey, TValue>(this NullableConcurrentDictionary<TKey, TValue> self, IDictionary<TKey, TValue> that, Func<TKey, TValue, TValue> updateValueFactory) Parameters self NullableConcurrentDictionary<TKey, TValue> that IDictionary<TKey, TValue> 另一个字典集 updateValueFactory Func<TKey, TValue, TValue> 更新时的操作 Type Parameters TKey TValue AddOrUpdate<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>) 添加或更新键值对 public static TValue AddOrUpdate<TKey, TValue>(this NullableConcurrentDictionary<TKey, TValue> self, TKey key, Func<TKey, TValue> addValueFactory, Func<TKey, TValue, TValue> updateValueFactory) Parameters self NullableConcurrentDictionary<TKey, TValue> key TKey 键 addValueFactory Func<TKey, TValue> 添加时的操作 updateValueFactory Func<TKey, TValue, TValue> 更新时的操作 Returns TValue Type Parameters TKey TValue AddOrUpdate<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, TValue>) 添加或更新键值对 public static TValue AddOrUpdate<TKey, TValue>(this NullableConcurrentDictionary<TKey, TValue> self, TKey key, TValue addValue, Func<TKey, TValue, TValue> updateValueFactory) Parameters self NullableConcurrentDictionary<TKey, TValue> key TKey 键 addValue TValue 添加时的值 updateValueFactory Func<TKey, TValue, TValue> 更新时的操作 Returns TValue Type Parameters TKey TValue AddOrUpdate<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, TKey, TValue, TValue) 添加或更新键值对 public static TValue AddOrUpdate<TKey, TValue>(this NullableConcurrentDictionary<TKey, TValue> self, TKey key, TValue addValue, TValue updateValue) Parameters self NullableConcurrentDictionary<TKey, TValue> key TKey 键 addValue TValue 添加时的值 updateValue TValue 更新时的值 Returns TValue Type Parameters TKey TValue AddOrUpdate<TKey, TValue>(NullableDictionary<TKey, TValue>, IDictionary<TKey, TValue>) 添加或更新键值对 public static void AddOrUpdate<TKey, TValue>(this NullableDictionary<TKey, TValue> self, IDictionary<TKey, TValue> that) Parameters self NullableDictionary<TKey, TValue> that IDictionary<TKey, TValue> 另一个字典集 Type Parameters TKey TValue AddOrUpdate<TKey, TValue>(NullableDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) 添加或更新键值对 public static void AddOrUpdate<TKey, TValue>(this NullableDictionary<TKey, TValue> self, IDictionary<TKey, TValue> that, Func<TKey, TValue, TValue> updateValueFactory) Parameters self NullableDictionary<TKey, TValue> that IDictionary<TKey, TValue> 另一个字典集 updateValueFactory Func<TKey, TValue, TValue> 更新时的操作 Type Parameters TKey TValue AddOrUpdate<TKey, TValue>(NullableDictionary<TKey, TValue>, TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>) 添加或更新键值对 public static TValue AddOrUpdate<TKey, TValue>(this NullableDictionary<TKey, TValue> self, TKey key, Func<TKey, TValue> addValueFactory, Func<TKey, TValue, TValue> updateValueFactory) Parameters self NullableDictionary<TKey, TValue> key TKey 键 addValueFactory Func<TKey, TValue> 添加时的操作 updateValueFactory Func<TKey, TValue, TValue> 更新时的操作 Returns TValue Type Parameters TKey TValue AddOrUpdate<TKey, TValue>(NullableDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, TValue>) 添加或更新键值对 public static TValue AddOrUpdate<TKey, TValue>(this NullableDictionary<TKey, TValue> self, TKey key, TValue addValue, Func<TKey, TValue, TValue> updateValueFactory) Parameters self NullableDictionary<TKey, TValue> key TKey 键 addValue TValue 添加时的值 updateValueFactory Func<TKey, TValue, TValue> 更新时的操作 Returns TValue Type Parameters TKey TValue AddOrUpdate<TKey, TValue>(NullableDictionary<TKey, TValue>, TKey, TValue, TValue) 添加或更新键值对 public static TValue AddOrUpdate<TKey, TValue>(this NullableDictionary<TKey, TValue> self, TKey key, TValue addValue, TValue updateValue) Parameters self NullableDictionary<TKey, TValue> key TKey 键 addValue TValue 添加时的值 updateValue TValue 更新时的值 Returns TValue Type Parameters TKey TValue AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>) 添加或更新键值对 public static void AddOrUpdate<TKey, TValue>(this IDictionary<TKey, TValue> self, IDictionary<TKey, TValue> that) Parameters self IDictionary<TKey, TValue> that IDictionary<TKey, TValue> 另一个字典集 Type Parameters TKey TValue AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) 添加或更新键值对 public static void AddOrUpdate<TKey, TValue>(this IDictionary<TKey, TValue> self, IDictionary<TKey, TValue> that, Func<TKey, TValue, TValue> updateValueFactory) Parameters self IDictionary<TKey, TValue> that IDictionary<TKey, TValue> 另一个字典集 updateValueFactory Func<TKey, TValue, TValue> 更新时的操作 Type Parameters TKey TValue AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>) 添加或更新键值对 public static TValue AddOrUpdate<TKey, TValue>(this IDictionary<TKey, TValue> self, TKey key, Func<TKey, TValue> addValueFactory, Func<TKey, TValue, TValue> updateValueFactory) Parameters self IDictionary<TKey, TValue> key TKey 键 addValueFactory Func<TKey, TValue> 添加时的操作 updateValueFactory Func<TKey, TValue, TValue> 更新时的操作 Returns TValue Type Parameters TKey TValue AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, TValue>) 添加或更新键值对 public static TValue AddOrUpdate<TKey, TValue>(this IDictionary<TKey, TValue> self, TKey key, TValue addValue, Func<TKey, TValue, TValue> updateValueFactory) Parameters self IDictionary<TKey, TValue> key TKey 键 addValue TValue 添加时的值 updateValueFactory Func<TKey, TValue, TValue> 更新时的操作 Returns TValue Type Parameters TKey TValue AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue, TValue) 添加或更新键值对 public static TValue AddOrUpdate<TKey, TValue>(this IDictionary<TKey, TValue> self, TKey key, TValue addValue, TValue updateValue) Parameters self IDictionary<TKey, TValue> key TKey 键 addValue TValue 添加时的值 updateValue TValue 更新时的值 Returns TValue Type Parameters TKey TValue AsConcurrentDictionary<TKey, TValue>(Dictionary<TKey, TValue>) 转换成并发字典集合 public static NullableConcurrentDictionary<TKey, TValue> AsConcurrentDictionary<TKey, TValue>(this Dictionary<TKey, TValue> dic) Parameters dic Dictionary<TKey, TValue> Returns NullableConcurrentDictionary<TKey, TValue> Type Parameters TKey TValue AsConcurrentDictionary<TKey, TValue>(Dictionary<TKey, TValue>, TValue) 转换成并发字典集合 public static NullableConcurrentDictionary<TKey, TValue> AsConcurrentDictionary<TKey, TValue>(this Dictionary<TKey, TValue> dic, TValue defaultValue) Parameters dic Dictionary<TKey, TValue> defaultValue TValue 键未找到时的默认值 Returns NullableConcurrentDictionary<TKey, TValue> Type Parameters TKey TValue AsDictionary<TKey, TValue>(ConcurrentDictionary<TKey, TValue>) 转换成普通字典集合 public static NullableDictionary<TKey, TValue> AsDictionary<TKey, TValue>(this ConcurrentDictionary<TKey, TValue> dic) Parameters dic ConcurrentDictionary<TKey, TValue> Returns NullableDictionary<TKey, TValue> Type Parameters TKey TValue AsDictionary<TKey, TValue>(ConcurrentDictionary<TKey, TValue>, TValue) 转换成普通字典集合 public static NullableDictionary<TKey, TValue> AsDictionary<TKey, TValue>(this ConcurrentDictionary<TKey, TValue> dic, TValue defaultValue) Parameters dic ConcurrentDictionary<TKey, TValue> defaultValue TValue 键未找到时的默认值 Returns NullableDictionary<TKey, TValue> Type Parameters TKey TValue ForEachAsync<TKey, TValue>(IDictionary<TKey, TValue>, Func<TKey, TValue, Task>) 遍历IDictionary public static Task ForEachAsync<TKey, TValue>(this IDictionary<TKey, TValue> dic, Func<TKey, TValue, Task> action) Parameters dic IDictionary<TKey, TValue> action Func<TKey, TValue, Task> 回调方法 Returns Task Type Parameters TKey TValue ForEach<TKey, TValue>(IDictionary<TKey, TValue>, Action<TKey, TValue>) 遍历IEnumerable public static void ForEach<TKey, TValue>(this IDictionary<TKey, TValue> dic, Action<TKey, TValue> action) Parameters dic IDictionary<TKey, TValue> action Action<TKey, TValue> 回调方法 Type Parameters TKey TValue GetOrAddAsync<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<Task<TValue>>) 获取或添加 public static Task<TValue> GetOrAddAsync<TKey, TValue>(this IDictionary<TKey, TValue> self, TKey key, Func<Task<TValue>> addValueFactory) Parameters self IDictionary<TKey, TValue> key TKey addValueFactory Func<Task<TValue>> Returns Task<TValue> Type Parameters TKey TValue GetOrAdd<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue) 获取或添加 public static TValue GetOrAdd<TKey, TValue>(this Dictionary<TKey, TValue> self, TKey key, TValue addValue) Parameters self Dictionary<TKey, TValue> key TKey addValue TValue Returns TValue Type Parameters TKey TValue GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TValue>) 获取或添加 public static TValue GetOrAdd<TKey, TValue>(this IDictionary<TKey, TValue> self, TKey key, Func<TValue> addValueFactory) Parameters self IDictionary<TKey, TValue> key TKey addValueFactory Func<TValue> Returns TValue Type Parameters TKey TValue ToConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) 安全的转换成字典集 public static Task<NullableConcurrentDictionary<TKey, TElement>> ToConcurrentDictionaryAsync<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, Task<TElement>> elementSelector) Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 elementSelector Func<TSource, Task<TElement>> 值选择器 Returns Task<NullableConcurrentDictionary<TKey, TElement>> Type Parameters TSource TKey TElement ToConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) 安全的转换成字典集 public static Task<NullableConcurrentDictionary<TKey, TElement>> ToConcurrentDictionaryAsync<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, Task<TElement>> elementSelector, TElement defaultValue) Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 elementSelector Func<TSource, Task<TElement>> 值选择器 defaultValue TElement 键未找到时的默认值 Returns Task<NullableConcurrentDictionary<TKey, TElement>> Type Parameters TSource TKey TElement ToConcurrentDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) 安全的转换成字典集 public static NullableConcurrentDictionary<TKey, TSource> ToConcurrentDictionary<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector) Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 Returns NullableConcurrentDictionary<TKey, TSource> Type Parameters TSource TKey ToConcurrentDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, TSource) 安全的转换成字典集 public static NullableConcurrentDictionary<TKey, TSource> ToConcurrentDictionary<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, TSource defaultValue) Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 defaultValue TSource 键未找到时的默认值 Returns NullableConcurrentDictionary<TKey, TSource> Type Parameters TSource TKey ToConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) 安全的转换成字典集 public static NullableConcurrentDictionary<TKey, TElement> ToConcurrentDictionary<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector) Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 elementSelector Func<TSource, TElement> 值选择器 Returns NullableConcurrentDictionary<TKey, TElement> Type Parameters TSource TKey TElement ToConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) 安全的转换成字典集 public static NullableConcurrentDictionary<TKey, TElement> ToConcurrentDictionary<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, TElement defaultValue) Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 elementSelector Func<TSource, TElement> 值选择器 defaultValue TElement Returns NullableConcurrentDictionary<TKey, TElement> Type Parameters TSource TKey TElement ToDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) 安全的转换成字典集 public static Task<NullableDictionary<TKey, TElement>> ToDictionarySafetyAsync<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, Task<TElement>> elementSelector) Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 elementSelector Func<TSource, Task<TElement>> 值选择器 Returns Task<NullableDictionary<TKey, TElement>> Type Parameters TSource TKey TElement ToDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) 安全的转换成字典集 public static Task<NullableDictionary<TKey, TElement>> ToDictionarySafetyAsync<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, Task<TElement>> elementSelector, TElement defaultValue) Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 elementSelector Func<TSource, Task<TElement>> 值选择器 defaultValue TElement 键未找到时的默认值 Returns Task<NullableDictionary<TKey, TElement>> Type Parameters TSource TKey TElement ToDictionarySafety<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) 安全的转换成字典集 public static NullableDictionary<TKey, TSource> ToDictionarySafety<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector) Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 Returns NullableDictionary<TKey, TSource> Type Parameters TSource TKey ToDictionarySafety<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, TSource) 安全的转换成字典集 public static NullableDictionary<TKey, TSource> ToDictionarySafety<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, TSource defaultValue) Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 defaultValue TSource 键未找到时的默认值 Returns NullableDictionary<TKey, TSource> Type Parameters TSource TKey ToDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) 安全的转换成字典集 public static NullableDictionary<TKey, TElement> ToDictionarySafety<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector) Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 elementSelector Func<TSource, TElement> 值选择器 Returns NullableDictionary<TKey, TElement> Type Parameters TSource TKey TElement ToDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) 安全的转换成字典集 public static NullableDictionary<TKey, TElement> ToDictionarySafety<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, TElement defaultValue) Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 elementSelector Func<TSource, TElement> 值选择器 defaultValue TElement 键未找到时的默认值 Returns NullableDictionary<TKey, TElement> Type Parameters TSource TKey TElement ToDisposableConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) 安全的转换成字典集 public static Task<DisposableConcurrentDictionary<TKey, TElement>> ToDisposableConcurrentDictionaryAsync<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, Task<TElement>> elementSelector) where TElement : IDisposable Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 elementSelector Func<TSource, Task<TElement>> 值选择器 Returns Task<DisposableConcurrentDictionary<TKey, TElement>> Type Parameters TSource TKey TElement ToDisposableConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) 安全的转换成字典集 public static Task<DisposableConcurrentDictionary<TKey, TElement>> ToDisposableConcurrentDictionaryAsync<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, Task<TElement>> elementSelector, TElement defaultValue) where TElement : IDisposable Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 elementSelector Func<TSource, Task<TElement>> 值选择器 defaultValue TElement 键未找到时的默认值 Returns Task<DisposableConcurrentDictionary<TKey, TElement>> Type Parameters TSource TKey TElement ToDisposableConcurrentDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) 安全的转换成字典集 public static DisposableConcurrentDictionary<TKey, TSource> ToDisposableConcurrentDictionary<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector) where TSource : IDisposable Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 Returns DisposableConcurrentDictionary<TKey, TSource> Type Parameters TSource TKey ToDisposableConcurrentDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, TSource) 安全的转换成字典集 public static DisposableConcurrentDictionary<TKey, TSource> ToDisposableConcurrentDictionary<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, TSource defaultValue) where TSource : IDisposable Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 defaultValue TSource 键未找到时的默认值 Returns DisposableConcurrentDictionary<TKey, TSource> Type Parameters TSource TKey ToDisposableConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) 安全的转换成字典集 public static DisposableConcurrentDictionary<TKey, TElement> ToDisposableConcurrentDictionary<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector) where TElement : IDisposable Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 elementSelector Func<TSource, TElement> 值选择器 Returns DisposableConcurrentDictionary<TKey, TElement> Type Parameters TSource TKey TElement ToDisposableConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) 安全的转换成字典集 public static DisposableConcurrentDictionary<TKey, TElement> ToDisposableConcurrentDictionary<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, TElement defaultValue) where TElement : IDisposable Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 elementSelector Func<TSource, TElement> 值选择器 defaultValue TElement Returns DisposableConcurrentDictionary<TKey, TElement> Type Parameters TSource TKey TElement ToDisposableDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) 安全的转换成字典集 public static Task<DisposableDictionary<TKey, TElement>> ToDisposableDictionarySafetyAsync<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, Task<TElement>> elementSelector) where TElement : IDisposable Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 elementSelector Func<TSource, Task<TElement>> 值选择器 Returns Task<DisposableDictionary<TKey, TElement>> Type Parameters TSource TKey TElement ToDisposableDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) 安全的转换成字典集 public static Task<DisposableDictionary<TKey, TElement>> ToDisposableDictionarySafetyAsync<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, Task<TElement>> elementSelector, TElement defaultValue) where TElement : IDisposable Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 elementSelector Func<TSource, Task<TElement>> 值选择器 defaultValue TElement 键未找到时的默认值 Returns Task<DisposableDictionary<TKey, TElement>> Type Parameters TSource TKey TElement ToDisposableDictionarySafety<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) 安全的转换成字典集 public static DisposableDictionary<TKey, TSource> ToDisposableDictionarySafety<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector) where TSource : IDisposable Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 Returns DisposableDictionary<TKey, TSource> Type Parameters TSource TKey ToDisposableDictionarySafety<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, TSource) 安全的转换成字典集 public static DisposableDictionary<TKey, TSource> ToDisposableDictionarySafety<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, TSource defaultValue) where TSource : IDisposable Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 defaultValue TSource 键未找到时的默认值 Returns DisposableDictionary<TKey, TSource> Type Parameters TSource TKey ToDisposableDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) 安全的转换成字典集 public static DisposableDictionary<TKey, TElement> ToDisposableDictionarySafety<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector) where TElement : IDisposable Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 elementSelector Func<TSource, TElement> 值选择器 Returns DisposableDictionary<TKey, TElement> Type Parameters TSource TKey TElement ToDisposableDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) 安全的转换成字典集 public static DisposableDictionary<TKey, TElement> ToDisposableDictionarySafety<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector, TElement defaultValue) where TElement : IDisposable Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 elementSelector Func<TSource, TElement> 值选择器 defaultValue TElement 键未找到时的默认值 Returns DisposableDictionary<TKey, TElement> Type Parameters TSource TKey TElement ToLookupAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) 转换为Lookup public static Task<LookupX<TKey, TElement>> ToLookupAsync<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, Task<TElement>> elementSelector) Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 elementSelector Func<TSource, Task<TElement>> 值选择器 Returns Task<LookupX<TKey, TElement>> Type Parameters TSource TKey TElement ToLookupX<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) 转换为Lookup public static LookupX<TKey, TSource> ToLookupX<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector) Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 Returns LookupX<TKey, TSource> Type Parameters TSource TKey ToLookupX<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) 转换为Lookup public static LookupX<TKey, TElement> ToLookupX<TSource, TKey, TElement>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector, Func<TSource, TElement> elementSelector) Parameters source IEnumerable<TSource> keySelector Func<TSource, TKey> 键选择器 elementSelector Func<TSource, TElement> 值选择器 Returns LookupX<TKey, TElement> Type Parameters TSource TKey TElement"
  },
  "api/GameFrameX.Utility.Extensions.IEnumerableExtensions.html": {
    "href": "api/GameFrameX.Utility.Extensions.IEnumerableExtensions.html",
    "title": "Class IEnumerableExtensions | GameFrameX.Server",
    "keywords": "Class IEnumerableExtensions Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll public static class IEnumerableExtensions Inheritance object IEnumerableExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddRangeIfNotContains<T>(ICollection<T>, params T[]) 向集合中添加不重复的元素 public static void AddRangeIfNotContains<T>(this ICollection<T> self, params T[] values) Parameters self ICollection<T> 要添加元素的集合 values T[] 要添加的元素数组 Type Parameters T 集合中的元素类型 AddRangeIf<T>(ConcurrentBag<T>, Func<T, bool>, params T[]) 向并发袋中添加符合条件的多个元素 public static void AddRangeIf<T>(this ConcurrentBag<T> self, Func<T, bool> predicate, params T[] values) Parameters self ConcurrentBag<T> 要添加元素的并发袋 predicate Func<T, bool> 用于筛选元素的条件函数 values T[] 要添加的元素数组 Type Parameters T 并发袋中的元素类型 AddRangeIf<T>(ConcurrentQueue<T>, Func<T, bool>, params T[]) 向并发队列中添加符合条件的多个元素 public static void AddRangeIf<T>(this ConcurrentQueue<T> self, Func<T, bool> predicate, params T[] values) Parameters self ConcurrentQueue<T> 要添加元素的并发队列 predicate Func<T, bool> 用于筛选元素的条件函数 values T[] 要添加的元素数组 Type Parameters T 并发队列中的元素类型 AddRangeIf<T>(ICollection<T>, Func<T, bool>, params T[]) 向集合中添加符合条件的多个元素 public static void AddRangeIf<T>(this ICollection<T> self, Func<T, bool> predicate, params T[] values) Parameters self ICollection<T> 要添加元素的集合 predicate Func<T, bool> 用于筛选元素的条件函数 values T[] 要添加的元素数组 Type Parameters T 集合中的元素类型 AddRange<T>(ConcurrentBag<T>, params T[]) 向并发袋中添加多个元素 public static void AddRange<T>(this ConcurrentBag<T> self, params T[] values) Parameters self ConcurrentBag<T> 要添加元素的并发袋 values T[] 要添加的元素数组 Type Parameters T 并发袋中的元素类型 AddRange<T>(ConcurrentQueue<T>, params T[]) 向并发队列中添加多个元素 public static void AddRange<T>(this ConcurrentQueue<T> self, params T[] values) Parameters self ConcurrentQueue<T> 要添加元素的并发队列 values T[] 要添加的元素数组 Type Parameters T 并发队列中的元素类型 AddRange<T>(ICollection<T>, IEnumerable<T>) 向集合中添加多个元素 public static void AddRange<T>(this ICollection<T> self, IEnumerable<T> values) Parameters self ICollection<T> 要添加元素的集合 values IEnumerable<T> 要添加的元素集合 Type Parameters T 集合中的元素类型 AddRange<T>(ICollection<T>, params T[]) 向集合中添加多个元素 public static void AddRange<T>(this ICollection<T> slef, params T[] values) Parameters slef ICollection<T> 要添加元素的集合 values T[] 要添加的元素数组 Type Parameters T 集合中的元素类型 AsNotNull<T>(IEnumerable<T>) 将集合声明为非空集合，如果集合为 null，则返回一个新的空集合。 public static IEnumerable<T> AsNotNull<T>(this IEnumerable<T> list) Parameters list IEnumerable<T> 要检查的集合。 Returns IEnumerable<T> 非空集合。 Type Parameters T 集合中元素的类型。 AsNotNull<T>(List<T>) 将列表声明为非空列表，如果列表为 null，则返回一个新的空列表。 public static List<T> AsNotNull<T>(this List<T> list) Parameters list List<T> 要检查的列表。 Returns List<T> 非空列表。 Type Parameters T 列表中元素的类型。 ChangeIndex<T>(IList<T>, Func<T, bool>, int) 改变集合中满足条件的元素的索引位置。 public static IList<T> ChangeIndex<T>(this IList<T> list, Func<T, bool> condition, int index) Parameters list IList<T> 要操作的集合。 condition Func<T, bool> 用于定位元素的条件表达式。 index int 新的索引位置。 Returns IList<T> 操作后的集合。 Type Parameters T 集合中元素的类型。 ChangeIndex<T>(IList<T>, T, int) 改变集合中指定元素的索引位置。 public static IList<T> ChangeIndex<T>(this IList<T> list, T item, int index) Parameters list IList<T> 要操作的集合。 item T 要改变索引位置的元素。 index int 新的索引位置。 Returns IList<T> 操作后的集合。 Type Parameters T 集合中元素的类型。 Exceptions ArgumentNullException 如果元素为 null，则抛出此异常。 CompareChangesPlus<T1, T2>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, bool>) 对比两个集合，找出新增的、删除的和修改的项，并返回修改项的详细信息。 public static (List<T1> adds, List<T2> remove, List<(T1 first, T2 second)> updates) CompareChangesPlus<T1, T2>(this IEnumerable<T1> first, IEnumerable<T2> second, Func<T1, T2, bool> condition) Parameters first IEnumerable<T1> 第一个集合。 second IEnumerable<T2> 第二个集合。 condition Func<T1, T2, bool> 用于比较两个元素的条件。 Returns (List<T1> adds, List<T2> remove, List<(T1 first, T2 second)> updates) 一个元组，包含新增的项、删除的项和修改项的详细信息。 Type Parameters T1 第一个集合中元素的类型。 T2 第二个集合中元素的类型。 CompareChanges<T1, T2>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, bool>) 对比两个集合，找出新增的、删除的和修改的项。 public static (List<T1> adds, List<T2> remove, List<T1> updates) CompareChanges<T1, T2>(this IEnumerable<T1> first, IEnumerable<T2> second, Func<T1, T2, bool> condition) Parameters first IEnumerable<T1> 第一个集合。 second IEnumerable<T2> 第二个集合。 condition Func<T1, T2, bool> 用于比较两个元素的条件。 Returns (List<T1> adds, List<T2> remove, List<T1> updates) 一个元组，包含新增的项、删除的项和修改的项。 Type Parameters T1 第一个集合中元素的类型。 T2 第二个集合中元素的类型。 DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) 按字段去重 public static IEnumerable<TSource> DistinctBy<TSource, TKey>(this IEnumerable<TSource> source, Func<TSource, TKey> keySelector) Parameters source IEnumerable<TSource> 集合 keySelector Func<TSource, TKey> 用于从每个元素中提取键的函数 Returns IEnumerable<TSource> 返回去重后的集合 Type Parameters TSource 集合的元素类型 TKey 键的选择器返回的键类型 ExceptBy<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, bool>) 按字段属性判等取差集 public static IEnumerable<TFirst> ExceptBy<TFirst, TSecond>(this IEnumerable<TFirst> first, IEnumerable<TSecond> second, Func<TFirst, TSecond, bool> condition) Parameters first IEnumerable<TFirst> 第一个集合 second IEnumerable<TSecond> 第二个集合 condition Func<TFirst, TSecond, bool> 用于判断两个元素是否相等的条件 Returns IEnumerable<TFirst> 返回第一个集合中不在第二个集合中的元素 Type Parameters TFirst 第一个集合的元素类型 TSecond 第二个集合的元素类型 ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>) 按字段属性判等取差集 public static IEnumerable<TSource> ExceptBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TKey> second, Func<TSource, TKey> keySelector) Parameters first IEnumerable<TSource> 第一个集合 second IEnumerable<TKey> 第二个集合 keySelector Func<TSource, TKey> 从源集合中的每个元素中提取键的函数 Returns IEnumerable<TSource> 一个包含第一个集合中存在但第二个集合中不存在的元素的新集合 Type Parameters TSource 源集合中的元素类型 TKey 键的选择器返回的类型 ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>, IEqualityComparer<TKey>) 按字段属性判等取差集 public static IEnumerable<TSource> ExceptBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TKey> second, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer) Parameters first IEnumerable<TSource> 第一个集合 second IEnumerable<TKey> 第二个集合 keySelector Func<TSource, TKey> 从源集合中的每个元素中提取键的函数 comparer IEqualityComparer<TKey> 用于比较键的相等比较器，如果为 null，则使用默认的相等比较器 Returns IEnumerable<TSource> 一个包含第一个集合中存在但第二个集合中不存在的元素的新集合 Type Parameters TSource 源集合中的元素类型 TKey 键的选择器返回的类型 Exceptions ArgumentNullException 如果 first、second 或 keySelector 为 null，则抛出此异常 ForAsync<T>(IEnumerable<T>, Func<T, int, Task>, int, CancellationToken) 异步遍历集合中的每个元素，并执行指定的操作。 public static Task ForAsync<T>(this IEnumerable<T> source, Func<T, int, Task> selector, int maxParallelCount, CancellationToken cancellationToken = default) Parameters source IEnumerable<T> 要遍历的集合。 selector Func<T, int, Task> 要对每个元素执行的操作，返回一个任务。 maxParallelCount int 最大并行数。 cancellationToken CancellationToken 取消令牌，用于取消操作。 Returns Task 一个任务，表示异步操作。 Type Parameters T 集合中元素的类型。 ForAsync<T>(IEnumerable<T>, Func<T, int, Task>, CancellationToken) 异步遍历集合中的每个元素，并执行指定的操作。 public static Task ForAsync<T>(this IEnumerable<T> source, Func<T, int, Task> selector, CancellationToken cancellationToken = default) Parameters source IEnumerable<T> 要遍历的集合。 selector Func<T, int, Task> 要对每个元素执行的操作，返回一个任务。 cancellationToken CancellationToken 取消令牌，用于取消操作。 Returns Task 一个任务，表示异步操作。 Type Parameters T 集合中元素的类型。 ForEach<T>(IEnumerable<T>, Action<T>) 遍历IEnumerable集合，并对每个元素执行操作 public static void ForEach<T>(this IEnumerable<T> self, Action<T> action) Parameters self IEnumerable<T> 当前集合 action Action<T> 要执行的操作 Type Parameters T 集合中的元素类型 ForeachAsync<T>(IEnumerable<T>, Func<T, Task>, int, CancellationToken) 异步遍历IEnumerable集合，并对每个元素执行异步操作 public static Task ForeachAsync<T>(this IEnumerable<T> source, Func<T, Task> action, int maxParallelCount, CancellationToken cancellationToken = default) Parameters source IEnumerable<T> 当前集合 action Func<T, Task> 要执行的异步操作 maxParallelCount int 最大并行数 cancellationToken CancellationToken 取消令牌 Returns Task 任务对象 Type Parameters T 集合中的元素类型 ForeachAsync<T>(IEnumerable<T>, Func<T, Task>, CancellationToken) 异步遍历IEnumerable集合，并对每个元素执行异步操作 public static Task ForeachAsync<T>(this IEnumerable<T> source, Func<T, Task> action, CancellationToken cancellationToken = default) Parameters source IEnumerable<T> 当前集合 action Func<T, Task> 要执行的异步操作 cancellationToken CancellationToken 取消令牌 Returns Task 任务对象 Type Parameters T 集合中的元素类型 InsertAfter<T>(IList<T>, Func<T, bool>, T) 在满足条件的元素之后添加元素 public static void InsertAfter<T>(this IList<T> self, Func<T, bool> condition, T value) Parameters self IList<T> 当前集合 condition Func<T, bool> 判断条件 value T 要插入的值 Type Parameters T 集合中的元素类型 InsertAfter<T>(IList<T>, int, T) 在指定索引位置之后添加元素 public static void InsertAfter<T>(this IList<T> list, int index, T value) Parameters list IList<T> 当前集合 index int 索引位置 value T 要插入的值 Type Parameters T 集合中的元素类型 IntersectAll<T>(IEnumerable<IEnumerable<T>>) 多个集合取交集元素 public static IEnumerable<T> IntersectAll<T>(this IEnumerable<IEnumerable<T>> source) Parameters source IEnumerable<IEnumerable<T>> 多个集合的序列 Returns IEnumerable<T> 返回所有集合的交集元素 Type Parameters T 集合的元素类型 IntersectAll<T>(IEnumerable<IEnumerable<T>>, IEqualityComparer<T>) 多个集合取交集元素 public static IEnumerable<T> IntersectAll<T>(this IEnumerable<IEnumerable<T>> source, IEqualityComparer<T> comparer) Parameters source IEnumerable<IEnumerable<T>> 多个集合的序列 comparer IEqualityComparer<T> 用于比较元素的比较器 Returns IEnumerable<T> 返回所有集合的交集元素 Type Parameters T 集合的元素类型 IntersectAll<TSource, TKey>(IEnumerable<IEnumerable<TSource>>, Func<TSource, TKey>) 多个集合取交集元素 public static IEnumerable<TSource> IntersectAll<TSource, TKey>(this IEnumerable<IEnumerable<TSource>> source, Func<TSource, TKey> keySelector) Parameters source IEnumerable<IEnumerable<TSource>> 多个集合的序列 keySelector Func<TSource, TKey> 用于从每个元素中提取键的函数 Returns IEnumerable<TSource> 返回所有集合的交集元素 Type Parameters TSource 集合的元素类型 TKey 键的选择器返回的键类型 IntersectAll<TSource, TKey>(IEnumerable<IEnumerable<TSource>>, Func<TSource, TKey>, IEqualityComparer<TKey>) 多个集合取交集元素 public static IEnumerable<TSource> IntersectAll<TSource, TKey>(this IEnumerable<IEnumerable<TSource>> source, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer) Parameters source IEnumerable<IEnumerable<TSource>> 多个集合的序列 keySelector Func<TSource, TKey> 用于从每个元素中提取键的函数 comparer IEqualityComparer<TKey> 用于比较键的比较器 Returns IEnumerable<TSource> 返回所有集合的交集元素 Type Parameters TSource 集合的元素类型 TKey 键的选择器返回的键类型 IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) 按字段属性判等取交集 public static IEnumerable<TSource> IntersectBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TSource> second, Func<TSource, TKey> keySelector) Parameters first IEnumerable<TSource> 第一个集合 second IEnumerable<TSource> 第二个集合 keySelector Func<TSource, TKey> 用于从每个元素中提取键的函数 Returns IEnumerable<TSource> 返回两个集合中具有相同键的交集元素 Type Parameters TSource 集合的元素类型 TKey 键的选择器返回的键类型 IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) 按字段属性判等取交集 public static IEnumerable<TSource> IntersectBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TSource> second, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer) Parameters first IEnumerable<TSource> 第一个集合 second IEnumerable<TSource> 第二个集合 keySelector Func<TSource, TKey> 用于从每个元素中提取键的函数 comparer IEqualityComparer<TKey> 用于比较键的比较器 Returns IEnumerable<TSource> 返回两个集合中具有相同键的交集元素 Type Parameters TSource 集合的元素类型 TKey 键的选择器返回的键类型 IntersectBy<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, bool>) 按字段属性判等取交集 public static IEnumerable<TFirst> IntersectBy<TFirst, TSecond>(this IEnumerable<TFirst> first, IEnumerable<TSecond> second, Func<TFirst, TSecond, bool> condition) Parameters first IEnumerable<TFirst> 第一个集合 second IEnumerable<TSecond> 第二个集合 condition Func<TFirst, TSecond, bool> 用于判断两个元素是否相等的条件 Returns IEnumerable<TFirst> 返回两个集合中满足条件的交集元素 Type Parameters TFirst 第一个集合的元素类型 TSecond 第二个集合的元素类型 IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>) 按字段属性判等取交集 public static IEnumerable<TSource> IntersectBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TKey> second, Func<TSource, TKey> keySelector) Parameters first IEnumerable<TSource> 第一个集合 second IEnumerable<TKey> 第二个集合 keySelector Func<TSource, TKey> 用于从每个元素中提取键的函数 Returns IEnumerable<TSource> 返回两个集合中具有相同键的交集元素 Type Parameters TSource 集合的元素类型 TKey 键的选择器返回的键类型 IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>, IEqualityComparer<TKey>) 按字段属性判等取交集 public static IEnumerable<TSource> IntersectBy<TSource, TKey>(this IEnumerable<TSource> first, IEnumerable<TKey> second, Func<TSource, TKey> keySelector, IEqualityComparer<TKey> comparer) Parameters first IEnumerable<TSource> 第一个集合 second IEnumerable<TKey> 第二个集合 keySelector Func<TSource, TKey> 用于从每个元素中提取键的函数 comparer IEqualityComparer<TKey> 用于比较键的比较器 Returns IEnumerable<TSource> 返回两个集合中具有相同键的交集元素 Type Parameters TSource 集合的元素类型 TKey 键的选择器返回的键类型 MaxOrDefault<TSource>(IEnumerable<TSource>) 获取集合中的最大值，如果集合为空则返回默认值。 public static TSource MaxOrDefault<TSource>(this IEnumerable<TSource> source) Parameters source IEnumerable<TSource> 要查询的集合。 Returns TSource 集合中的最大值，如果集合为空则返回默认值。 Type Parameters TSource 集合中元素的类型。 MaxOrDefault<TSource>(IEnumerable<TSource>, TSource) 获取集合中的最大值，如果集合为空则返回指定的默认值。 public static TSource MaxOrDefault<TSource>(this IEnumerable<TSource> source, TSource defaultValue) Parameters source IEnumerable<TSource> 要查询的集合。 defaultValue TSource 集合为空时返回的默认值。 Returns TSource 集合中的最大值，如果集合为空则返回指定的默认值。 Type Parameters TSource 集合中元素的类型。 MaxOrDefault<TSource>(IQueryable<TSource>) 获取集合中的最大值，如果集合为空则返回默认值。 public static TSource MaxOrDefault<TSource>(this IQueryable<TSource> source) Parameters source IQueryable<TSource> 要查询的集合。 Returns TSource 集合中的最大值，如果集合为空则返回默认值。 Type Parameters TSource 集合中元素的类型。 MaxOrDefault<TSource>(IQueryable<TSource>, TSource) 获取集合中的最大值，如果集合为空则返回指定的默认值。 public static TSource MaxOrDefault<TSource>(this IQueryable<TSource> source, TSource defaultValue) Parameters source IQueryable<TSource> 要查询的集合。 defaultValue TSource 集合为空时返回的默认值。 Returns TSource 集合中的最大值，如果集合为空则返回指定的默认值。 Type Parameters TSource 集合中元素的类型。 MaxOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) 获取集合中的最大值，如果集合为空则返回默认值。 public static TResult MaxOrDefault<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector) Parameters source IEnumerable<TSource> 要查询的集合。 selector Func<TSource, TResult> 用于从每个元素中提取值的函数。 Returns TResult 集合中的最大值，如果集合为空则返回默认值。 Type Parameters TSource 集合中元素的类型。 TResult 结果的类型。 MaxOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>, TResult) 获取集合中的最大值，如果集合为空则返回指定的默认值。 public static TResult MaxOrDefault<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector, TResult defaultValue) Parameters source IEnumerable<TSource> 要查询的集合。 selector Func<TSource, TResult> 用于从每个元素中提取值的函数。 defaultValue TResult 集合为空时返回的默认值。 Returns TResult 集合中的最大值，如果集合为空则返回指定的默认值。 Type Parameters TSource 集合中元素的类型。 TResult 结果的类型。 MaxOrDefault<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>) 获取集合中的最大值，如果集合为空则返回默认值。 public static TResult MaxOrDefault<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector) Parameters source IQueryable<TSource> 要查询的集合。 selector Expression<Func<TSource, TResult>> 用于从每个元素中提取值的函数。 Returns TResult 集合中的最大值，如果集合为空则返回默认值。 Type Parameters TSource 集合中元素的类型。 TResult 结果的类型。 MaxOrDefault<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, TResult) 获取集合中的最大值，如果集合为空则返回指定的默认值。 public static TResult MaxOrDefault<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, TResult defaultValue) Parameters source IQueryable<TSource> 要查询的集合。 selector Expression<Func<TSource, TResult>> 用于从每个元素中提取值的函数。 defaultValue TResult 集合为空时返回的默认值。 Returns TResult 集合中的最大值，如果集合为空则返回指定的默认值。 Type Parameters TSource 集合中元素的类型。 TResult 结果的类型。 MinOrDefault<TSource>(IEnumerable<TSource>) 获取序列中的最小值，如果序列为空，则返回默认值。 public static TSource MinOrDefault<TSource>(this IEnumerable<TSource> source) Parameters source IEnumerable<TSource> 要从中获取最小值的序列。 Returns TSource 序列中的最小值，如果序列为空则返回默认值。 Type Parameters TSource 序列中元素的类型。 MinOrDefault<TSource>(IEnumerable<TSource>, TSource) 获取序列中的最小值，如果序列为空，则返回指定的默认值。 public static TSource MinOrDefault<TSource>(this IEnumerable<TSource> source, TSource defaultValue) Parameters source IEnumerable<TSource> 要从中获取最小值的序列。 defaultValue TSource 如果序列为空时返回的默认值。 Returns TSource 序列中的最小值，如果序列为空则返回指定的默认值。 Type Parameters TSource 序列中元素的类型。 MinOrDefault<TSource>(IQueryable<TSource>) 获取集合中的最小值，如果集合为空则返回默认值。 public static TSource MinOrDefault<TSource>(this IQueryable<TSource> source) Parameters source IQueryable<TSource> 要查询的集合。 Returns TSource 集合中的最小值，如果集合为空则返回默认值。 Type Parameters TSource 集合中元素的类型。 MinOrDefault<TSource>(IQueryable<TSource>, TSource) 获取集合中的最小值，如果集合为空则返回指定的默认值。 public static TSource MinOrDefault<TSource>(this IQueryable<TSource> source, TSource defaultValue) Parameters source IQueryable<TSource> 要查询的集合。 defaultValue TSource 集合为空时返回的默认值。 Returns TSource 集合中的最小值，如果集合为空则返回指定的默认值。 Type Parameters TSource 集合中元素的类型。 MinOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) 获取集合中的最小值，如果集合为空则返回默认值。 public static TResult MinOrDefault<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector) Parameters source IEnumerable<TSource> 要查询的集合。 selector Func<TSource, TResult> 用于从每个元素中提取值的函数。 Returns TResult 集合中的最小值，如果集合为空则返回默认值。 Type Parameters TSource 集合中元素的类型。 TResult 结果的类型。 MinOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>, TResult) 获取集合中的最小值，如果集合为空则返回指定的默认值。 public static TResult MinOrDefault<TSource, TResult>(this IEnumerable<TSource> source, Func<TSource, TResult> selector, TResult defaultValue) Parameters source IEnumerable<TSource> 要查询的集合。 selector Func<TSource, TResult> 用于从每个元素中提取值的函数。 defaultValue TResult 集合为空时返回的默认值。 Returns TResult 集合中的最小值，如果集合为空则返回指定的默认值。 Type Parameters TSource 集合中元素的类型。 TResult 结果的类型。 MinOrDefault<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>) 获取集合中的最小值，如果集合为空则返回默认值。 public static TResult MinOrDefault<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector) Parameters source IQueryable<TSource> 要查询的集合。 selector Expression<Func<TSource, TResult>> 用于从每个元素中提取值的函数。 Returns TResult 集合中的最小值，如果集合为空则返回默认值。 Type Parameters TSource 集合中元素的类型。 TResult 结果的类型。 MinOrDefault<TSource, TResult>(IQueryable<TSource>, Expression<Func<TSource, TResult>>, TResult) 获取集合中的最小值，如果集合为空则返回指定的默认值。 public static TResult MinOrDefault<TSource, TResult>(this IQueryable<TSource> source, Expression<Func<TSource, TResult>> selector, TResult defaultValue) Parameters source IQueryable<TSource> 要查询的集合。 selector Expression<Func<TSource, TResult>> 用于从每个元素中提取值的函数。 defaultValue TResult 集合为空时返回的默认值。 Returns TResult 集合中的最小值，如果集合为空则返回指定的默认值。 Type Parameters TSource 集合中元素的类型。 TResult 结果的类型。 OrderByRandom<T>(IEnumerable<T>) 按随机顺序对序列进行排序。 public static IOrderedEnumerable<T> OrderByRandom<T>(this IEnumerable<T> source) Parameters source IEnumerable<T> 要排序的序列。 Returns IOrderedEnumerable<T> 按随机顺序排序后的序列。 Type Parameters T 序列中元素的类型。 RemoveWhere<T>(ICollection<T>, Func<T, bool>) 从集合中移除符合条件的元素 public static void RemoveWhere<T>(this ICollection<T> self, Func<T, bool> where) Parameters self ICollection<T> 要移除元素的集合 where Func<T, bool> 用于筛选要移除的元素的条件函数 Type Parameters T 集合中的元素类型 SelectAsync<T, TResult>(IEnumerable<T>, Func<T, int, Task<TResult>>) 异步选择集合中的每个元素，并返回结果数组 public static Task<TResult[]> SelectAsync<T, TResult>(this IEnumerable<T> source, Func<T, int, Task<TResult>> selector) Parameters source IEnumerable<T> 源集合 selector Func<T, int, Task<TResult>> 选择器函数 Returns Task<TResult[]> 结果数组 Type Parameters T 源集合中的元素类型 TResult 结果数组中的元素类型 SelectAsync<T, TResult>(IEnumerable<T>, Func<T, int, Task<TResult>>, int) 异步选择集合中的每个元素，并返回结果列表 public static Task<List<TResult>> SelectAsync<T, TResult>(this IEnumerable<T> source, Func<T, int, Task<TResult>> selector, int maxParallelCount) Parameters source IEnumerable<T> 源集合 selector Func<T, int, Task<TResult>> 选择器函数 maxParallelCount int 最大并行数 Returns Task<List<TResult>> 结果列表 Type Parameters T 源集合中的元素类型 TResult 结果列表中的元素类型 SelectAsync<T, TResult>(IEnumerable<T>, Func<T, Task<TResult>>) 异步选择集合中的每个元素，并返回结果数组 public static Task<TResult[]> SelectAsync<T, TResult>(this IEnumerable<T> source, Func<T, Task<TResult>> selector) Parameters source IEnumerable<T> 源集合 selector Func<T, Task<TResult>> 选择器函数 Returns Task<TResult[]> 结果数组 Type Parameters T 源集合中的元素类型 TResult 结果数组中的元素类型 SelectAsync<T, TResult>(IEnumerable<T>, Func<T, Task<TResult>>, int) 异步选择集合中的每个元素，并返回结果列表 public static Task<List<TResult>> SelectAsync<T, TResult>(this IEnumerable<T> source, Func<T, Task<TResult>> selector, int maxParallelCount) Parameters source IEnumerable<T> 源集合 selector Func<T, Task<TResult>> 选择器函数 maxParallelCount int 最大并行数 Returns Task<List<TResult>> 结果列表 Type Parameters T 源集合中的元素类型 TResult 结果列表中的元素类型 SequenceEqual<T>(IEnumerable<T>, IEnumerable<T>, Func<T, T, bool>) 判断两个序列是否相等，使用自定义的比较条件。 public static bool SequenceEqual<T>(this IEnumerable<T> first, IEnumerable<T> second, Func<T, T, bool> condition) Parameters first IEnumerable<T> 第一个序列。 second IEnumerable<T> 第二个序列。 condition Func<T, T, bool> 用于比较两个元素的条件。 Returns bool 如果两个序列相等则返回 true，否则返回 false。 Type Parameters T 序列中元素的类型。 SequenceEqual<T1, T2>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, bool>) 判断两个不同类型的序列是否相等，使用自定义的比较条件。 public static bool SequenceEqual<T1, T2>(this IEnumerable<T1> first, IEnumerable<T2> second, Func<T1, T2, bool> condition) Parameters first IEnumerable<T1> 第一个序列。 second IEnumerable<T2> 第二个序列。 condition Func<T1, T2, bool> 用于比较两个元素的条件。 Returns bool 如果两个序列相等则返回 true，否则返回 false。 Type Parameters T1 第一个序列中元素的类型。 T2 第二个序列中元素的类型。 StandardDeviation(IEnumerable<double>) 计算序列的标准差。 public static double StandardDeviation(this IEnumerable<double> source) Parameters source IEnumerable<double> 要计算标准差的双精度浮点数序列。 Returns double 序列的标准差。 ToHashSet<T, TResult>(IEnumerable<T>, Func<T, TResult>) 将集合转换为HashSet public static HashSet<TResult> ToHashSet<T, TResult>(this IEnumerable<T> source, Func<T, TResult> selector) Parameters source IEnumerable<T> 源集合 selector Func<T, TResult> 选择器函数 Returns HashSet<TResult> 转换后的HashSet Type Parameters T 源集合中的元素类型 TResult 目标HashSet中的元素类型 WhereIf<T>(IEnumerable<T>, bool, Func<T, bool>) 如果满足条件，则执行筛选操作。 public static IEnumerable<T> WhereIf<T>(this IEnumerable<T> source, bool condition, Func<T, bool> where) Parameters source IEnumerable<T> 要筛选的集合。 condition bool 决定是否执行筛选的布尔条件。 where Func<T, bool> 用于筛选的条件表达式。 Returns IEnumerable<T> 筛选后的集合，如果条件不满足则返回原集合。 Type Parameters T 集合中元素的类型。 WhereIf<T>(IEnumerable<T>, Func<bool>, Func<T, bool>) 如果满足条件，则执行筛选操作。 public static IEnumerable<T> WhereIf<T>(this IEnumerable<T> source, Func<bool> condition, Func<T, bool> where) Parameters source IEnumerable<T> 要筛选的集合。 condition Func<bool> 决定是否执行筛选的布尔条件表达式。 where Func<T, bool> 用于筛选的条件表达式。 Returns IEnumerable<T> 筛选后的集合，如果条件不满足则返回原集合。 Type Parameters T 集合中元素的类型。 WhereIf<T>(IQueryable<T>, bool, Expression<Func<T, bool>>) 如果满足条件，则执行筛选操作。 public static IQueryable<T> WhereIf<T>(this IQueryable<T> source, bool condition, Expression<Func<T, bool>> where) Parameters source IQueryable<T> 要筛选的查询集合。 condition bool 决定是否执行筛选的布尔条件。 where Expression<Func<T, bool>> 用于筛选的条件表达式。 Returns IQueryable<T> 筛选后的查询集合，如果条件不满足则返回原查询集合。 Type Parameters T 集合中元素的类型。 WhereIf<T>(IQueryable<T>, Func<bool>, Expression<Func<T, bool>>) 如果满足条件，则执行筛选操作。 public static IQueryable<T> WhereIf<T>(this IQueryable<T> source, Func<bool> condition, Expression<Func<T, bool>> where) Parameters source IQueryable<T> 要筛选的查询集合。 condition Func<bool> 决定是否执行筛选的布尔条件表达式。 where Expression<Func<T, bool>> 用于筛选的条件表达式。 Returns IQueryable<T> 筛选后的查询集合，如果条件不满足则返回原查询集合。 Type Parameters T 集合中元素的类型。"
  },
  "api/GameFrameX.Utility.Extensions.LookupX-2.html": {
    "href": "api/GameFrameX.Utility.Extensions.LookupX-2.html",
    "title": "Class LookupX<TKey, TElement> | GameFrameX.Server",
    "keywords": "Class LookupX<TKey, TElement> Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll 表示键和元素之间的多对多关系的集合。 public class LookupX<TKey, TElement> : IEnumerable<List<TElement>>, IEnumerable Type Parameters TKey 键的类型。 TElement 元素的类型。 Inheritance object LookupX<TKey, TElement> Implements IEnumerable<List<TElement>> IEnumerable Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) IEnumerableExtensions.IntersectAll<T>(IEnumerable<IEnumerable<T>>) IEnumerableExtensions.IntersectAll<T>(IEnumerable<IEnumerable<T>>, IEqualityComparer<T>) IEnumerableExtensions.IntersectAll<TSource, TKey>(IEnumerable<IEnumerable<TSource>>, Func<TSource, TKey>) IEnumerableExtensions.IntersectAll<TSource, TKey>(IEnumerable<IEnumerable<TSource>>, Func<TSource, TKey>, IEqualityComparer<TKey>) IDictionaryExtensions.ToConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, TSource) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToDictionarySafety<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IDictionaryExtensions.ToDictionarySafety<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, TSource) IDictionaryExtensions.ToDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToDisposableConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToDisposableConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToDisposableConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToDisposableConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToDisposableDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToDisposableDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToDisposableDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToDisposableDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToLookupAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToLookupX<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IDictionaryExtensions.ToLookupX<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IEnumerableExtensions.AsNotNull<T>(IEnumerable<T>) IEnumerableExtensions.CompareChangesPlus<T1, T2>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, bool>) IEnumerableExtensions.CompareChanges<T1, T2>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, bool>) IEnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IEnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>) IEnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>, IEqualityComparer<TKey>) IEnumerableExtensions.ExceptBy<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, bool>) IEnumerableExtensions.ForAsync<T>(IEnumerable<T>, Func<T, int, Task>, int, CancellationToken) IEnumerableExtensions.ForAsync<T>(IEnumerable<T>, Func<T, int, Task>, CancellationToken) IEnumerableExtensions.ForEach<T>(IEnumerable<T>, Action<T>) IEnumerableExtensions.ForeachAsync<T>(IEnumerable<T>, Func<T, Task>, int, CancellationToken) IEnumerableExtensions.ForeachAsync<T>(IEnumerable<T>, Func<T, Task>, CancellationToken) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>, IEqualityComparer<TKey>) IEnumerableExtensions.IntersectBy<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, bool>) IEnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>) IEnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, TSource) IEnumerableExtensions.MaxOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) IEnumerableExtensions.MaxOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>, TResult) IEnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>) IEnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, TSource) IEnumerableExtensions.MinOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) IEnumerableExtensions.MinOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>, TResult) IEnumerableExtensions.OrderByRandom<T>(IEnumerable<T>) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, int, Task<TResult>>) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, int, Task<TResult>>, int) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, Task<TResult>>) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, Task<TResult>>, int) IEnumerableExtensions.SequenceEqual<T>(IEnumerable<T>, IEnumerable<T>, Func<T, T, bool>) IEnumerableExtensions.SequenceEqual<T1, T2>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, bool>) IEnumerableExtensions.ToHashSet<T, TResult>(IEnumerable<T>, Func<T, TResult>) IEnumerableExtensions.WhereIf<T>(IEnumerable<T>, bool, Func<T, bool>) IEnumerableExtensions.WhereIf<T>(IEnumerable<T>, Func<bool>, Func<T, bool>) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors LookupX(ConcurrentDictionary<TKey, List<TElement>>) 使用指定的并发字典初始化一个新的 LookupX<TKey, TElement> 实例。 public LookupX(ConcurrentDictionary<TKey, List<TElement>> dic) Parameters dic ConcurrentDictionary<TKey, List<TElement>> 用于存储键和元素列表的并发字典。 LookupX(IDictionary<TKey, List<TElement>>) 使用指定的字典初始化一个新的 LookupX<TKey, TElement> 实例。 public LookupX(IDictionary<TKey, List<TElement>> dic) Parameters dic IDictionary<TKey, List<TElement>> 用于存储键和元素列表的字典。 Properties Count 获取集合中的键值对数量。 public int Count { get; } Property Value int this[TKey] 获取与指定键关联的元素列表。 如果键不存在，则返回一个空的元素列表。 public List<TElement> this[TKey key] { get; } Parameters key TKey 要查找的键。 Property Value List<TElement> 与指定键关联的元素列表。 Methods Contains(TKey) 判断集合中是否包含指定的键。 public bool Contains(TKey key) Parameters key TKey 要检查的键。 Returns bool 如果集合中包含指定的键，则返回 true；否则返回 false。 GetEnumerator() 返回一个枚举器，该枚举器可以遍历集合中的每个元素列表。 public IEnumerator<List<TElement>> GetEnumerator() Returns IEnumerator<List<TElement>> 一个枚举器，该枚举器可以遍历集合中的每个元素列表。"
  },
  "api/GameFrameX.Utility.Extensions.NullObject-1.html": {
    "href": "api/GameFrameX.Utility.Extensions.NullObject-1.html",
    "title": "Struct NullObject<T> | GameFrameX.Server",
    "keywords": "Struct NullObject<T> Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll 表示可为空的对象。 public readonly record struct NullObject<T> : IComparable, IComparable<T>, IEquatable<NullObject<T>> Type Parameters T 对象的类型。 Implements IComparable IComparable<T> IEquatable<NullObject<T>> Inherited Members ValueType.Equals(object) object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors NullObject(T) 初始化一个新的 NullObject<T> 实例。 public NullObject(T item) Parameters item T 对象的值。 Properties Item 获取对象的值。 public T Item { get; } Property Value T Null 获取一个表示空值的 NullObject<T> 实例。 public static NullObject<T> Null { get; } Property Value NullObject<T> Methods CompareTo(object) 比较当前对象与另一个对象。 public int CompareTo(object value) Parameters value object 要比较的对象。 Returns int 一个整数，指示当前对象与 value 的相对顺序。 CompareTo(T) 比较当前对象与同一类型的另一个对象。 public int CompareTo(T other) Parameters other T 要比较的对象。 Returns int 一个整数，指示当前对象与 other 的相对顺序。 Equals(NullObject<T>) 指示当前对象是否等于同一类型的另一个对象。 public bool Equals(NullObject<T> other) Parameters other NullObject<T> 一个与此对象进行比较的对象。 Returns bool 如果当前对象等于 other 参数，则为 true；否则为 false。 GetHashCode() 返回当前对象的哈希代码。 public override int GetHashCode() Returns int 当前对象的哈希代码。 ToString() 返回对象的字符串表示形式。 public override string ToString() Returns string 对象的字符串表示形式，如果对象为 null，则返回 \"NULL\"。 Operators implicit operator T(NullObject<T>) 将 NullObject<T> 隐式转换为类型 T。 public static implicit operator T(NullObject<T> nullObject) Parameters nullObject NullObject<T> 要转换的 NullObject<T> 实例。 Returns T implicit operator NullObject<T>(T) 将类型 T 隐式转换为 NullObject<T>。 public static implicit operator NullObject<T>(T item) Parameters item T 要转换的值。 Returns NullObject<T>"
  },
  "api/GameFrameX.Utility.Extensions.NullableConcurrentDictionary-2.html": {
    "href": "api/GameFrameX.Utility.Extensions.NullableConcurrentDictionary-2.html",
    "title": "Class NullableConcurrentDictionary<TKey, TValue> | GameFrameX.Server",
    "keywords": "Class NullableConcurrentDictionary<TKey, TValue> Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll 支持null键和值的并发字典类型 public class NullableConcurrentDictionary<TKey, TValue> : ConcurrentDictionary<NullObject<TKey>, TValue>, IDictionary<NullObject<TKey>, TValue>, ICollection<KeyValuePair<NullObject<TKey>, TValue>>, IReadOnlyDictionary<NullObject<TKey>, TValue>, IReadOnlyCollection<KeyValuePair<NullObject<TKey>, TValue>>, IEnumerable<KeyValuePair<NullObject<TKey>, TValue>>, IDictionary, ICollection, IEnumerable Type Parameters TKey 键的类型 TValue 值的类型 Inheritance object ConcurrentDictionary<NullObject<TKey>, TValue> NullableConcurrentDictionary<TKey, TValue> Implements IDictionary<NullObject<TKey>, TValue> ICollection<KeyValuePair<NullObject<TKey>, TValue>> IReadOnlyDictionary<NullObject<TKey>, TValue> IReadOnlyCollection<KeyValuePair<NullObject<TKey>, TValue>> IEnumerable<KeyValuePair<NullObject<TKey>, TValue>> IDictionary ICollection IEnumerable Derived DisposableConcurrentDictionary<TKey, TValue> Inherited Members ConcurrentDictionary<NullObject<TKey>, TValue>.AddOrUpdate(NullObject<TKey>, Func<NullObject<TKey>, TValue>, Func<NullObject<TKey>, TValue, TValue>) ConcurrentDictionary<NullObject<TKey>, TValue>.AddOrUpdate(NullObject<TKey>, TValue, Func<NullObject<TKey>, TValue, TValue>) ConcurrentDictionary<NullObject<TKey>, TValue>.AddOrUpdate<TArg>(NullObject<TKey>, Func<NullObject<TKey>, TArg, TValue>, Func<NullObject<TKey>, TValue, TArg, TValue>, TArg) ConcurrentDictionary<NullObject<TKey>, TValue>.Clear() ConcurrentDictionary<NullObject<TKey>, TValue>.ContainsKey(NullObject<TKey>) ConcurrentDictionary<NullObject<TKey>, TValue>.GetEnumerator() ConcurrentDictionary<NullObject<TKey>, TValue>.GetOrAdd(NullObject<TKey>, Func<NullObject<TKey>, TValue>) ConcurrentDictionary<NullObject<TKey>, TValue>.GetOrAdd(NullObject<TKey>, TValue) ConcurrentDictionary<NullObject<TKey>, TValue>.GetOrAdd<TArg>(NullObject<TKey>, Func<NullObject<TKey>, TArg, TValue>, TArg) ConcurrentDictionary<NullObject<TKey>, TValue>.ToArray() ConcurrentDictionary<NullObject<TKey>, TValue>.TryAdd(NullObject<TKey>, TValue) ConcurrentDictionary<NullObject<TKey>, TValue>.TryGetValue(NullObject<TKey>, out TValue) ConcurrentDictionary<NullObject<TKey>, TValue>.TryRemove(KeyValuePair<NullObject<TKey>, TValue>) ConcurrentDictionary<NullObject<TKey>, TValue>.TryRemove(NullObject<TKey>, out TValue) ConcurrentDictionary<NullObject<TKey>, TValue>.TryUpdate(NullObject<TKey>, TValue, TValue) ConcurrentDictionary<NullObject<TKey>, TValue>.Comparer ConcurrentDictionary<NullObject<TKey>, TValue>.Count ConcurrentDictionary<NullObject<TKey>, TValue>.IsEmpty ConcurrentDictionary<NullObject<TKey>, TValue>.this[NullObject<TKey>] ConcurrentDictionary<NullObject<TKey>, TValue>.Keys ConcurrentDictionary<NullObject<TKey>, TValue>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, TKey, Func<TKey, Task<TValue>>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateTo<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, IDictionary<TKey, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, IDictionary<TKey, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>, TKey, TValue, TValue) ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) IDictionaryExtensions.AsDictionary<TKey, TValue>(ConcurrentDictionary<TKey, TValue>) IDictionaryExtensions.AsDictionary<TKey, TValue>(ConcurrentDictionary<TKey, TValue>, TValue) CollectionExtensions.IsNullOrEmpty<T>(ICollection<T>) IEnumerableExtensions.AddRangeIfNotContains<T>(ICollection<T>, params T[]) IEnumerableExtensions.AddRangeIf<T>(ICollection<T>, Func<T, bool>, params T[]) IEnumerableExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) IEnumerableExtensions.AddRange<T>(ICollection<T>, params T[]) IEnumerableExtensions.RemoveWhere<T>(ICollection<T>, Func<T, bool>) IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TKey, Task<TValue>>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateToAsync<TKey, TValue>(IDictionary<TKey, TValue>, NullableConcurrentDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateToAsync<TKey, TValue>(IDictionary<TKey, TValue>, NullableDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateToAsync<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateTo<TKey, TValue>(IDictionary<TKey, TValue>, NullableConcurrentDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdateTo<TKey, TValue>(IDictionary<TKey, TValue>, NullableDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdateTo<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>) IDictionaryExtensions.AddOrUpdateTo<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue, TValue) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.ForEachAsync<TKey, TValue>(IDictionary<TKey, TValue>, Func<TKey, TValue, Task>) IDictionaryExtensions.ForEach<TKey, TValue>(IDictionary<TKey, TValue>, Action<TKey, TValue>) IDictionaryExtensions.GetOrAddAsync<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<Task<TValue>>) IDictionaryExtensions.GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TValue>) IDictionaryExtensions.ToConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, TSource) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToDictionarySafety<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IDictionaryExtensions.ToDictionarySafety<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, TSource) IDictionaryExtensions.ToDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToDisposableConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToDisposableConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToDisposableConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToDisposableConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToDisposableDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToDisposableDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToDisposableDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToDisposableDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToLookupAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToLookupX<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IDictionaryExtensions.ToLookupX<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IEnumerableExtensions.AsNotNull<T>(IEnumerable<T>) IEnumerableExtensions.CompareChangesPlus<T1, T2>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, bool>) IEnumerableExtensions.CompareChanges<T1, T2>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, bool>) IEnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IEnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>) IEnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>, IEqualityComparer<TKey>) IEnumerableExtensions.ExceptBy<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, bool>) IEnumerableExtensions.ForAsync<T>(IEnumerable<T>, Func<T, int, Task>, int, CancellationToken) IEnumerableExtensions.ForAsync<T>(IEnumerable<T>, Func<T, int, Task>, CancellationToken) IEnumerableExtensions.ForEach<T>(IEnumerable<T>, Action<T>) IEnumerableExtensions.ForeachAsync<T>(IEnumerable<T>, Func<T, Task>, int, CancellationToken) IEnumerableExtensions.ForeachAsync<T>(IEnumerable<T>, Func<T, Task>, CancellationToken) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>, IEqualityComparer<TKey>) IEnumerableExtensions.IntersectBy<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, bool>) IEnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>) IEnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, TSource) IEnumerableExtensions.MaxOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) IEnumerableExtensions.MaxOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>, TResult) IEnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>) IEnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, TSource) IEnumerableExtensions.MinOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) IEnumerableExtensions.MinOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>, TResult) IEnumerableExtensions.OrderByRandom<T>(IEnumerable<T>) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, int, Task<TResult>>) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, int, Task<TResult>>, int) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, Task<TResult>>) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, Task<TResult>>, int) IEnumerableExtensions.SequenceEqual<T>(IEnumerable<T>, IEnumerable<T>, Func<T, T, bool>) IEnumerableExtensions.SequenceEqual<T1, T2>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, bool>) IEnumerableExtensions.ToHashSet<T, TResult>(IEnumerable<T>, Func<T, TResult>) IEnumerableExtensions.WhereIf<T>(IEnumerable<T>, bool, Func<T, bool>) IEnumerableExtensions.WhereIf<T>(IEnumerable<T>, Func<bool>, Func<T, bool>) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors NullableConcurrentDictionary() 初始化一个新的 NullableConcurrentDictionary<TKey, TValue> 实例。 public NullableConcurrentDictionary() NullableConcurrentDictionary(IEqualityComparer<NullObject<TKey>>) 使用指定的比较器初始化一个新的 NullableConcurrentDictionary<TKey, TValue> 实例。 public NullableConcurrentDictionary(IEqualityComparer<NullObject<TKey>> comparer) Parameters comparer IEqualityComparer<NullObject<TKey>> 用于比较键的比较器。 NullableConcurrentDictionary(int, int) 使用指定的并发级别和初始容量初始化一个新的 NullableConcurrentDictionary<TKey, TValue> 实例。 public NullableConcurrentDictionary(int concurrencyLevel, int capacity) Parameters concurrencyLevel int 并发级别。 capacity int 初始容量。 NullableConcurrentDictionary(TValue) 使用指定的默认值初始化一个新的 NullableConcurrentDictionary<TKey, TValue> 实例。 public NullableConcurrentDictionary(TValue fallbackValue) Parameters fallbackValue TValue 当键不存在时返回的默认值。 Properties this[NullObject<TKey>] 获取或设置指定键的值。 public TValue this[NullObject<TKey> key] { get; set; } Parameters key NullObject<TKey> 键。 Property Value TValue this[Func<KeyValuePair<TKey, TValue>, bool>] 根据条件获取或设置第一个匹配的键值对的值。 public TValue this[Func<KeyValuePair<TKey, TValue>, bool> condition] { get; set; } Parameters condition Func<KeyValuePair<TKey, TValue>, bool> 用于筛选键值对的条件。 Property Value TValue this[Func<TKey, bool>] 根据条件获取或设置第一个匹配的键值对的值。 public TValue this[Func<TKey, bool> condition] { get; set; } Parameters condition Func<TKey, bool> 用于筛选键的条件。 Property Value TValue this[Func<TKey, TValue, bool>] 根据条件获取或设置第一个匹配的键值对的值。 public TValue this[Func<TKey, TValue, bool> condition] { get; set; } Parameters condition Func<TKey, TValue, bool> 用于筛选键值对的条件。 Property Value TValue this[Func<TValue, bool>] 根据条件获取或设置第一个匹配的键值对的值。 public TValue this[Func<TValue, bool> condition] { get; set; } Parameters condition Func<TValue, bool> 用于筛选值的条件。 Property Value TValue this[TKey] 获取或设置指定键的值。 public TValue this[TKey key] { get; set; } Parameters key TKey 键。 Property Value TValue Methods ContainsKey(TKey) 判断字典中是否包含指定的键。 public bool ContainsKey(TKey key) Parameters key TKey 键。 Returns bool 如果包含指定的键，则返回 true；否则返回 false。 TryAdd(TKey, TValue) 尝试添加一个键值对。 public bool TryAdd(TKey key, TValue value) Parameters key TKey 键。 value TValue 值。 Returns bool 如果成功添加，则返回 true；否则返回 false。 TryGetValue(TKey, out TValue) 尝试获取指定键的值。 public bool TryGetValue(TKey key, out TValue value) Parameters key TKey 键。 value TValue 获取的值。 Returns bool 如果成功获取，则返回 true；否则返回 false。 TryRemove(TKey, out TValue) 尝试移除一个键值对。 public bool TryRemove(TKey key, out TValue value) Parameters key TKey 键。 value TValue 移除的值。 Returns bool 如果成功移除，则返回 true；否则返回 false。 TryUpdate(TKey, TValue, TValue) 尝试更新一个键值对。 public bool TryUpdate(TKey key, TValue value, TValue comparisionValue) Parameters key TKey 键。 value TValue 新的值。 comparisionValue TValue 比较值。 Returns bool 如果成功更新，则返回 true；否则返回 false。 Operators implicit operator ConcurrentDictionary<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue>) 从 NullableConcurrentDictionary<TKey, TValue> 隐式转换为 ConcurrentDictionary<TKey, TValue>。 public static implicit operator ConcurrentDictionary<TKey, TValue>(NullableConcurrentDictionary<TKey, TValue> dic) Parameters dic NullableConcurrentDictionary<TKey, TValue> 要转换的字典。 Returns ConcurrentDictionary<TKey, TValue> implicit operator NullableConcurrentDictionary<TKey, TValue>(ConcurrentDictionary<TKey, TValue>) 从 ConcurrentDictionary<TKey, TValue> 隐式转换为 NullableConcurrentDictionary<TKey, TValue>。 public static implicit operator NullableConcurrentDictionary<TKey, TValue>(ConcurrentDictionary<TKey, TValue> dic) Parameters dic ConcurrentDictionary<TKey, TValue> 要转换的并发字典。 Returns NullableConcurrentDictionary<TKey, TValue> implicit operator NullableConcurrentDictionary<TKey, TValue>(Dictionary<TKey, TValue>) 从 Dictionary<TKey, TValue> 隐式转换为 NullableConcurrentDictionary<TKey, TValue>。 public static implicit operator NullableConcurrentDictionary<TKey, TValue>(Dictionary<TKey, TValue> dic) Parameters dic Dictionary<TKey, TValue> 要转换的字典。 Returns NullableConcurrentDictionary<TKey, TValue>"
  },
  "api/GameFrameX.Utility.Extensions.NullableDictionary-2.html": {
    "href": "api/GameFrameX.Utility.Extensions.NullableDictionary-2.html",
    "title": "Class NullableDictionary<TKey, TValue> | GameFrameX.Server",
    "keywords": "Class NullableDictionary<TKey, TValue> Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll 支持null-key和value的字典类型 public class NullableDictionary<TKey, TValue> : Dictionary<NullObject<TKey>, TValue>, IDictionary<NullObject<TKey>, TValue>, ICollection<KeyValuePair<NullObject<TKey>, TValue>>, IReadOnlyDictionary<NullObject<TKey>, TValue>, IReadOnlyCollection<KeyValuePair<NullObject<TKey>, TValue>>, IEnumerable<KeyValuePair<NullObject<TKey>, TValue>>, IDictionary, ICollection, IEnumerable, IDeserializationCallback, ISerializable Type Parameters TKey 键的类型 TValue 值的类型 Inheritance object Dictionary<NullObject<TKey>, TValue> NullableDictionary<TKey, TValue> Implements IDictionary<NullObject<TKey>, TValue> ICollection<KeyValuePair<NullObject<TKey>, TValue>> IReadOnlyDictionary<NullObject<TKey>, TValue> IReadOnlyCollection<KeyValuePair<NullObject<TKey>, TValue>> IEnumerable<KeyValuePair<NullObject<TKey>, TValue>> IDictionary ICollection IEnumerable IDeserializationCallback ISerializable Derived DisposableDictionary<TKey, TValue> Inherited Members Dictionary<NullObject<TKey>, TValue>.Add(NullObject<TKey>, TValue) Dictionary<NullObject<TKey>, TValue>.Clear() Dictionary<NullObject<TKey>, TValue>.ContainsKey(NullObject<TKey>) Dictionary<NullObject<TKey>, TValue>.ContainsValue(TValue) Dictionary<NullObject<TKey>, TValue>.EnsureCapacity(int) Dictionary<NullObject<TKey>, TValue>.GetEnumerator() Dictionary<NullObject<TKey>, TValue>.OnDeserialization(object) Dictionary<NullObject<TKey>, TValue>.Remove(NullObject<TKey>) Dictionary<NullObject<TKey>, TValue>.Remove(NullObject<TKey>, out TValue) Dictionary<NullObject<TKey>, TValue>.TrimExcess() Dictionary<NullObject<TKey>, TValue>.TrimExcess(int) Dictionary<NullObject<TKey>, TValue>.TryAdd(NullObject<TKey>, TValue) Dictionary<NullObject<TKey>, TValue>.TryGetValue(NullObject<TKey>, out TValue) Dictionary<NullObject<TKey>, TValue>.Comparer Dictionary<NullObject<TKey>, TValue>.Count Dictionary<NullObject<TKey>, TValue>.this[NullObject<TKey>] Dictionary<NullObject<TKey>, TValue>.Keys Dictionary<NullObject<TKey>, TValue>.Values object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(NullableDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(NullableDictionary<TKey, TValue>, TKey, Func<TKey, Task<TValue>>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(NullableDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateTo<TKey, TValue>(NullableDictionary<TKey, TValue>, IDictionary<TKey, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(NullableDictionary<TKey, TValue>, IDictionary<TKey, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(NullableDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(NullableDictionary<TKey, TValue>, TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(NullableDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(NullableDictionary<TKey, TValue>, TKey, TValue, TValue) ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) CollectionExtensions.GetOrAdd<TKey, TValue>(Dictionary<TKey, TValue>, TKey, Func<TKey, TValue>) CollectionExtensions.Merge<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue, Func<TValue, TValue, TValue>) CollectionExtensions.RemoveIf<TKey, TValue>(Dictionary<TKey, TValue>, Func<TKey, TValue, bool>) IDictionaryExtensions.AsConcurrentDictionary<TKey, TValue>(Dictionary<TKey, TValue>) IDictionaryExtensions.AsConcurrentDictionary<TKey, TValue>(Dictionary<TKey, TValue>, TValue) IDictionaryExtensions.GetOrAdd<TKey, TValue>(Dictionary<TKey, TValue>, TKey, TValue) CollectionExtensions.IsNullOrEmpty<T>(ICollection<T>) IEnumerableExtensions.AddRangeIfNotContains<T>(ICollection<T>, params T[]) IEnumerableExtensions.AddRangeIf<T>(ICollection<T>, Func<T, bool>, params T[]) IEnumerableExtensions.AddRange<T>(ICollection<T>, IEnumerable<T>) IEnumerableExtensions.AddRange<T>(ICollection<T>, params T[]) IEnumerableExtensions.RemoveWhere<T>(ICollection<T>, Func<T, bool>) IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TKey, Task<TValue>>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateAsync<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateToAsync<TKey, TValue>(IDictionary<TKey, TValue>, NullableConcurrentDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateToAsync<TKey, TValue>(IDictionary<TKey, TValue>, NullableDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateToAsync<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, Task<TValue>>) IDictionaryExtensions.AddOrUpdateTo<TKey, TValue>(IDictionary<TKey, TValue>, NullableConcurrentDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdateTo<TKey, TValue>(IDictionary<TKey, TValue>, NullableDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdateTo<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>) IDictionaryExtensions.AddOrUpdateTo<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue, Func<TKey, TValue, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, TKey, TValue, TValue) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>) IDictionaryExtensions.AddOrUpdate<TKey, TValue>(IDictionary<TKey, TValue>, IDictionary<TKey, TValue>, Func<TKey, TValue, TValue>) IDictionaryExtensions.ForEachAsync<TKey, TValue>(IDictionary<TKey, TValue>, Func<TKey, TValue, Task>) IDictionaryExtensions.ForEach<TKey, TValue>(IDictionary<TKey, TValue>, Action<TKey, TValue>) IDictionaryExtensions.GetOrAddAsync<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<Task<TValue>>) IDictionaryExtensions.GetOrAdd<TKey, TValue>(IDictionary<TKey, TValue>, TKey, Func<TValue>) IDictionaryExtensions.ToConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, TSource) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToDictionarySafety<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IDictionaryExtensions.ToDictionarySafety<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>, TSource) IDictionaryExtensions.ToDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToDisposableConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToDisposableConcurrentDictionaryAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToDisposableConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToDisposableConcurrentDictionary<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToDisposableDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToDisposableDictionarySafetyAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>, TElement) IDictionaryExtensions.ToDisposableDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IDictionaryExtensions.ToDisposableDictionarySafety<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>, TElement) IDictionaryExtensions.ToLookupAsync<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, Task<TElement>>) IDictionaryExtensions.ToLookupX<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IDictionaryExtensions.ToLookupX<TSource, TKey, TElement>(IEnumerable<TSource>, Func<TSource, TKey>, Func<TSource, TElement>) IEnumerableExtensions.AsNotNull<T>(IEnumerable<T>) IEnumerableExtensions.CompareChangesPlus<T1, T2>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, bool>) IEnumerableExtensions.CompareChanges<T1, T2>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, bool>) IEnumerableExtensions.DistinctBy<TSource, TKey>(IEnumerable<TSource>, Func<TSource, TKey>) IEnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>) IEnumerableExtensions.ExceptBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>, IEqualityComparer<TKey>) IEnumerableExtensions.ExceptBy<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, bool>) IEnumerableExtensions.ForAsync<T>(IEnumerable<T>, Func<T, int, Task>, int, CancellationToken) IEnumerableExtensions.ForAsync<T>(IEnumerable<T>, Func<T, int, Task>, CancellationToken) IEnumerableExtensions.ForEach<T>(IEnumerable<T>, Action<T>) IEnumerableExtensions.ForeachAsync<T>(IEnumerable<T>, Func<T, Task>, int, CancellationToken) IEnumerableExtensions.ForeachAsync<T>(IEnumerable<T>, Func<T, Task>, CancellationToken) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TSource>, Func<TSource, TKey>, IEqualityComparer<TKey>) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>) IEnumerableExtensions.IntersectBy<TSource, TKey>(IEnumerable<TSource>, IEnumerable<TKey>, Func<TSource, TKey>, IEqualityComparer<TKey>) IEnumerableExtensions.IntersectBy<TFirst, TSecond>(IEnumerable<TFirst>, IEnumerable<TSecond>, Func<TFirst, TSecond, bool>) IEnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>) IEnumerableExtensions.MaxOrDefault<TSource>(IEnumerable<TSource>, TSource) IEnumerableExtensions.MaxOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) IEnumerableExtensions.MaxOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>, TResult) IEnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>) IEnumerableExtensions.MinOrDefault<TSource>(IEnumerable<TSource>, TSource) IEnumerableExtensions.MinOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>) IEnumerableExtensions.MinOrDefault<TSource, TResult>(IEnumerable<TSource>, Func<TSource, TResult>, TResult) IEnumerableExtensions.OrderByRandom<T>(IEnumerable<T>) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, int, Task<TResult>>) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, int, Task<TResult>>, int) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, Task<TResult>>) IEnumerableExtensions.SelectAsync<T, TResult>(IEnumerable<T>, Func<T, Task<TResult>>, int) IEnumerableExtensions.SequenceEqual<T>(IEnumerable<T>, IEnumerable<T>, Func<T, T, bool>) IEnumerableExtensions.SequenceEqual<T1, T2>(IEnumerable<T1>, IEnumerable<T2>, Func<T1, T2, bool>) IEnumerableExtensions.ToHashSet<T, TResult>(IEnumerable<T>, Func<T, TResult>) IEnumerableExtensions.WhereIf<T>(IEnumerable<T>, bool, Func<T, bool>) IEnumerableExtensions.WhereIf<T>(IEnumerable<T>, Func<bool>, Func<T, bool>) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors NullableDictionary() 初始化一个空的 NullableDictionary 实例 public NullableDictionary() NullableDictionary(IDictionary<NullObject<TKey>, TValue>) 使用指定的字典初始化 NullableDictionary 实例 public NullableDictionary(IDictionary<NullObject<TKey>, TValue> dictionary) Parameters dictionary IDictionary<NullObject<TKey>, TValue> 用于初始化字典的键值对集合 NullableDictionary(IDictionary<NullObject<TKey>, TValue>, IEqualityComparer<NullObject<TKey>>) 使用指定的字典和比较器初始化 NullableDictionary 实例 public NullableDictionary(IDictionary<NullObject<TKey>, TValue> dictionary, IEqualityComparer<NullObject<TKey>> comparer) Parameters dictionary IDictionary<NullObject<TKey>, TValue> 用于初始化字典的键值对集合 comparer IEqualityComparer<NullObject<TKey>> 用于键的比较器 NullableDictionary(IEqualityComparer<NullObject<TKey>>) 使用指定的比较器初始化 NullableDictionary 实例 public NullableDictionary(IEqualityComparer<NullObject<TKey>> comparer) Parameters comparer IEqualityComparer<NullObject<TKey>> 用于键的比较器 NullableDictionary(int) 使用指定的初始容量初始化 NullableDictionary 实例 public NullableDictionary(int capacity) Parameters capacity int 字典的初始容量 NullableDictionary(int, IEqualityComparer<NullObject<TKey>>) 使用指定的初始容量和比较器初始化 NullableDictionary 实例 public NullableDictionary(int capacity, IEqualityComparer<NullObject<TKey>> comparer) Parameters capacity int 字典的初始容量 comparer IEqualityComparer<NullObject<TKey>> 用于键的比较器 NullableDictionary(TValue) 使用指定的默认值初始化 NullableDictionary 实例 public NullableDictionary(TValue fallbackValue) Parameters fallbackValue TValue 当键不存在时返回的默认值 Properties this[NullObject<TKey>] 获取或设置指定键的值 public TValue this[NullObject<TKey> key] { get; set; } Parameters key NullObject<TKey> 键 Property Value TValue this[Func<KeyValuePair<TKey, TValue>, bool>] 根据条件获取或设置第一个匹配的值 public TValue this[Func<KeyValuePair<TKey, TValue>, bool> condition] { get; set; } Parameters condition Func<KeyValuePair<TKey, TValue>, bool> 条件谓词 Property Value TValue this[Func<TKey, bool>] 根据条件获取或设置第一个匹配的值 public TValue this[Func<TKey, bool> condition] { get; set; } Parameters condition Func<TKey, bool> 条件谓词 Property Value TValue this[Func<TKey, TValue, bool>] 根据条件获取或设置第一个匹配的值 public TValue this[Func<TKey, TValue, bool> condition] { get; set; } Parameters condition Func<TKey, TValue, bool> 条件谓词 Property Value TValue this[Func<TValue, bool>] 根据条件获取或设置第一个匹配的值 public TValue this[Func<TValue, bool> condition] { get; set; } Parameters condition Func<TValue, bool> 条件谓词 Property Value TValue this[TKey] 获取或设置指定键的值 public TValue this[TKey key] { get; set; } Parameters key TKey 键 Property Value TValue Methods Add(TKey, TValue) 向字典中添加键值对 public void Add(TKey key, TValue value) Parameters key TKey 键 value TValue 值 ContainsKey(TKey) 判断字典是否包含指定的键 public bool ContainsKey(TKey key) Parameters key TKey 键 Returns bool 如果包含则返回 true，否则返回 false Remove(TKey) 从字典中移除指定的键 public bool Remove(TKey key) Parameters key TKey 键 Returns bool 如果成功移除则返回 true，否则返回 false TryGetValue(TKey, out TValue) 尝试获取指定键的值 public bool TryGetValue(TKey key, out TValue value) Parameters key TKey 键 value TValue 输出参数，存储找到的值 Returns bool 如果找到则返回 true，否则返回 false Operators implicit operator Dictionary<TKey, TValue>(NullableDictionary<TKey, TValue>) public static implicit operator Dictionary<TKey, TValue>(NullableDictionary<TKey, TValue> dic) Parameters dic NullableDictionary<TKey, TValue> Returns Dictionary<TKey, TValue> implicit operator NullableDictionary<TKey, TValue>(ConcurrentDictionary<TKey, TValue>) public static implicit operator NullableDictionary<TKey, TValue>(ConcurrentDictionary<TKey, TValue> dic) Parameters dic ConcurrentDictionary<TKey, TValue> Returns NullableDictionary<TKey, TValue> implicit operator NullableDictionary<TKey, TValue>(Dictionary<TKey, TValue>) public static implicit operator NullableDictionary<TKey, TValue>(Dictionary<TKey, TValue> dic) Parameters dic Dictionary<TKey, TValue> Returns NullableDictionary<TKey, TValue>"
  },
  "api/GameFrameX.Utility.Extensions.ObjectExtension.html": {
    "href": "api/GameFrameX.Utility.Extensions.ObjectExtension.html",
    "title": "Class ObjectExtension | GameFrameX.Server",
    "keywords": "Class ObjectExtension Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll 守护.用于判断参数 public static class ObjectExtension Inheritance object ObjectExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CheckNotNull<T>(T, string) 判断参数是否为null public static void CheckNotNull<T>(this T value, string name) where T : class Parameters value T 参数值 name string 参数名称 Type Parameters T Exceptions ArgumentNullException 当参数为null,引发参数为空异常 CheckNotNull<T>(T, string, string) 判断参数是否为null public static void CheckNotNull<T>(this T value, string name, string message) where T : class Parameters value T 参数值 name string 参数名称 message string 错误消息 Type Parameters T Exceptions ArgumentNullException 当参数为null,引发参数为空异常 CheckRange(int, int, int) 判断参数是否在最大值和最小值之间 public static void CheckRange(this int value, int minValue = 0, int maxValue = 2147483647) Parameters value int 参数值 minValue int 最小值 maxValue int 最大值 Exceptions ArgumentOutOfRangeException 当参数不在范围内时,引发参数为空异常 IsNotNull(object) 检查对象是否不为null public static bool IsNotNull(this object self) Parameters self object Returns bool IsNull(object) 检查对象是否为null public static bool IsNull(this object self) Parameters self object Returns bool IsRange(short, short, short) 判断参数是否在最大值和最小值之间 public static bool IsRange(this short value, short minValue = 0, short maxValue = 32767) Parameters value short 参数值 minValue short 最小值 maxValue short 最大值 Returns bool 返回是否在范围内 IsRange(int, int, int) 判断参数是否在最大值和最小值之间 public static bool IsRange(this int value, int minValue = 0, int maxValue = 2147483647) Parameters value int 参数值 minValue int 最小值 maxValue int 最大值 Returns bool 返回是否在范围内 IsRange(long, long, long) 判断参数是否在最大值和最小值之间 public static bool IsRange(this long value, long minValue = 0, long maxValue = 9223372036854775807) Parameters value long 参数值 minValue long 最小值 maxValue long 最大值 Returns bool 返回是否在范围内 IsRange(ushort, ushort, ushort) 判断参数是否在最大值和最小值之间 public static bool IsRange(this ushort value, ushort minValue = 0, ushort maxValue = 65535) Parameters value ushort 参数值 minValue ushort 最小值 maxValue ushort 最大值 Returns bool 返回是否在范围内 IsRange(uint, uint, uint) 判断参数是否在最大值和最小值之间 public static bool IsRange(this uint value, uint minValue = 0, uint maxValue = 4294967295) Parameters value uint 参数值 minValue uint 最小值 maxValue uint 最大值 Returns bool 返回是否在范围内 IsRange(ulong, ulong, ulong) 判断参数是否在最大值和最小值之间 public static bool IsRange(this ulong value, ulong minValue = 0, ulong maxValue = 18446744073709551615) Parameters value ulong 参数值 minValue ulong 最小值 maxValue ulong 最大值 Returns bool 返回是否在范围内"
  },
  "api/GameFrameX.Utility.Extensions.ReadOnlyMemoryExtension.html": {
    "href": "api/GameFrameX.Utility.Extensions.ReadOnlyMemoryExtension.html",
    "title": "Class ReadOnlyMemoryExtension | GameFrameX.Server",
    "keywords": "Class ReadOnlyMemoryExtension Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll public static class ReadOnlyMemoryExtension Inheritance object ReadOnlyMemoryExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetArray(ReadOnlyMemory<byte>) 尝试从只读内存中获取数组段，如果不成功则抛出异常。 public static ArraySegment<byte> GetArray(this ReadOnlyMemory<byte> memory) Parameters memory ReadOnlyMemory<byte> 源只读内存。 Returns ArraySegment<byte> 返回对应的数组段。"
  },
  "api/GameFrameX.Utility.Extensions.ReadOnlySpanExtension.html": {
    "href": "api/GameFrameX.Utility.Extensions.ReadOnlySpanExtension.html",
    "title": "Class ReadOnlySpanExtension | GameFrameX.Server",
    "keywords": "Class ReadOnlySpanExtension Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll public static class ReadOnlySpanExtension Inheritance object ReadOnlySpanExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadInt(ReadOnlySpan<byte>, ref int) 从字节数组中以指定偏移量读取整型。 public static int ReadInt(this ReadOnlySpan<byte> buffer, ref int offset) Parameters buffer ReadOnlySpan<byte> 要从中读取数据的字节数组。 offset int 读取数据的起始偏移量，此偏移量在读取后会自动增加。 Returns int 读取的整型，若读取长度小于等于0或偏移量超出数组长度，返回0。 ReadLong(ReadOnlySpan<byte>, ref int) 从字节数组中以指定偏移量读取长整型。 public static long ReadLong(this ReadOnlySpan<byte> buffer, ref int offset) Parameters buffer ReadOnlySpan<byte> 要从中读取数据的字节数组。 offset int 读取数据的起始偏移量，此偏移量在读取后会自动增加。 Returns long 读取的长整型，若读取长度小于等于0或偏移量超出数组长度，返回0。 ReadUInt(ReadOnlySpan<byte>, ref int) 从字节数组中以指定偏移量读取无符号整型。 public static uint ReadUInt(this ReadOnlySpan<byte> buffer, ref int offset) Parameters buffer ReadOnlySpan<byte> 要从中读取数据的字节数组。 offset int 读取数据的起始偏移量，此偏移量在读取后会自动增加。 Returns uint 读取的无符号整型，若读取长度小于等于0或偏移量超出数组长度，返回0。 ReadULong(ReadOnlySpan<byte>, ref int) 从字节数组中以指定偏移量读取无符号长整型。 public static ulong ReadULong(this ReadOnlySpan<byte> buffer, ref int offset) Parameters buffer ReadOnlySpan<byte> 要从中读取数据的字节数组。 offset int 读取数据的起始偏移量，此偏移量在读取后会自动增加。 Returns ulong 读取的无符号长整型，若读取长度小于等于0或偏移量超出数组长度，返回0。"
  },
  "api/GameFrameX.Utility.Extensions.SequenceReaderExtension.html": {
    "href": "api/GameFrameX.Utility.Extensions.SequenceReaderExtension.html",
    "title": "Class SequenceReaderExtension | GameFrameX.Server",
    "keywords": "Class SequenceReaderExtension Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll 提供对 SequenceReader<T> 类的扩展方法，用于从只读内存中读取数据。 public static class SequenceReaderExtension Inheritance object SequenceReaderExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods TryPeekBigEndian(ref SequenceReader<byte>, out byte) 从只读内存中获取一个字节数据，但不移动读取位置。 public static bool TryPeekBigEndian(this ref SequenceReader<byte> reader, out byte value) Parameters reader SequenceReader<byte> 读取器。 value byte 结果值。 Returns bool 读取成功返回 True，否则返回 False。 TryPeekBigEndian(ref SequenceReader<byte>, out ushort) 从只读内存中获取一个无符号短整型数据，但不移动读取位置。 public static bool TryPeekBigEndian(this ref SequenceReader<byte> reader, out ushort value) Parameters reader SequenceReader<byte> 读取器。 value ushort 结果值。 Returns bool 读取成功返回 True，否则返回 False。 TryPeekBigEndian(ref SequenceReader<byte>, out uint) 从只读内存中获取一个无符号整型数据，但不移动读取位置。 public static bool TryPeekBigEndian(this ref SequenceReader<byte> reader, out uint value) Parameters reader SequenceReader<byte> 读取器。 value uint 结果值。 Returns bool 读取成功返回 True，否则返回 False。 TryPeekBigEndian(ref SequenceReader<byte>, out ulong) 从只读内存中获取一个无符号长整型数据，但不移动读取位置。 public static bool TryPeekBigEndian(this ref SequenceReader<byte> reader, out ulong value) Parameters reader SequenceReader<byte> 读取器。 value ulong 结果值。 Returns bool 读取成功返回 True，否则返回 False。 TryReadBigEndian(ref SequenceReader<byte>, out byte) 从只读内存中获取一个字节数据。 public static bool TryReadBigEndian(this ref SequenceReader<byte> reader, out byte value) Parameters reader SequenceReader<byte> 只读内存读取器。 value byte 结果值。 Returns bool 读取成功返回 True，否则返回 False。 TryReadBytes(ref SequenceReader<byte>, int, out byte[]) 从只读内存中获取指定长度的字节数据，并移动读取位置。 public static bool TryReadBytes(this ref SequenceReader<byte> reader, int length, out byte[] value) Parameters reader SequenceReader<byte> 读取器。 length int 读取的长度。 value byte[] 结果值。 Returns bool 读取成功返回 True，否则返回 False。"
  },
  "api/GameFrameX.Utility.Extensions.SpanExtension.html": {
    "href": "api/GameFrameX.Utility.Extensions.SpanExtension.html",
    "title": "Class SpanExtension | GameFrameX.Server",
    "keywords": "Class SpanExtension Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll public static class SpanExtension Inheritance object SpanExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods ReadBool(Span<byte>, ref int) 从给定的字节跨度中读取一个布尔值并从偏移量处开始更新偏移量。 public static bool ReadBool(this Span<byte> buffer, ref int offset) Parameters buffer Span<byte> 要读取的字节跨度。 offset int 开始读取的偏移量。 Returns bool 返回读取的布尔值。 Exceptions Exception 当buffer读取超出索引时抛出异常。 ReadByte(Span<byte>, ref int) 使用指定的偏移量从字节跨度中读取字节。 public static byte ReadByte(this Span<byte> buffer, ref int offset) Parameters buffer Span<byte> 字节跨度。 offset int 开始读取的偏移量，读取后会自动增加。 Returns byte 读取的字节。 Exceptions Exception 当缓冲区读取超出范围时抛出异常。 ReadBytes(Span<byte>, ref int) 使用指定的偏移量从字节跨度中读取字节数组。 public static byte[] ReadBytes(this Span<byte> buffer, ref int offset) Parameters buffer Span<byte> 字节跨度。 offset int 开始读取的偏移量，读取后会增加对应的字节数组的长度。 Returns byte[] 读取的字节数组。如果长度小于或等于0，返回空数组。 ReadDouble(Span<byte>, ref int) 使用指定的偏移量从字节跨度中读取浮点数。 public static double ReadDouble(this Span<byte> buffer, ref int offset) Parameters buffer Span<byte> 字节跨度。 offset int 开始读取的偏移量，读取后会自动增加。 Returns double 读取的浮点数。 Exceptions Exception 当缓冲区读取超出范围时抛出异常。 ReadFloat(Span<byte>, ref int) 从给定的字节缓存区读取一个浮点型值（32位）。 public static float ReadFloat(this Span<byte> buffer, ref int offset) Parameters buffer Span<byte> 字节缓冲区 offset int 偏移量，读取结束后会更新此偏移量。 Returns float 从字节缓存区中读取出的浮点型值 Exceptions Exception 如果读取的位置超出了缓冲区大小范围 ReadInt(Span<byte>, ref int) 从指定的byte缓冲区和偏移量读取一个int值。 public static int ReadInt(this Span<byte> buffer, ref int offset) Parameters buffer Span<byte> 字节缓冲区。 offset int 开始读取的偏移量，读取后将更新此偏移量。 Returns int 读取到的int值。 Exceptions Exception 当偏移量超出缓冲区大小时，会抛出此异常。 ReadLong(Span<byte>, ref int) 从给定的字节缓存区读取一个长整型值（64位）。 public static long ReadLong(this Span<byte> buffer, ref int offset) Parameters buffer Span<byte> 字节缓冲区 offset int 偏移量，读取结束后会更新此偏移量。 Returns long 从字节缓存区中读取出的长整型值 Exceptions Exception 如果读取的位置超出了缓冲区大小范围 ReadSByte(Span<byte>, ref int) 从给定的字节跨度中读取一个有符号字节并从偏移量处开始更新偏移量。 public static sbyte ReadSByte(this Span<byte> buffer, ref int offset) Parameters buffer Span<byte> 要读取的字节跨度。 offset int 开始读取的偏移量。 Returns sbyte 返回读取的有符号字节。 Exceptions Exception 当buffer读取超出索引时抛出异常。 ReadShort(Span<byte>, ref int) 从给定的字节缓存区读取一个短整型值（16位）。 public static short ReadShort(this Span<byte> buffer, ref int offset) Parameters buffer Span<byte> 字节缓冲区 offset int 偏移量，读取结束后会更新此偏移量。 Returns short 从字节缓存区中读取出的短整型值 Exceptions Exception 如果读取的位置超出了缓冲区大小范围 ReadString(Span<byte>, ref int) 从给定的字节跨度中读取一个字符串并从偏移量处开始更新偏移量。 public static string ReadString(this Span<byte> buffer, ref int offset) Parameters buffer Span<byte> 要读取的字节跨度。 offset int 开始读取的偏移量。 Returns string 返回读取的字符串。 ReadUInt(Span<byte>, ref int) 从Span字节数组中读取32位无符号整数，并将偏移量向前移动。 public static uint ReadUInt(this Span<byte> buffer, ref int offset) Parameters buffer Span<byte> 要读取的Span字节数组。 offset int 引用偏移量。 Returns uint 返回读取的32位无符号整数。 ReadULong(Span<byte>, ref int) 从Span字节数组中读取64位无符号整数，并将偏移量向前移动。 public static ulong ReadULong(this Span<byte> buffer, ref int offset) Parameters buffer Span<byte> 要读取的Span字节数组。 offset int 引用偏移量。 Returns ulong 返回读取的64位无符号整数。 WriteBytesWithoutLength(Span<byte>, byte[], ref int) 在给定的偏移量位置，向缓冲区中写入字节序列，不包含长度信息。 public static void WriteBytesWithoutLength(this Span<byte> buffer, byte[] value, ref int offset) Parameters buffer Span<byte> 目标字节缓冲区。 value byte[] 需要写入的字节序列。 offset int 字节写入的起始偏移量，写入后更新。 WriteInt(Span<byte>, int, ref int) 将整数值写入到指定的字节跨度中。如果指定的偏移量加上整数大小超过了字节跨度的长度，则抛出异常。 以网络字节顺序存储整数值。 public static void WriteInt(this Span<byte> buffer, int value, ref int offset) Parameters buffer Span<byte> 字节跨度，用于存储整数值。 value int 要写入的整数值。 offset int 写入的起始偏移量，会在调用后增加整数的大小。 WriteLong(Span<byte>, long, ref int) 将长整数值写入到指定的字节跨度中。如果指定的偏移量加上长整数大小超过了字节跨度的长度，则抛出异常。 以网络字节顺序存储长整数值。 public static void WriteLong(this Span<byte> buffer, long value, ref int offset) Parameters buffer Span<byte> 字节跨度，用于存储长整数值。 value long 要写入的长整数值。 offset int 写入的起始偏移量，会在调用后增加长整数的大小。 WriteUInt(Span<byte>, uint, ref int) 将一个32位无符号整数写入指定的缓冲区，并更新偏移量。 public static void WriteUInt(this Span<byte> buffer, uint value, ref int offset) Parameters buffer Span<byte> 要写入的缓冲区。 value uint 要写入的值。 offset int 要写入值的缓冲区中的偏移量。 WriteUShort(Span<byte>, ushort, ref int) 将一个16位无符号整数写入指定的缓冲区，并更新偏移量。 public static void WriteUShort(this Span<byte> buffer, ushort value, ref int offset) Parameters buffer Span<byte> 要写入的缓冲区。 value ushort 要写入的值。 offset int 要写入值的缓冲区中的偏移量。"
  },
  "api/GameFrameX.Utility.Extensions.StringBuilderCache.html": {
    "href": "api/GameFrameX.Utility.Extensions.StringBuilderCache.html",
    "title": "Class StringBuilderCache | GameFrameX.Server",
    "keywords": "Class StringBuilderCache Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll 提供 StringBuilder 的缓存可重用实例 public static class StringBuilderCache Inheritance object StringBuilderCache Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Acquire(int) 获取指定大小的 StringBuilder public static StringBuilder Acquire(int capacity = 16) Parameters capacity int 长度,默认为 16 Returns StringBuilder StringBuilder 对象 GetStringAndRelease(StringBuilder) ToString（） 字符串生成器，将其释放到缓存中并返回结果字符串 public static string GetStringAndRelease(StringBuilder sb) Parameters sb StringBuilder StringBuilder 对象 Returns string 返回其生成的字符串 Release(StringBuilder) 如果指定的构建器不是太大，则将其放在缓存中 public static void Release(StringBuilder sb) Parameters sb StringBuilder StringBuilder 对象"
  },
  "api/GameFrameX.Utility.Extensions.StringExtension.html": {
    "href": "api/GameFrameX.Utility.Extensions.StringExtension.html",
    "title": "Class StringExtension | GameFrameX.Server",
    "keywords": "Class StringExtension Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll 提供对 string 类型的扩展方法。 public static class StringExtension Inheritance object StringExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods CenterAlignedText(string, int) 获取在指定宽度内居中对齐的文本。 public static string CenterAlignedText(this string text, int width) Parameters text string 要居中对齐的文本。 width int 总宽度。 Returns string 居中对齐后的文本，两侧填充空格。 Remarks 如果指定宽度小于文本长度，将使用文本长度作为宽度。 CheckNotNullOrEmpty(string, string) 验证字符串不为 null 或空字符串，否则抛出异常。 public static void CheckNotNullOrEmpty(this string value, string name) Parameters value string 要验证的字符串。 name string 参数名称，用于异常消息。 Exceptions ArgumentNullException 当字符串为 null 或空字符串时抛出。 CheckNotNullOrEmptyOrWhiteSpace(string, string) 验证字符串不为 null、空字符串或仅包含空白字符，否则抛出异常。 public static void CheckNotNullOrEmptyOrWhiteSpace(this string value, string name) Parameters value string 要验证的字符串。 name string 参数名称，用于异常消息。 Exceptions ArgumentNullException 当字符串为 null、空字符串或仅包含空白字符时抛出。 ConvertToSnakeCase(string) 将驼峰命名的字符串转换为下划线分隔的小写形式（蛇形命名）。 public static string ConvertToSnakeCase(this string input) Parameters input string 要转换的字符串。 Returns string 转换后的蛇形命名字符串。如果输入为null或空，则返回原字符串。 CreateAsDirectory(string, bool) 根据路径创建目录，支持递归创建。 public static void CreateAsDirectory(this string path, bool isFile = false) Parameters path string 目录路径。 isFile bool 是否为文件路径，如果为true，则创建文件所在的目录。默认为false。 EndsWithFast(string, string) 快速检查字符串是否以指定字符串结尾，从末尾开始比较。 public static bool EndsWithFast(this string self, string target) Parameters self string 当前字符串。 target string 要检查的结尾字符串。 Returns bool 如果字符串以指定字符串结尾则返回true，否则返回false。 EqualsFast(string, string) 快速比较两个字符串是否相等，从末尾开始比较。 public static bool EqualsFast(this string self, string target) Parameters self string 当前字符串。 target string 要比较的目标字符串。 Returns bool 如果两个字符串相等则返回true，否则返回false。 Exceptions ArgumentNullException 当前字符串为null时抛出。 IsNotNullOrEmpty(string) 检查字符串是否不为 null 且不为空字符串。 public static bool IsNotNullOrEmpty(this string str) Parameters str string 要检查的字符串。 Returns bool 如果字符串不为 null 且不为空字符串，则返回 true；否则返回 false。 IsNotNullOrEmptyOrWhiteSpace(string) 检查字符串是否不为 null、空字符串且不仅包含空白字符。 public static bool IsNotNullOrEmptyOrWhiteSpace(this string str) Parameters str string 要检查的字符串。 Returns bool 如果字符串不为 null、不为空字符串且不仅包含空白字符，则返回 true；否则返回 false。 IsNotNullOrWhiteSpace(string) 检查字符串是否不为 null 且不仅包含空白字符。 public static bool IsNotNullOrWhiteSpace(this string str) Parameters str string 要检查的字符串。 Returns bool 如果字符串不为 null 且不仅包含空白字符，则返回 true；否则返回 false。 IsNullOrEmpty(string) 检查字符串是否为 null 或空字符串。 public static bool IsNullOrEmpty(this string str) Parameters str string 要检查的字符串。 Returns bool 如果字符串为 null 或空字符串，则返回 true；否则返回 false。 IsNullOrEmptyOrWhiteSpace(string) 检查字符串是否为 null、空字符串或仅包含空白字符。 public static bool IsNullOrEmptyOrWhiteSpace(this string str) Parameters str string 要检查的字符串。 Returns bool 如果字符串为 null、空字符串或仅包含空白字符，则返回 true；否则返回 false。 IsNullOrWhiteSpace(string) 检查字符串是否为 null 或仅包含空白字符。 public static bool IsNullOrWhiteSpace(this string str) Parameters str string 要检查的字符串。 Returns bool 如果字符串为 null 或仅包含空白字符，则返回 true；否则返回 false。 RemoveSuffix(string, char) 从字符串末尾移除指定字符（如果存在）。 public static string RemoveSuffix(this string self, char toRemove) Parameters self string 要处理的字符串。 toRemove char 要移除的字符。 Returns string 移除指定字符后的字符串。如果字符串为null或空，或不以指定字符结尾，则返回原字符串。 RemoveSuffix(string, string) 从字符串末尾移除指定的子字符串（如果存在）。 public static string RemoveSuffix(this string self, string toRemove) Parameters self string 要处理的字符串。 toRemove string 要移除的子字符串。 Returns string 移除指定子字符串后的字符串。如果字符串为null或空，或不以指定子字符串结尾，则返回原字符串。 RemoveWhiteSpace(string) 移除字符串中的所有空白字符。 public static string RemoveWhiteSpace(this string self) Parameters self string 要处理的字符串。 Returns string 移除所有空白字符后的字符串。如果输入为null或空，则返回原字符串。 RepeatChar(char, int) 重复指定字符指定次数。 public static string RepeatChar(this char c, int count) Parameters c char 要重复的字符。 count int 重复次数。 Returns string 由指定字符重复指定次数组成的新字符串。 SplitTo2IntArray(string, char, char) 将字符串按两级分隔符拆分为二维整数数组。 public static int[][] SplitTo2IntArray(this string str, char sep1 = ';', char sep2 = '+') Parameters str string 要拆分的字符串。 sep1 char 第一级分隔符，默认为 ';'。 sep2 char 第二级分隔符，默认为 '+'。 Returns int[][] 拆分并转换后的二维整数数组。如果字符串为null或空，则返回空数组。 SplitToIntArray(string, char) 将字符串按指定分隔符拆分为整数数组。 public static int[] SplitToIntArray(this string str, char sep = '+') Parameters str string 要拆分的字符串。 sep char 分隔符，默认为 '+'。 Returns int[] 拆分并转换后的整数数组。如果字符串为null或空，则返回空数组。 StartsWithFast(string, string) 快速检查字符串是否以指定字符串开头，从开头开始比较。 public static bool StartsWithFast(this string self, string target) Parameters self string 当前字符串。 target string 要检查的开头字符串。 Returns bool 如果字符串以指定字符串开头则返回true，否则返回false。 TrimZhCn(string) 移除字符串中的所有中文字符。 public static string TrimZhCn(this string self) Parameters self string 要处理的字符串。 Returns string 移除所有中文字符后的字符串。 WordWrap(string, int) 将文本按指定宽度自动换行。 public static string WordWrap(this string text, int width) Parameters text string 要换行的文本。 width int 每行的最大宽度。 Returns string 按指定宽度换行后的文本。"
  },
  "api/GameFrameX.Utility.Extensions.ThreadLocalRandom.html": {
    "href": "api/GameFrameX.Utility.Extensions.ThreadLocalRandom.html",
    "title": "Class ThreadLocalRandom | GameFrameX.Server",
    "keywords": "Class ThreadLocalRandom Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll 线程私有random对象 public static class ThreadLocalRandom Inheritance object ThreadLocalRandom Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Current The current random number seed available to this thread public static Random Current { get; } Property Value Random"
  },
  "api/GameFrameX.Utility.Extensions.TimerExtension.html": {
    "href": "api/GameFrameX.Utility.Extensions.TimerExtension.html",
    "title": "Class TimerExtension | GameFrameX.Server",
    "keywords": "Class TimerExtension Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll public static class TimerExtension Inheritance object TimerExtension Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Reset(Timer) 重置计时器 public static void Reset(this Timer timer) Parameters timer Timer"
  },
  "api/GameFrameX.Utility.Extensions.TypeExtensions.html": {
    "href": "api/GameFrameX.Utility.Extensions.TypeExtensions.html",
    "title": "Class TypeExtensions | GameFrameX.Server",
    "keywords": "Class TypeExtensions Namespace GameFrameX.Utility.Extensions Assembly GameFrameX.Utility.dll 提供对 Type 类型的扩展方法。 public static class TypeExtensions Inheritance object TypeExtensions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods IsImplWithInterface(Type, Type) 判断类型是否实现了指定的接口。 public static bool IsImplWithInterface(this Type self, Type target) Parameters self Type 要判断的类型。 target Type 要判断的接口类型。 Returns bool 如果类型实现了指定的接口且不是接口类型或抽象类型，则为 true；否则为 false。"
  },
  "api/GameFrameX.Utility.Extensions.html": {
    "href": "api/GameFrameX.Utility.Extensions.html",
    "title": "Namespace GameFrameX.Utility.Extensions | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.Utility.Extensions Classes AlreadyArgumentException 已经存在参数重复异常 BidirectionalDictionary<TKey, TValue> 双向字典，实现键和值的双向映射。 ByteExtension 提供字节和字节数组的扩展方法，用于各种格式的转换和读写操作。 CollectionExtensions ConcurrentLimitedQueue<T> 定长队列，当队列达到指定长度时，新元素入队会自动移除最旧的元素。 ConstSize 常量型变量的字节数 DateTimeExtensions 提供对 DateTime 类型的扩展方法。 DisposableConcurrentDictionary<TKey, TValue> 值可被Dispose的并发字典类型 DisposableDictionary<TKey, TValue> 值可被Dispose的字典类型 ExpressionExtension 提供对 Expression 类型的扩展方法，用于组合和操作表达式树。 ExpressionVisitorCustom 表达式访问器的自定义实现。 IDictionaryExtensions 字典扩展 IEnumerableExtensions LookupX<TKey, TElement> 表示键和元素之间的多对多关系的集合。 NullableConcurrentDictionary<TKey, TValue> 支持null键和值的并发字典类型 NullableDictionary<TKey, TValue> 支持null-key和value的字典类型 ObjectExtension 守护.用于判断参数 ReadOnlyMemoryExtension ReadOnlySpanExtension SequenceReaderExtension 提供对 SequenceReader<T> 类的扩展方法，用于从只读内存中读取数据。 SpanExtension StringBuilderCache 提供 StringBuilder 的缓存可重用实例 StringExtension 提供对 string 类型的扩展方法。 ThreadLocalRandom 线程私有random对象 TimerExtension TypeExtensions 提供对 Type 类型的扩展方法。 Structs NullObject<T> 表示可为空的对象。"
  },
  "api/GameFrameX.Utility.FiveParam-5.html": {
    "href": "api/GameFrameX.Utility.FiveParam-5.html",
    "title": "Class FiveParam<T1, T2, T3, T4, T5> | GameFrameX.Server",
    "keywords": "Class FiveParam<T1, T2, T3, T4, T5> Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 五个参数 public class FiveParam<T1, T2, T3, T4, T5> : Param Type Parameters T1 T2 T3 T4 T5 Inheritance object Param FiveParam<T1, T2, T3, T4, T5> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors FiveParam(T1, T2, T3, T4, T5) 五个参数 public FiveParam(T1 t1, T2 t2, T3 t3, T4 t4, T5 t5) Parameters t1 T1 t2 T2 t3 T3 t4 T4 t5 T5 Fields Value1 参数1 public readonly T1 Value1 Field Value T1 Value2 参数2 public readonly T2 Value2 Field Value T2 Value3 参数3 public readonly T3 Value3 Field Value T3 Value4 参数4 public readonly T4 Value4 Field Value T4 Value5 参数5 public readonly T5 Value5 Field Value T5"
  },
  "api/GameFrameX.Utility.FourParam-4.html": {
    "href": "api/GameFrameX.Utility.FourParam-4.html",
    "title": "Class FourParam<T1, T2, T3, T4> | GameFrameX.Server",
    "keywords": "Class FourParam<T1, T2, T3, T4> Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 四个参数 public class FourParam<T1, T2, T3, T4> : Param Type Parameters T1 T2 T3 T4 Inheritance object Param FourParam<T1, T2, T3, T4> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors FourParam(T1, T2, T3, T4) 四个参数 public FourParam(T1 t1, T2 t2, T3 t3, T4 t4) Parameters t1 T1 t2 T2 t3 T3 t4 T4 Fields Value1 参数1 public readonly T1 Value1 Field Value T1 Value2 参数2 public readonly T2 Value2 Field Value T2 Value3 参数3 public readonly T3 Value3 Field Value T3 Value4 参数4 public readonly T4 Value4 Field Value T4"
  },
  "api/GameFrameX.Utility.IdGenerator.html": {
    "href": "api/GameFrameX.Utility.IdGenerator.html",
    "title": "Class IdGenerator | GameFrameX.Server",
    "keywords": "Class IdGenerator Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll ID生成器，提供多种生成唯一标识符的方法，包括整数ID、长整数ID和字符串ID public static class IdGenerator Inheritance object IdGenerator Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields UtcTimeStart 全局UTC起始时间，用作计数器的基准时间点 设置为2020年1月1日0时0分0秒(UTC) public static readonly DateTime UtcTimeStart Field Value DateTime Methods GetNextUniqueId() 使用雪花算法生成唯一的长整数ID 基于Yitter.IdGenerator实现，提供分布式环境下的唯一ID生成 public static long GetNextUniqueId() Returns long 返回下一个唯一的长整数ID，保证全局唯一性 GetNextUniqueIntId() 使用Interlocked.Increment生成唯一的整数ID 通过原子操作确保线程安全 public static int GetNextUniqueIntId() Returns int 返回下一个唯一的整数ID，保证递增且不重复 GetUniqueIdString() 生成一个全局唯一的GUID字符串 移除了GUID中的连字符，返回32位的十六进制字符串 public static string GetUniqueIdString() Returns string 返回一个32位的十六进制字符串格式的GUID，不包含连字符"
  },
  "api/GameFrameX.Utility.IllegalWordDetection.html": {
    "href": "api/GameFrameX.Utility.IllegalWordDetection.html",
    "title": "Class IllegalWordDetection | GameFrameX.Server",
    "keywords": "Class IllegalWordDetection Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 此算法思想来源于“http://www.cnblogs.com/sumtec/archive/2008/02/01/1061742.html”,经测试，检测\"屄defg东正教dsa SofU ckd臺灣青年獨\"这个字符串并替换掉敏感词平均花费2.7ms public sealed class IllegalWordDetection Inheritance object IllegalWordDetection Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Methods DetectIllegalWords(string, bool, out Dictionary<int, int>) 判断text是否有敏感词汇,如果有返回敏感的词汇的位置,利用指针操作来加快运算速度 public static bool DetectIllegalWords(string text, bool returnWhenFindFirst, out Dictionary<int, int> findResult) Parameters text string 敏感词查询文本 returnWhenFindFirst bool 是否返回找到的第一个 findResult Dictionary<int, int> 查找到的敏感词结果 Returns bool 是否有敏感词汇 Filter(string, char) 过滤字符串,默认遇到敏感词汇就以'*'代替 public static string Filter(string text, char mask = '*') Parameters text string 要查询的明感词文本 mask char 替换目标字符 Returns string 返回过滤后的文本 HasBlockWords(string) 判断text是否有敏感词汇 public static bool HasBlockWords(string text) Parameters text string Returns bool Init(byte[], int, bool) 通过配置表初始化 public static void Init(byte[] badData, int badIdx = 1, bool backThread = true) Parameters badData byte[] 配置表数据 badIdx int 字段idx，字段类型必须是string（从0开始） backThread bool 是否新开线程执行 Init(string[], bool) 初始化敏感词 public static void Init(string[] badWords, bool backThread = true) Parameters badWords string[] 敏感词列表 backThread bool 是否新开线程执行"
  },
  "api/GameFrameX.Utility.JsonHelper.html": {
    "href": "api/GameFrameX.Utility.JsonHelper.html",
    "title": "Class JsonHelper | GameFrameX.Server",
    "keywords": "Class JsonHelper Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll Json 帮助类 public static class JsonHelper Inheritance object JsonHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields DefaultOptions 默认序列化配置 public static readonly JsonSerializerOptions DefaultOptions Field Value JsonSerializerOptions FormatOptions 格式化序列化配置 public static readonly JsonSerializerOptions FormatOptions Field Value JsonSerializerOptions Methods Deserialize(string, Type) 反序列化对象 public static object Deserialize(string json, Type type) Parameters json string 需要反序列化的 JSON 字符串 type Type 反序列化后的对象类型 Returns object 反序列化后的对象 Deserialize<T>(string) 反序列化对象 public static T Deserialize<T>(string json) where T : class, new() Parameters json string 需要反序列化的 JSON 字符串 Returns T 反序列化后的对象 Type Parameters T 反序列化后的对象类型 Serialize(object) 序列化对象 public static string Serialize(object obj) Parameters obj object 需要序列化的对象 Returns string 序列化后的 JSON 字符串 SerializeFormat(object) 序列化对象且格式化JSON public static string SerializeFormat(object obj) Parameters obj object 需要序列化的对象 Returns string 序列化后的 JSON 字符串"
  },
  "api/GameFrameX.Utility.LNumber.html": {
    "href": "api/GameFrameX.Utility.LNumber.html",
    "title": "Struct LNumber | GameFrameX.Server",
    "keywords": "Struct LNumber Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll public struct LNumber : IComparable<LNumber>, IEquatable<LNumber> Implements IComparable<LNumber> IEquatable<LNumber> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Fields FMax public const long FMax = 9999 Field Value long FRACTION_BITS public const int FRACTION_BITS = 14 Field Value int Max public const long Max = 562949953421311 Field Value long MaxValue public static readonly LNumber MaxValue Field Value LNumber MinValue 最小值 public static readonly LNumber MinValue Field Value LNumber Raw public long Raw Field Value long Zero 0 public static readonly LNumber Zero Field Value LNumber epsilon 1 public static readonly LNumber epsilon Field Value LNumber minus_one -1 public static readonly LNumber minus_one Field Value LNumber one 1 public static readonly LNumber one Field Value LNumber zero 0 public static readonly LNumber zero Field Value LNumber Properties Ceiling 天花板数 public long Ceiling { get; } Property Value long Floor 地板数 public long Floor { get; } Property Value long Methods CompareTo(LNumber) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(LNumber other) Parameters other LNumber An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. Create(long, long) public static LNumber Create(long i, long f) Parameters i long f long Returns LNumber Create_Row(long) public static LNumber Create_Row(long i) Parameters i long Returns LNumber Equals(LNumber) 判断是否相等 public bool Equals(LNumber other) Parameters other LNumber Returns bool Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() 获取哈希 public override int GetHashCode() Returns int ToString() 转为字符串 public override string ToString() Returns string ToString(string) 格式化 public string ToString(string str) Parameters str string Returns string Operators operator +(LNumber, LNumber) 二元操作符 + public static LNumber operator +(LNumber lhs, LNumber rhs) Parameters lhs LNumber rhs LNumber Returns LNumber operator /(LNumber, LNumber) 二元操作符 / public static LNumber operator /(LNumber lhs, LNumber rhs) Parameters lhs LNumber rhs LNumber Returns LNumber operator ==(LNumber, LNumber) 比较运算符 == public static bool operator ==(LNumber lhs, LNumber rhs) Parameters lhs LNumber rhs LNumber Returns bool explicit operator double(LNumber) double类型转换 public static explicit operator double(LNumber number) Parameters number LNumber Returns double explicit operator long(LNumber) long类型转换 public static explicit operator long(LNumber number) Parameters number LNumber Returns long operator >(LNumber, LNumber) 比较运算符 > public static bool operator >(LNumber lhs, LNumber rhs) Parameters lhs LNumber rhs LNumber Returns bool operator >=(LNumber, LNumber) 比较运算符 >= public static bool operator >=(LNumber lhs, LNumber rhs) Parameters lhs LNumber rhs LNumber Returns bool implicit operator float(LNumber) float 类型转换 public static implicit operator float(LNumber number) Parameters number LNumber Returns float implicit operator LNumber(int) 赋值运算 public static implicit operator LNumber(int value) Parameters value int Returns LNumber implicit operator LNumber(long) 赋值运算 public static implicit operator LNumber(long value) Parameters value long Returns LNumber operator !=(LNumber, LNumber) 比较运算符 != public static bool operator !=(LNumber lhs, LNumber rhs) Parameters lhs LNumber rhs LNumber Returns bool operator <(LNumber, LNumber) 比较运算符 小于 public static bool operator <(LNumber lhs, LNumber rhs) Parameters lhs LNumber rhs LNumber Returns bool operator <=(LNumber, LNumber) 比较运算符 小于等于 public static bool operator <=(LNumber lhs, LNumber rhs) Parameters lhs LNumber rhs LNumber Returns bool operator %(LNumber, LNumber) 二元操作符 % public static LNumber operator %(LNumber lhs, LNumber rhs) Parameters lhs LNumber rhs LNumber Returns LNumber operator *(LNumber, LNumber) 二元操作符 * public static LNumber operator *(LNumber lhs, LNumber rhs) Parameters lhs LNumber rhs LNumber Returns LNumber operator -(LNumber, LNumber) 二元操作符 - public static LNumber operator -(LNumber lhs, LNumber rhs) Parameters lhs LNumber rhs LNumber Returns LNumber operator -(LNumber) 一元操作符 - (负数操作) public static LNumber operator -(LNumber x) Parameters x LNumber Returns LNumber"
  },
  "api/GameFrameX.Utility.Log.LogHelper.html": {
    "href": "api/GameFrameX.Utility.Log.LogHelper.html",
    "title": "Class LogHelper | GameFrameX.Server",
    "keywords": "Class LogHelper Namespace GameFrameX.Utility.Log Assembly GameFrameX.Utility.dll 日志帮助类 public static class LogHelper Inheritance object LogHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Console(string, params object[]) 记录带有格式参数的信息消息。,只打印到控制台 public static void Console(string message, params object[] args) Parameters message string 要记录的信息消息。 args object[] 消息的格式参数。 Debug(string, params object[]) 记录带有可选格式参数的调试消息。 public static void Debug(string msg, params object[] args) Parameters msg string 要记录的调试消息。 args object[] 消息的可选格式参数。 DebugConsole(string, params object[]) 记录带有可选格式参数的调试消息。并控制台打印 public static void DebugConsole(string msg, params object[] args) Parameters msg string 要记录的调试消息。 args object[] 消息的可选格式参数。 Error(Exception) 记录严重的异常错误 public static void Error(Exception exception) Parameters exception Exception 异常 Error(string, params object[]) 记录带有格式参数的错误消息。 public static void Error(string msg, params object[] args) Parameters msg string 要记录的错误消息。 args object[] 消息的格式参数。 ErrorConsole(string, params object[]) 记录带有格式参数的错误消息。 public static void ErrorConsole(string msg, params object[] args) Parameters msg string 要记录的错误消息。 args object[] 消息的格式参数。 Fatal(Exception) 记录严重的异常错误。 public static void Fatal(Exception msg) Parameters msg Exception 要记录的异常对象。 Fatal(string) 记录严重错误消息。 public static void Fatal(string msg) Parameters msg string 要记录的严重错误消息。 Info(Exception) 记录信息消息。 public static void Info(Exception msg) Parameters msg Exception 要记录的异常对象。 Info(object) 记录信息消息 public static void Info(object message) Parameters message object 要记录的信息对象 Info(string, params object[]) 记录带有格式参数的信息消息。 public static void Info(string msg, params object[] args) Parameters msg string 要记录的信息消息。 args object[] 消息的格式参数。 InfoConsole(string, params object[]) 记录带有格式参数的信息消息。并控制台打印 public static void InfoConsole(string msg, params object[] args) Parameters msg string 要记录的信息消息。 args object[] 消息的格式参数。 Warn(string, params object[]) 记录带有格式参数的警告消息。 public static void Warn(string msg, params object[] args) Parameters msg string 要记录的警告消息。 args object[] 消息的格式参数。 WarnConsole(string, params object[]) 记录带有格式参数的警告消息。 public static void WarnConsole(string msg, params object[] args) Parameters msg string 要记录的警告消息。 args object[] 消息的格式参数。"
  },
  "api/GameFrameX.Utility.Log.LogOptions.html": {
    "href": "api/GameFrameX.Utility.Log.LogOptions.html",
    "title": "Class LogOptions | GameFrameX.Server",
    "keywords": "Class LogOptions Namespace GameFrameX.Utility.Log Assembly GameFrameX.Utility.dll 日志配置类，用于配置日志的相关选项。 public sealed class LogOptions Inheritance object LogOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Fields Default 默认配置对象，提供一个默认的日志配置实例。 public static readonly LogOptions Default Field Value LogOptions Properties FileSizeLimitBytes 日志单个文件大小限制，默认为 10MB。 当 IsFileSizeLimit 为 true 时有效。 public int FileSizeLimitBytes { get; set; } Property Value int IsConsole 是否输出到控制台，默认为 true。 public bool IsConsole { get; set; } Property Value bool IsFileSizeLimit 是否限制单个文件大小，默认为 true。 public bool IsFileSizeLimit { get; set; } Property Value bool LogEventLevel 日志输出级别，默认为 Debug。 public LogEventLevel LogEventLevel { get; set; } Property Value LogEventLevel LogSavePath 日志存储路径，默认为 ./logs。 public string LogSavePath { get; set; } Property Value string RollingInterval 日志滚动间隔，默认为每小时（Hour）。 public RollingInterval RollingInterval { get; set; } Property Value RollingInterval ServerType 服务器类型，用于标识日志来源的服务器类型。 public string ServerType { get; set; } Property Value string Methods ToString() 返回日志配置对象的 JSON 字符串表示形式。 public override string ToString() Returns string JSON 字符串表示形式。"
  },
  "api/GameFrameX.Utility.Log.LoggerHandler.html": {
    "href": "api/GameFrameX.Utility.Log.LoggerHandler.html",
    "title": "Class LoggerHandler | GameFrameX.Server",
    "keywords": "Class LoggerHandler Namespace GameFrameX.Utility.Log Assembly GameFrameX.Utility.dll 日志对象 public static class LoggerHandler Inheritance object LoggerHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Start(LogOptions) 启动日志对象 public static void Start(LogOptions logOptions) Parameters logOptions LogOptions"
  },
  "api/GameFrameX.Utility.Log.html": {
    "href": "api/GameFrameX.Utility.Log.html",
    "title": "Namespace GameFrameX.Utility.Log | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.Utility.Log Classes LogHelper 日志帮助类 LogOptions 日志配置类，用于配置日志的相关选项。 LoggerHandler 日志对象"
  },
  "api/GameFrameX.Utility.Math.FP.html": {
    "href": "api/GameFrameX.Utility.Math.FP.html",
    "title": "Struct FP | GameFrameX.Server",
    "keywords": "Struct FP Namespace GameFrameX.Utility.Math Assembly GameFrameX.Utility.dll Represents a Q31.32 fixed-point number. [Serializable] public struct FP : IEquatable<FP>, IComparable<FP> Implements IEquatable<FP> IComparable<FP> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors FP(int) public FP(int value) Parameters value int Fields AcosLut public static readonly long[] AcosLut Field Value long[] Deg2Rad public static readonly FP Deg2Rad Field Value FP EN1 public static readonly FP EN1 Field Value FP EN2 public static readonly FP EN2 Field Value FP EN3 public static readonly FP EN3 Field Value FP EN4 public static readonly FP EN4 Field Value FP EN5 public static readonly FP EN5 Field Value FP EN6 public static readonly FP EN6 Field Value FP EN7 public static readonly FP EN7 Field Value FP EN8 public static readonly FP EN8 Field Value FP Epsilon public static readonly FP Epsilon Field Value FP FRACTIONAL_PLACES public const int FRACTIONAL_PLACES = 32 Field Value int HALF public const long HALF = 2147483648 Field Value long Half public static readonly FP Half Field Value FP LN2 public const long LN2 = 2977044471 Field Value long LOG2MAX public const long LOG2MAX = 133143986176 Field Value long LOG2MIN public const long LOG2MIN = -137438953472 Field Value long LUT_SIZE public const int LUT_SIZE = 205887 Field Value int Ln2 public static readonly FP Ln2 Field Value FP Log2Max public static readonly FP Log2Max Field Value FP Log2Min public static readonly FP Log2Min Field Value FP LutInterval public static readonly FP LutInterval Field Value FP MAX_VALUE public const long MAX_VALUE = 9223372036854775807 Field Value long MIN_VALUE public const long MIN_VALUE = -9223372036854775808 Field Value long MaxValue public static readonly FP MaxValue Field Value FP MinValue public static readonly FP MinValue Field Value FP NUM_BITS public const int NUM_BITS = 64 Field Value int NaN public static readonly FP NaN Field Value FP NegativeInfinity public static readonly FP NegativeInfinity Field Value FP ONE public const long ONE = 4294967296 Field Value long One public static readonly FP One Field Value FP PI public const long PI = 13493037704 Field Value long PI_OVER_2 public const long PI_OVER_2 = 6746518852 Field Value long PI_TIMES_2 public const long PI_TIMES_2 = 26986075409 Field Value long Pi The value of Pi public static readonly FP Pi Field Value FP PiInv public static readonly FP PiInv Field Value FP PiOver2 public static readonly FP PiOver2 Field Value FP PiOver2Inv public static readonly FP PiOver2Inv Field Value FP PiTimes2 public static readonly FP PiTimes2 Field Value FP PositiveInfinity public static readonly FP PositiveInfinity Field Value FP Precision public static readonly decimal Precision Field Value decimal Rad2Deg public static readonly FP Rad2Deg Field Value FP SinLut public static readonly long[] SinLut Field Value long[] TEN public const long TEN = 42949672960 Field Value long TanLut public static readonly long[] TanLut Field Value long[] Ten public static readonly FP Ten Field Value FP Zero public static readonly FP Zero Field Value FP _serializedValue public long _serializedValue Field Value long Properties RawValue The underlying integer representation public long RawValue { get; } Property Value long Methods Abs(FP) Returns the absolute value of a Fix64 number. Note: Abs(Fix64.MinValue) == Fix64.MaxValue. public static FP Abs(FP value) Parameters value FP Returns FP Acos(FP) Returns the arccos of of the specified number, calculated using Atan and Sqrt This function has at least 7 decimals of accuracy. public static FP Acos(FP x) Parameters x FP Returns FP AsDecimal() public decimal AsDecimal() Returns decimal AsDouble() public double AsDouble() Returns double AsFloat() public float AsFloat() Returns float AsInt() public int AsInt() Returns int AsLong() public long AsLong() Returns long AsUInt() public uint AsUInt() Returns uint Asin(FP) public static FP Asin(FP value) Parameters value FP Returns FP Atan(FP) Returns the arctan of of the specified number, calculated using Euler series This function has at least 7 decimals of accuracy. public static FP Atan(FP z) Parameters z FP Returns FP Atan2(FP, FP) public static FP Atan2(FP y, FP x) Parameters y FP x FP Returns FP Ceiling(FP) Returns the smallest integral value that is greater than or equal to the specified number. public static FP Ceiling(FP value) Parameters value FP Returns FP Clamp(FP, FP, FP) public static FP Clamp(FP origin, FP min, FP max) Parameters origin FP min FP max FP Returns FP ClampSinValue(long, out bool, out bool) public static long ClampSinValue(long angle, out bool flipHorizontal, out bool flipVertical) Parameters angle long flipHorizontal bool flipVertical bool Returns long CompareTo(FP) Compares the current instance with another object of the same type and returns an integer that indicates whether the current instance precedes, follows, or occurs in the same position in the sort order as the other object. public int CompareTo(FP other) Parameters other FP An object to compare with this instance. Returns int A value that indicates the relative order of the objects being compared. The return value has these meanings: Value Meaning Less than zero This instance precedes other in the sort order. Zero This instance occurs in the same position in the sort order as other. Greater than zero This instance follows other in the sort order. Cos(FP) Returns the cosine of x. See Sin() for more details. public static FP Cos(FP x) Parameters x FP Returns FP CountLeadingZeroes(ulong) public static int CountLeadingZeroes(ulong x) Parameters x ulong Returns int Equals(FP) Indicates whether the current object is equal to another object of the same type. public bool Equals(FP other) Parameters other FP An object to compare with this object. Returns bool true if the current object is equal to the other parameter; otherwise, false. Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. FastAbs(FP) Returns the absolute value of a Fix64 number. FastAbs(Fix64.MinValue) is undefined. public static FP FastAbs(FP value) Parameters value FP Returns FP FastAdd(FP, FP) Adds x and y witout performing overflow checking. Should be inlined by the CLR. public static FP FastAdd(FP x, FP y) Parameters x FP y FP Returns FP FastCos(FP) Returns a rough approximation of the cosine of x. See FastSin for more details. public static FP FastCos(FP x) Parameters x FP Returns FP FastMod(FP, FP) Performs modulo as fast as possible; throws if x == MinValue and y == -1. Use the operator (%) for a more reliable but slower modulo. public static FP FastMod(FP x, FP y) Parameters x FP y FP Returns FP FastMul(FP, FP) Performs multiplication without checking for overflow. Useful for performance-critical code where the values are guaranteed not to cause overflow public static FP FastMul(FP x, FP y) Parameters x FP y FP Returns FP FastSin(FP) Returns a rough approximation of the Sine of x. This is at least 3 times faster than Sin() on x86 and slightly faster than Math.Sin(), however its accuracy is limited to 4-5 decimals, for small enough values of x. public static FP FastSin(FP x) Parameters x FP Returns FP FastSub(FP, FP) Subtracts y from x witout performing overflow checking. Should be inlined by the CLR. public static FP FastSub(FP x, FP y) Parameters x FP y FP Returns FP Floor(FP) Returns the largest integer less than or equal to the specified number. public static FP Floor(FP value) Parameters value FP Returns FP FromRaw(long) public static FP FromRaw(long rawValue) Parameters rawValue long Returns FP GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. IsInfinity(FP) public static bool IsInfinity(FP value) Parameters value FP Returns bool IsNaN(FP) public static bool IsNaN(FP value) Parameters value FP Returns bool Ln(FP) Returns the natural logarithm of a specified number. Provides at least 7 decimals of accuracy. public static FP Ln(FP x) Parameters x FP Returns FP Exceptions ArgumentOutOfRangeException The argument was non-positive Max(FP, FP) public static FP Max(FP left, FP right) Parameters left FP right FP Returns FP Min(FP, FP) public static FP Min(FP left, FP right) Parameters left FP right FP Returns FP OverflowAdd(FP, FP) Adds x and y performing overflow checking. Should be inlined by the CLR. public static FP OverflowAdd(FP x, FP y) Parameters x FP y FP Returns FP OverflowMul(FP, FP) Performs multiplication without checking for overflow. Useful for performance-critical code where the values are guaranteed not to cause overflow public static FP OverflowMul(FP x, FP y) Parameters x FP y FP Returns FP OverflowSub(FP, FP) Subtracts y from x witout performing overflow checking. Should be inlined by the CLR. public static FP OverflowSub(FP x, FP y) Parameters x FP y FP Returns FP Round(FP) Rounds a value to the nearest integral value. If the value is halfway between an even and an uneven value, returns the even value. public static FP Round(FP value) Parameters value FP Returns FP Sign(FP) Returns a number indicating the sign of a Fix64 number. Returns 1 if the value is positive, 0 if is 0, and -1 if it is negative. public static int Sign(FP value) Parameters value FP Returns int Sin(FP) Returns the Sine of x. This function has about 9 decimals of accuracy for small values of x. It may lose accuracy as the value of x grows. Performance: about 25% slower than Math.Sin() in x64, and 200% slower in x86. public static FP Sin(FP x) Parameters x FP Returns FP Sqrt(FP) Returns the square root of a specified number. public static FP Sqrt(FP x) Parameters x FP Returns FP Exceptions ArgumentOutOfRangeException The argument was negative. Tan(FP) Returns the tangent of x. public static FP Tan(FP x) Parameters x FP Returns FP Remarks This function is not well-tested. It may be wildly inaccurate. ToFloat(FP) public static float ToFloat(FP value) Parameters value FP Returns float ToInt(FP) public static int ToInt(FP value) Parameters value FP Returns int ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. ToString(IFormatProvider) public string ToString(IFormatProvider provider) Parameters provider IFormatProvider Returns string ToString(string) public string ToString(string format) Parameters format string Returns string ToUInt(FP) public static uint ToUInt(FP value) Parameters value FP Returns uint Operators operator +(FP, FP) Adds x and y. Performs saturating addition, i.e. in case of overflow, rounds to MinValue or MaxValue depending on sign of operands. public static FP operator +(FP x, FP y) Parameters x FP y FP Returns FP operator /(FP, FP) public static FP operator /(FP x, FP y) Parameters x FP y FP Returns FP operator ==(FP, FP) public static bool operator ==(FP x, FP y) Parameters x FP y FP Returns bool explicit operator decimal(FP) public static explicit operator decimal(FP value) Parameters value FP Returns decimal explicit operator long(FP) public static explicit operator long(FP value) Parameters value FP Returns long explicit operator float(FP) public static explicit operator float(FP value) Parameters value FP Returns float explicit operator FP(decimal) public static explicit operator FP(decimal value) Parameters value decimal Returns FP operator >(FP, FP) public static bool operator >(FP x, FP y) Parameters x FP y FP Returns bool operator >=(FP, FP) public static bool operator >=(FP x, FP y) Parameters x FP y FP Returns bool implicit operator FP(int) public static implicit operator FP(int value) Parameters value int Returns FP implicit operator FP(long) public static implicit operator FP(long value) Parameters value long Returns FP operator !=(FP, FP) public static bool operator !=(FP x, FP y) Parameters x FP y FP Returns bool operator <(FP, FP) public static bool operator <(FP x, FP y) Parameters x FP y FP Returns bool operator <=(FP, FP) public static bool operator <=(FP x, FP y) Parameters x FP y FP Returns bool operator %(FP, FP) public static FP operator %(FP x, FP y) Parameters x FP y FP Returns FP operator *(FP, FP) public static FP operator *(FP x, FP y) Parameters x FP y FP Returns FP operator -(FP, FP) Subtracts y from x. Performs saturating substraction, i.e. in case of overflow, rounds to MinValue or MaxValue depending on sign of operands. public static FP operator -(FP x, FP y) Parameters x FP y FP Returns FP operator -(FP) public static FP operator -(FP x) Parameters x FP Returns FP"
  },
  "api/GameFrameX.Utility.Math.FPMath.html": {
    "href": "api/GameFrameX.Utility.Math.FPMath.html",
    "title": "Class FPMath | GameFrameX.Server",
    "keywords": "Class FPMath Namespace GameFrameX.Utility.Math Assembly GameFrameX.Utility.dll Contains common math operations. public sealed class FPMath Inheritance object FPMath Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Fields Deg2Rad public static FP Deg2Rad Field Value FP Epsilon A small value often used to decide if numeric results are zero. public static FP Epsilon Field Value FP Infinity public static FP Infinity Field Value FP Pi PI constant. public static FP Pi Field Value FP PiOver2 public static FP PiOver2 Field Value FP Rad2Deg public static FP Rad2Deg Field Value FP Methods Abs(FP) Returns the absolute value of a Fix64 number. Note: Abs(Fix64.MinValue) == Fix64.MaxValue. public static FP Abs(FP value) Parameters value FP Returns FP Absolute(ref FPMatrix, out FPMatrix) Changes every sign of the matrix entry to '+' public static void Absolute(ref FPMatrix matrix, out FPMatrix result) Parameters matrix FPMatrix The matrix. result FPMatrix The absolute matrix. Acos(FP) Returns the arc cosine of value. public static FP Acos(FP value) Parameters value FP Returns FP Asin(FP) Returns the arc sine of value. public static FP Asin(FP value) Parameters value FP Returns FP Atan(FP) Returns the arc tan of value. public static FP Atan(FP value) Parameters value FP Returns FP Atan2(FP, FP) Returns the arc tan of coordinates x-y. public static FP Atan2(FP y, FP x) Parameters y FP x FP Returns FP Barycentric(FP, FP, FP, FP, FP) Returns the barycentric interpolation of three values. public static FP Barycentric(FP value1, FP value2, FP value3, FP amount1, FP amount2) Parameters value1 FP value2 FP value3 FP amount1 FP amount2 FP Returns FP CatmullRom(FP, FP, FP, FP, FP) Returns the CatmullRom interpolation of four values. public static FP CatmullRom(FP value1, FP value2, FP value3, FP value4, FP amount) Parameters value1 FP value2 FP value3 FP value4 FP amount FP Returns FP Ceiling(FP) Returns the smallest integral value that is greater than or equal to the specified number. public static FP Ceiling(FP value) Parameters value FP Returns FP Clamp(FP, FP, FP) Returns a number which is within [min,max] public static FP Clamp(FP value, FP min, FP max) Parameters value FP The value to clamp. min FP The minimum value. max FP The maximum value. Returns FP The clamped value. Clamp01(FP) Returns a number which is within [FP.Zero, FP.One] public static FP Clamp01(FP value) Parameters value FP The value to clamp. Returns FP The clamped value. Cos(FP) Returns the cosine of value. public static FP Cos(FP value) Parameters value FP Returns FP DeltaAngle(FP, FP) Returns the angle between two vectors. public static FP DeltaAngle(FP current, FP target) Parameters current FP target FP Returns FP Distance(FP, FP) Returns the distance between two values. public static FP Distance(FP value1, FP value2) Parameters value1 FP value2 FP Returns FP Floor(FP) Returns the largest integer less than or equal to the specified number. public static FP Floor(FP value) Parameters value FP Returns FP Hermite(FP, FP, FP, FP, FP) Returns the Hermite interpolation of two values. public static FP Hermite(FP value1, FP tangent1, FP value2, FP tangent2, FP amount) Parameters value1 FP tangent1 FP value2 FP tangent2 FP amount FP Returns FP InverseLerp(FP, FP, FP) Returns the inverse linear interpolation of two values. public static FP InverseLerp(FP value1, FP value2, FP amount) Parameters value1 FP value2 FP amount FP Returns FP Lerp(FP, FP, FP) Returns the linear interpolation of two values. public static FP Lerp(FP value1, FP value2, FP amount) Parameters value1 FP value2 FP amount FP Returns FP Max(FP, FP) Gets the maximum number of two values. public static FP Max(FP val1, FP val2) Parameters val1 FP The first value. val2 FP The second value. Returns FP Returns the largest value. Max(FP, FP, FP) Gets the maximum number of three values. public static FP Max(FP val1, FP val2, FP val3) Parameters val1 FP The first value. val2 FP The second value. val3 FP The third value. Returns FP Returns the largest value. Min(FP, FP) Gets the minimum number of two values. public static FP Min(FP val1, FP val2) Parameters val1 FP The first value. val2 FP The second value. Returns FP Returns the smallest value. MoveTowards(FP, FP, FP) Returns a value that is limited between a minimum and a maximum value. public static FP MoveTowards(FP current, FP target, FP maxDelta) Parameters current FP target FP maxDelta FP Returns FP MoveTowardsAngle(FP, FP, FP) Returns the angle between two vectors. public static FP MoveTowardsAngle(FP current, FP target, FP maxDelta) Parameters current FP target FP maxDelta FP Returns FP Pow(FP, FP) Returns a specified number raised to the specified power. Provides about 5 digits of accuracy for the result. public static FP Pow(FP b, FP exp) Parameters b FP exp FP Returns FP Exceptions DivideByZeroException The base was zero, with a negative exponent ArgumentOutOfRangeException The base was negative, with a non-zero exponent Repeat(FP, FP) Returns the smallest integral value that is greater than or equal to the specified number. public static FP Repeat(FP t, FP length) Parameters t FP length FP Returns FP Round(FP) Rounds a value to the nearest integral value. If the value is halfway between an even and an uneven value, returns the even value. public static FP Round(FP value) Parameters value FP Returns FP Sign(FP) Returns a number indicating the sign of a Fix64 number. Returns 1 if the value is positive, 0 if is 0, and -1 if it is negative. public static int Sign(FP value) Parameters value FP Returns int Sin(FP) Returns the sine of value. public static FP Sin(FP value) Parameters value FP Returns FP SmoothDamp(FP, FP, ref FP, FP) Returns the value of a smooth damping function. public static FP SmoothDamp(FP current, FP target, ref FP currentVelocity, FP smoothTime) Parameters current FP target FP currentVelocity FP smoothTime FP Returns FP SmoothDamp(FP, FP, ref FP, FP, FP) Returns the value of a smooth damping function. public static FP SmoothDamp(FP current, FP target, ref FP currentVelocity, FP smoothTime, FP maxSpeed) Parameters current FP target FP currentVelocity FP smoothTime FP maxSpeed FP Returns FP SmoothDamp(FP, FP, ref FP, FP, FP, FP) Returns the value of a smooth damping function. public static FP SmoothDamp(FP current, FP target, ref FP currentVelocity, FP smoothTime, FP maxSpeed, FP deltaTime) Parameters current FP target FP currentVelocity FP smoothTime FP maxSpeed FP deltaTime FP Returns FP SmoothStep(FP, FP, FP) Returns the smooth Hermite interpolation of two values. public static FP SmoothStep(FP value1, FP value2, FP amount) Parameters value1 FP value2 FP amount FP Returns FP Sqrt(FP) Gets the square root. public static FP Sqrt(FP number) Parameters number FP The number to get the square root from. Returns FP Tan(FP) Returns the tan of value. public static FP Tan(FP value) Parameters value FP Returns FP"
  },
  "api/GameFrameX.Utility.Math.FPMatrix.html": {
    "href": "api/GameFrameX.Utility.Math.FPMatrix.html",
    "title": "Struct FPMatrix | GameFrameX.Server",
    "keywords": "Struct FPMatrix Namespace GameFrameX.Utility.Math Assembly GameFrameX.Utility.dll 3x3 Matrix. public struct FPMatrix Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors FPMatrix(FP, FP, FP, FP, FP, FP, FP, FP, FP) Initializes a new instance of the matrix structure. public FPMatrix(FP m11, FP m12, FP m13, FP m21, FP m22, FP m23, FP m31, FP m32, FP m33) Parameters m11 FP m11 m12 FP m12 m13 FP m13 m21 FP m21 m22 FP m22 m23 FP m23 m31 FP m31 m32 FP m32 m33 FP m33 Fields Identity Identity matrix. public static readonly FPMatrix Identity Field Value FPMatrix M11 M11 public FP M11 Field Value FP M12 M12 public FP M12 Field Value FP M13 M13 public FP M13 Field Value FP M21 M21 public FP M21 Field Value FP M22 M22 public FP M22 Field Value FP M23 M23 public FP M23 Field Value FP M31 M31 public FP M31 Field Value FP M32 M32 public FP M32 Field Value FP M33 M33 public FP M33 Field Value FP Zero public static readonly FPMatrix Zero Field Value FPMatrix Properties eulerAngles public FPVector3 eulerAngles { get; } Property Value FPVector3 Methods Add(FPMatrix, FPMatrix) Matrices are added. public static FPMatrix Add(FPMatrix matrix1, FPMatrix matrix2) Parameters matrix1 FPMatrix The first matrix. matrix2 FPMatrix The second matrix. Returns FPMatrix The sum of both matrices. Add(ref FPMatrix, ref FPMatrix, out FPMatrix) Matrices are added. public static void Add(ref FPMatrix matrix1, ref FPMatrix matrix2, out FPMatrix result) Parameters matrix1 FPMatrix The first matrix. matrix2 FPMatrix The second matrix. result FPMatrix The sum of both matrices. AngleAxis(FP, FPVector3) Creates a matrix which rotates around the given axis by the given angle. public static FPMatrix AngleAxis(FP angle, FPVector3 axis) Parameters angle FP The angle. axis FPVector3 The axis. Returns FPMatrix The resulting rotation matrix CreateFromAxisAngle(ref FPVector3, FP, out FPMatrix) Creates a matrix which rotates around the given axis by the given angle. public static void CreateFromAxisAngle(ref FPVector3 axis, FP angle, out FPMatrix result) Parameters axis FPVector3 The axis. angle FP The angle. result FPMatrix The resulting rotation matrix CreateFromLookAt(FPVector3, FPVector3) Creates a JMatrix representing an orientation from a quaternion. public static FPMatrix CreateFromLookAt(FPVector3 position, FPVector3 target) Parameters position FPVector3 target FPVector3 Returns FPMatrix JMatrix representing an orientation. CreateFromQuaternion(FPQuaternion) public static FPMatrix CreateFromQuaternion(FPQuaternion quaternion) Parameters quaternion FPQuaternion Returns FPMatrix CreateFromQuaternion(ref FPQuaternion, out FPMatrix) Creates a JMatrix representing an orientation from a quaternion. public static void CreateFromQuaternion(ref FPQuaternion quaternion, out FPMatrix result) Parameters quaternion FPQuaternion The quaternion the matrix should be created from. result FPMatrix JMatrix representing an orientation. CreateFromYawPitchRoll(FP, FP, FP) public static FPMatrix CreateFromYawPitchRoll(FP yaw, FP pitch, FP roll) Parameters yaw FP pitch FP roll FP Returns FPMatrix CreateRotationX(FP) public static FPMatrix CreateRotationX(FP radians) Parameters radians FP Returns FPMatrix CreateRotationX(FP, out FPMatrix) public static void CreateRotationX(FP radians, out FPMatrix result) Parameters radians FP result FPMatrix CreateRotationY(FP) public static FPMatrix CreateRotationY(FP radians) Parameters radians FP Returns FPMatrix CreateRotationY(FP, out FPMatrix) public static void CreateRotationY(FP radians, out FPMatrix result) Parameters radians FP result FPMatrix CreateRotationZ(FP) public static FPMatrix CreateRotationZ(FP radians) Parameters radians FP Returns FPMatrix CreateRotationZ(FP, out FPMatrix) public static void CreateRotationZ(FP radians, out FPMatrix result) Parameters radians FP result FPMatrix Determinant() public FP Determinant() Returns FP Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Inverse(FPMatrix) Calculates the inverse of a give matrix. public static FPMatrix Inverse(FPMatrix matrix) Parameters matrix FPMatrix The matrix to invert. Returns FPMatrix The inverted JMatrix. Inverse(ref FPMatrix, out FPMatrix) Calculates the inverse of a give matrix. public static void Inverse(ref FPMatrix matrix, out FPMatrix result) Parameters matrix FPMatrix The matrix to invert. result FPMatrix The inverted JMatrix. Invert(ref FPMatrix, out FPMatrix) public static void Invert(ref FPMatrix matrix, out FPMatrix result) Parameters matrix FPMatrix result FPMatrix LookAt(FPVector3, FPVector3) public static FPMatrix LookAt(FPVector3 forward, FPVector3 upwards) Parameters forward FPVector3 upwards FPVector3 Returns FPMatrix LookAt(FPVector3, FPVector3, out FPMatrix) public static void LookAt(FPVector3 forward, FPVector3 upwards, out FPMatrix result) Parameters forward FPVector3 upwards FPVector3 result FPMatrix Multiply(FPMatrix, FP) Multiply a matrix by a scalefactor. public static FPMatrix Multiply(FPMatrix matrix1, FP scaleFactor) Parameters matrix1 FPMatrix The matrix. scaleFactor FP The scale factor. Returns FPMatrix A JMatrix multiplied by the scale factor. Multiply(FPMatrix, FPMatrix) Multiply two matrices. Notice: matrix multiplication is not commutative. public static FPMatrix Multiply(FPMatrix matrix1, FPMatrix matrix2) Parameters matrix1 FPMatrix The first matrix. matrix2 FPMatrix The second matrix. Returns FPMatrix The product of both matrices. Multiply(ref FPMatrix, FP, out FPMatrix) Multiply a matrix by a scalefactor. public static void Multiply(ref FPMatrix matrix1, FP scaleFactor, out FPMatrix result) Parameters matrix1 FPMatrix The matrix. scaleFactor FP The scale factor. result FPMatrix A JMatrix multiplied by the scale factor. Multiply(ref FPMatrix, ref FPMatrix, out FPMatrix) Multiply two matrices. Notice: matrix multiplication is not commutative. public static void Multiply(ref FPMatrix matrix1, ref FPMatrix matrix2, out FPMatrix result) Parameters matrix1 FPMatrix The first matrix. matrix2 FPMatrix The second matrix. result FPMatrix The product of both matrices. ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Trace() public FP Trace() Returns FP Transpose(FPMatrix) Creates the transposed matrix. public static FPMatrix Transpose(FPMatrix matrix) Parameters matrix FPMatrix The matrix which should be transposed. Returns FPMatrix The transposed JMatrix. Transpose(ref FPMatrix, out FPMatrix) Creates the transposed matrix. public static void Transpose(ref FPMatrix matrix, out FPMatrix result) Parameters matrix FPMatrix The matrix which should be transposed. result FPMatrix The transposed JMatrix. Operators operator +(FPMatrix, FPMatrix) Adds two matrices. public static FPMatrix operator +(FPMatrix value1, FPMatrix value2) Parameters value1 FPMatrix The first matrix. value2 FPMatrix The second matrix. Returns FPMatrix The sum of both values. operator ==(FPMatrix, FPMatrix) public static bool operator ==(FPMatrix value1, FPMatrix value2) Parameters value1 FPMatrix value2 FPMatrix Returns bool operator !=(FPMatrix, FPMatrix) public static bool operator !=(FPMatrix value1, FPMatrix value2) Parameters value1 FPMatrix value2 FPMatrix Returns bool operator *(FPMatrix, FPMatrix) Multiplies two matrices. public static FPMatrix operator *(FPMatrix value1, FPMatrix value2) Parameters value1 FPMatrix The first matrix. value2 FPMatrix The second matrix. Returns FPMatrix The product of both values. operator -(FPMatrix, FPMatrix) Subtracts two matrices. public static FPMatrix operator -(FPMatrix value1, FPMatrix value2) Parameters value1 FPMatrix The first matrix. value2 FPMatrix The second matrix. Returns FPMatrix The difference of both values."
  },
  "api/GameFrameX.Utility.Math.FPMatrix4x4.html": {
    "href": "api/GameFrameX.Utility.Math.FPMatrix4x4.html",
    "title": "Struct FPMatrix4x4 | GameFrameX.Server",
    "keywords": "Struct FPMatrix4x4 Namespace GameFrameX.Utility.Math Assembly GameFrameX.Utility.dll 3x3 Matrix. public struct FPMatrix4x4 Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors FPMatrix4x4(FP, FP, FP, FP, FP, FP, FP, FP, FP, FP, FP, FP, FP, FP, FP, FP) Initializes a new instance of the matrix structure. public FPMatrix4x4(FP m11, FP m12, FP m13, FP m14, FP m21, FP m22, FP m23, FP m24, FP m31, FP m32, FP m33, FP m34, FP m41, FP m42, FP m43, FP m44) Parameters m11 FP m11 m12 FP m12 m13 FP m13 m14 FP m14 m21 FP m21 m22 FP m22 m23 FP m23 m24 FP m24 m31 FP m31 m32 FP m32 m33 FP m33 m34 FP m34 m41 FP m41 m42 FP m42 m43 FP m43 m44 FP m44 Fields Identity Identity matrix. public static readonly FPMatrix4x4 Identity Field Value FPMatrix4x4 M11 M11 public FP M11 Field Value FP M12 M12 public FP M12 Field Value FP M13 M13 public FP M13 Field Value FP M14 M14 public FP M14 Field Value FP M21 M21 public FP M21 Field Value FP M22 M22 public FP M22 Field Value FP M23 M23 public FP M23 Field Value FP M24 M24 public FP M24 Field Value FP M31 M31 public FP M31 Field Value FP M32 M32 public FP M32 Field Value FP M33 M33 public FP M33 Field Value FP M34 M34 public FP M34 Field Value FP M41 M41 public FP M41 Field Value FP M42 M42 public FP M42 Field Value FP M43 M43 public FP M43 Field Value FP M44 M44 public FP M44 Field Value FP Zero public static readonly FPMatrix4x4 Zero Field Value FPMatrix4x4 Properties determinant public FP determinant { get; } Property Value FP Methods Add(FPMatrix4x4, FPMatrix4x4) Matrices are added. public static FPMatrix4x4 Add(FPMatrix4x4 matrix1, FPMatrix4x4 matrix2) Parameters matrix1 FPMatrix4x4 The first matrix. matrix2 FPMatrix4x4 The second matrix. Returns FPMatrix4x4 The sum of both matrices. Add(ref FPMatrix4x4, ref FPMatrix4x4, out FPMatrix4x4) Matrices are added. public static void Add(ref FPMatrix4x4 matrix1, ref FPMatrix4x4 matrix2, out FPMatrix4x4 result) Parameters matrix1 FPMatrix4x4 The first matrix. matrix2 FPMatrix4x4 The second matrix. result FPMatrix4x4 The sum of both matrices. AngleAxis(FP, FPVector3) Creates a matrix which rotates around the given axis by the given angle. public static FPMatrix4x4 AngleAxis(FP angle, FPVector3 axis) Parameters angle FP The angle. axis FPVector3 The axis. Returns FPMatrix4x4 The resulting rotation matrix AxisAngle(ref FPVector3, FP, out FPMatrix4x4) Creates a matrix which rotates around the given axis by the given angle. public static void AxisAngle(ref FPVector3 axis, FP angle, out FPMatrix4x4 result) Parameters axis FPVector3 The axis. angle FP The angle. result FPMatrix4x4 The resulting rotation matrix Equals(object) Indicates whether this instance and a specified object are equal. public override bool Equals(object obj) Parameters obj object The object to compare with the current instance. Returns bool true if obj and this instance are the same type and represent the same value; otherwise, false. GetHashCode() Returns the hash code for this instance. public override int GetHashCode() Returns int A 32-bit signed integer that is the hash code for this instance. Inverse(FPMatrix4x4) Calculates the inverse of a give matrix. public static FPMatrix4x4 Inverse(FPMatrix4x4 matrix) Parameters matrix FPMatrix4x4 The matrix to invert. Returns FPMatrix4x4 The inverted JMatrix. Inverse(ref FPMatrix4x4, out FPMatrix4x4) Calculates the inverse of a give matrix. public static void Inverse(ref FPMatrix4x4 matrix, out FPMatrix4x4 result) Parameters matrix FPMatrix4x4 The matrix to invert. result FPMatrix4x4 The inverted JMatrix. Multiply(FPMatrix4x4, FP) Multiply a matrix by a scalefactor. public static FPMatrix4x4 Multiply(FPMatrix4x4 matrix1, FP scaleFactor) Parameters matrix1 FPMatrix4x4 The matrix. scaleFactor FP The scale factor. Returns FPMatrix4x4 A JMatrix multiplied by the scale factor. Multiply(FPMatrix4x4, FPMatrix4x4) Multiply two matrices. Notice: matrix multiplication is not commutative. public static FPMatrix4x4 Multiply(FPMatrix4x4 matrix1, FPMatrix4x4 matrix2) Parameters matrix1 FPMatrix4x4 The first matrix. matrix2 FPMatrix4x4 The second matrix. Returns FPMatrix4x4 The product of both matrices. Multiply(ref FPMatrix4x4, FP, out FPMatrix4x4) Multiply a matrix by a scalefactor. public static void Multiply(ref FPMatrix4x4 matrix1, FP scaleFactor, out FPMatrix4x4 result) Parameters matrix1 FPMatrix4x4 The matrix. scaleFactor FP The scale factor. result FPMatrix4x4 A JMatrix multiplied by the scale factor. Multiply(ref FPMatrix4x4, ref FPMatrix4x4, out FPMatrix4x4) Multiply two matrices. Notice: matrix multiplication is not commutative. public static void Multiply(ref FPMatrix4x4 matrix1, ref FPMatrix4x4 matrix2, out FPMatrix4x4 result) Parameters matrix1 FPMatrix4x4 The first matrix. matrix2 FPMatrix4x4 The second matrix. result FPMatrix4x4 The product of both matrices. Rotate(FPQuaternion) public static FPMatrix4x4 Rotate(FPQuaternion quaternion) Parameters quaternion FPQuaternion Returns FPMatrix4x4 Rotate(ref FPQuaternion, out FPMatrix4x4) Creates a JMatrix representing an orientation from a quaternion. public static void Rotate(ref FPQuaternion quaternion, out FPMatrix4x4 result) Parameters quaternion FPQuaternion The quaternion the matrix should be created from. result FPMatrix4x4 JMatrix representing an orientation. RotateX(FP) Creates a matrix for rotating points around the X-axis. public static FPMatrix4x4 RotateX(FP radians) Parameters radians FP The amount, in radians, by which to rotate around the X-axis. Returns FPMatrix4x4 The rotation matrix. RotateX(FP, FPVector3) Creates a matrix for rotating points around the X-axis, from a center point. public static FPMatrix4x4 RotateX(FP radians, FPVector3 centerPoint) Parameters radians FP The amount, in radians, by which to rotate around the X-axis. centerPoint FPVector3 The center point. Returns FPMatrix4x4 The rotation matrix. RotateY(FP) Creates a matrix for rotating points around the Y-axis. public static FPMatrix4x4 RotateY(FP radians) Parameters radians FP The amount, in radians, by which to rotate around the Y-axis. Returns FPMatrix4x4 The rotation matrix. RotateY(FP, FPVector3) Creates a matrix for rotating points around the Y-axis, from a center point. public static FPMatrix4x4 RotateY(FP radians, FPVector3 centerPoint) Parameters radians FP The amount, in radians, by which to rotate around the Y-axis. centerPoint FPVector3 The center point. Returns FPMatrix4x4 The rotation matrix. RotateZ(FP) Creates a matrix for rotating points around the Z-axis. public static FPMatrix4x4 RotateZ(FP radians) Parameters radians FP The amount, in radians, by which to rotate around the Z-axis. Returns FPMatrix4x4 The rotation matrix. RotateZ(FP, FPVector3) Creates a matrix for rotating points around the Z-axis, from a center point. public static FPMatrix4x4 RotateZ(FP radians, FPVector3 centerPoint) Parameters radians FP The amount, in radians, by which to rotate around the Z-axis. centerPoint FPVector3 The center point. Returns FPMatrix4x4 The rotation matrix. Scale(FP) Creates a uniform scaling matrix that scales equally on each axis. public static FPMatrix4x4 Scale(FP scale) Parameters scale FP The uniform scaling factor. Returns FPMatrix4x4 The scaling matrix. Scale(FP, FP, FP) Creates a scaling matrix. public static FPMatrix4x4 Scale(FP xScale, FP yScale, FP zScale) Parameters xScale FP Value to scale by on the X-axis. yScale FP Value to scale by on the Y-axis. zScale FP Value to scale by on the Z-axis. Returns FPMatrix4x4 The scaling matrix. Scale(FP, FP, FP, FPVector3) Creates a scaling matrix with a center point. public static FPMatrix4x4 Scale(FP xScale, FP yScale, FP zScale, FPVector3 centerPoint) Parameters xScale FP Value to scale by on the X-axis. yScale FP Value to scale by on the Y-axis. zScale FP Value to scale by on the Z-axis. centerPoint FPVector3 The center point. Returns FPMatrix4x4 The scaling matrix. Scale(FP, FPVector3) Creates a uniform scaling matrix that scales equally on each axis with a center point. public static FPMatrix4x4 Scale(FP scale, FPVector3 centerPoint) Parameters scale FP The uniform scaling factor. centerPoint FPVector3 The center point. Returns FPMatrix4x4 The scaling matrix. Scale(FPVector3) Creates a scaling matrix. public static FPMatrix4x4 Scale(FPVector3 scales) Parameters scales FPVector3 The vector containing the amount to scale by on each axis. Returns FPMatrix4x4 The scaling matrix. Scale(FPVector3, FPVector3) Creates a scaling matrix with a center point. public static FPMatrix4x4 Scale(FPVector3 scales, FPVector3 centerPoint) Parameters scales FPVector3 The vector containing the amount to scale by on each axis. centerPoint FPVector3 The center point. Returns FPMatrix4x4 The scaling matrix. TRS(FPVector3, FPQuaternion, FPVector3) public static FPMatrix4x4 TRS(FPVector3 translation, FPQuaternion rotation, FPVector3 scale) Parameters translation FPVector3 rotation FPQuaternion scale FPVector3 Returns FPMatrix4x4 TRS(FPVector3, FPQuaternion, FPVector3, out FPMatrix4x4) public static void TRS(FPVector3 translation, FPQuaternion rotation, FPVector3 scale, out FPMatrix4x4 matrix) Parameters translation FPVector3 rotation FPQuaternion scale FPVector3 matrix FPMatrix4x4 ToString() Returns the fully qualified type name of this instance. public override string ToString() Returns string The fully qualified type name. Trace() public FP Trace() Returns FP Translate(FP, FP, FP) Creates a translation matrix. public static FPMatrix4x4 Translate(FP xPosition, FP yPosition, FP zPosition) Parameters xPosition FP The amount to translate on the X-axis. yPosition FP The amount to translate on the Y-axis. zPosition FP The amount to translate on the Z-axis. Returns FPMatrix4x4 The translation matrix. Translate(FPVector3) public static FPMatrix4x4 Translate(FPVector3 translation) Parameters translation FPVector3 Returns FPMatrix4x4 Transpose(FPMatrix4x4) Creates the transposed matrix. public static FPMatrix4x4 Transpose(FPMatrix4x4 matrix) Parameters matrix FPMatrix4x4 The matrix which should be transposed. Returns FPMatrix4x4 The transposed JMatrix. Transpose(ref FPMatrix4x4, out FPMatrix4x4) Creates the transposed matrix. public static void Transpose(ref FPMatrix4x4 matrix, out FPMatrix4x4 result) Parameters matrix FPMatrix4x4 The matrix which should be transposed. result FPMatrix4x4 The transposed JMatrix. Operators operator +(FPMatrix4x4, FPMatrix4x4) Adds two matrices. public static FPMatrix4x4 operator +(FPMatrix4x4 value1, FPMatrix4x4 value2) Parameters value1 FPMatrix4x4 The first matrix. value2 FPMatrix4x4 The second matrix. Returns FPMatrix4x4 The sum of both values. operator ==(FPMatrix4x4, FPMatrix4x4) public static bool operator ==(FPMatrix4x4 value1, FPMatrix4x4 value2) Parameters value1 FPMatrix4x4 value2 FPMatrix4x4 Returns bool operator !=(FPMatrix4x4, FPMatrix4x4) public static bool operator !=(FPMatrix4x4 value1, FPMatrix4x4 value2) Parameters value1 FPMatrix4x4 value2 FPMatrix4x4 Returns bool operator *(FPMatrix4x4, FPMatrix4x4) Multiplies two matrices. public static FPMatrix4x4 operator *(FPMatrix4x4 value1, FPMatrix4x4 value2) Parameters value1 FPMatrix4x4 The first matrix. value2 FPMatrix4x4 The second matrix. Returns FPMatrix4x4 The product of both values. operator -(FPMatrix4x4, FPMatrix4x4) Subtracts two matrices. public static FPMatrix4x4 operator -(FPMatrix4x4 value1, FPMatrix4x4 value2) Parameters value1 FPMatrix4x4 The first matrix. value2 FPMatrix4x4 The second matrix. Returns FPMatrix4x4 The difference of both values. operator -(FPMatrix4x4) Returns a new matrix with the negated elements of the given matrix. public static FPMatrix4x4 operator -(FPMatrix4x4 value) Parameters value FPMatrix4x4 The source matrix. Returns FPMatrix4x4 The negated matrix."
  },
  "api/GameFrameX.Utility.Math.FPQuaternion.html": {
    "href": "api/GameFrameX.Utility.Math.FPQuaternion.html",
    "title": "Struct FPQuaternion | GameFrameX.Server",
    "keywords": "Struct FPQuaternion Namespace GameFrameX.Utility.Math Assembly GameFrameX.Utility.dll A Quaternion representing an orientation. [Serializable] public struct FPQuaternion Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors FPQuaternion(FP, FP, FP, FP) 初始化一个新的四元数实例。 public FPQuaternion(FP x, FP y, FP z, FP w) Parameters x FP 四元数的 X 分量。 y FP 四元数的 Y 分量。 z FP 四元数的 Z 分量。 w FP 四元数的 W 分量。 Fields identity 表示单位四元数的静态只读字段。 public static readonly FPQuaternion identity Field Value FPQuaternion w 四元数的 W 分量。 public FP w Field Value FP x 四元数的 X 分量。 public FP x Field Value FP y 四元数的 Y 分量。 public FP y Field Value FP z 四元数的 Z 分量。 public FP z Field Value FP Properties eulerAngles 获取四元数对应的欧拉角。 public FPVector3 eulerAngles { get; } Property Value FPVector3 表示欧拉角的向量。 eulerAnglesNew 获取四元数对应的欧拉角（另一种实现）。 public FPVector3 eulerAnglesNew { get; } Property Value FPVector3 表示欧拉角的向量。 Methods Add(FPQuaternion, FPQuaternion) 计算两个四元数的和。 public static FPQuaternion Add(FPQuaternion quaternion1, FPQuaternion quaternion2) Parameters quaternion1 FPQuaternion 第一个四元数。 quaternion2 FPQuaternion 第二个四元数。 Returns FPQuaternion 两个四元数的和。 Add(ref FPQuaternion, ref FPQuaternion, out FPQuaternion) 计算两个四元数的和。 public static void Add(ref FPQuaternion quaternion1, ref FPQuaternion quaternion2, out FPQuaternion result) Parameters quaternion1 FPQuaternion 第一个四元数。 quaternion2 FPQuaternion 第二个四元数。 result FPQuaternion 两个四元数的和。 Angle(FPQuaternion, FPQuaternion) 计算两个四元数之间的夹角。 public static FP Angle(FPQuaternion a, FPQuaternion b) Parameters a FPQuaternion 第一个四元数。 b FPQuaternion 第二个四元数。 Returns FP 两个四元数之间的夹角（以度为单位）。 AngleAxis(FP, FPVector3) 根据指定的角度和轴创建一个四元数。 public static FPQuaternion AngleAxis(FP angle, FPVector3 axis) Parameters angle FP 旋转角度（以度为单位）。 axis FPVector3 旋转轴。 Returns FPQuaternion 表示旋转的四元数。 Conjugate(FPQuaternion) 计算四元数的共轭。 public static FPQuaternion Conjugate(FPQuaternion value) Parameters value FPQuaternion 要计算共轭的四元数。 Returns FPQuaternion 四元数的共轭。 CreateFromAxisAngle(FPVector3, FP) 从轴和角度创建一个四元数。 public static FPQuaternion CreateFromAxisAngle(FPVector3 axis, FP angle) Parameters axis FPVector3 旋转轴，必须是单位向量。 angle FP 旋转角度，以弧度为单位。 Returns FPQuaternion 表示旋转的 FPQuaternion。 CreateFromMatrix(FPMatrix) 从矩阵创建一个四元数。 public static FPQuaternion CreateFromMatrix(FPMatrix matrix) Parameters matrix FPMatrix 表示方向的矩阵。 Returns FPQuaternion 表示方向的 FPQuaternion。 CreateFromMatrix(ref FPMatrix, out FPQuaternion) 从矩阵创建一个四元数。 public static void CreateFromMatrix(ref FPMatrix matrix, out FPQuaternion result) Parameters matrix FPMatrix 表示方向的矩阵。 result FPQuaternion 表示方向的 FPQuaternion。 CreateFromYawPitchRoll(FP, FP, FP, out FPQuaternion) 根据指定的偏航角、俯仰角和翻滚角创建一个四元数。 public static void CreateFromYawPitchRoll(FP yaw, FP pitch, FP roll, out FPQuaternion result) Parameters yaw FP 偏航角（绕 Y 轴的旋转角度）。 pitch FP 俯仰角（绕 X 轴的旋转角度）。 roll FP 翻滚角（绕 Z 轴的旋转角度）。 result FPQuaternion 表示旋转的四元数。 Dot(FPQuaternion, FPQuaternion) 计算两个四元数的点积。 public static FP Dot(FPQuaternion a, FPQuaternion b) Parameters a FPQuaternion 第一个四元数。 b FPQuaternion 第二个四元数。 Returns FP 两个四元数的点积。 Equals(object) 判断当前四元数是否与指定对象相等。 public override bool Equals(object obj) Parameters obj object 要比较的对象。 Returns bool 如果当前四元数与指定对象相等，则返回 true；否则返回 false。 Euler(FP, FP, FP) 根据欧拉角创建一个四元数。 public static FPQuaternion Euler(FP x, FP y, FP z) Parameters x FP 绕 X 轴的旋转角度（以度为单位）。 y FP 绕 Y 轴的旋转角度（以度为单位）。 z FP 绕 Z 轴的旋转角度（以度为单位）。 Returns FPQuaternion 表示旋转的四元数。 Euler(FPVector3) 根据欧拉角向量创建一个四元数。 public static FPQuaternion Euler(FPVector3 eulerAngles) Parameters eulerAngles FPVector3 欧拉角向量。 Returns FPQuaternion 表示旋转的四元数。 FromToRotation(FPVector3, FPVector3) 计算从一个向量到另一个向量的旋转四元数。 public static FPQuaternion FromToRotation(FPVector3 fromVector3, FPVector3 toVector3) Parameters fromVector3 FPVector3 起始向量。 toVector3 FPVector3 目标向量。 Returns FPQuaternion 表示从一个向量到另一个向量的旋转的四元数。 GetHashCode() 返回当前四元数的哈希代码。 public override int GetHashCode() Returns int 当前四元数的哈希代码。 Inverse(FPQuaternion) 计算四元数的逆。 public static FPQuaternion Inverse(FPQuaternion rotation) Parameters rotation FPQuaternion 要计算逆的四元数。 Returns FPQuaternion 四元数的逆。 Lerp(FPQuaternion, FPQuaternion, FP) 在两个四元数之间进行线性插值。 public static FPQuaternion Lerp(FPQuaternion a, FPQuaternion b, FP t) Parameters a FPQuaternion 起始四元数。 b FPQuaternion 目标四元数。 t FP 插值参数，范围在 0 到 1 之间。 Returns FPQuaternion 插值结果四元数。 LerpUnclamped(FPQuaternion, FPQuaternion, FP) 在两个四元数之间进行线性插值，不进行参数限制。 public static FPQuaternion LerpUnclamped(FPQuaternion a, FPQuaternion b, FP t) Parameters a FPQuaternion 起始四元数。 b FPQuaternion 目标四元数。 t FP 插值参数。 Returns FPQuaternion 插值结果四元数。 LookRotation(FPVector3) 根据指定的前方向量创建一个四元数，使用默认的向上向量。 public static FPQuaternion LookRotation(FPVector3 forward) Parameters forward FPVector3 前方向量。 Returns FPQuaternion 表示旋转的四元数。 LookRotation(FPVector3, FPVector3) 根据指定的前方向量和向上向量创建一个四元数。 public static FPQuaternion LookRotation(FPVector3 forward, FPVector3 upwards) Parameters forward FPVector3 前方向量。 upwards FPVector3 向上向量。 Returns FPQuaternion 表示旋转的四元数。 Multiply(FPQuaternion, FP) 计算四元数与缩放因子的乘积。 public static FPQuaternion Multiply(FPQuaternion quaternion1, FP scaleFactor) Parameters quaternion1 FPQuaternion 要缩放的四元数。 scaleFactor FP 缩放因子。 Returns FPQuaternion 缩放后的四元数。 Multiply(FPQuaternion, FPQuaternion) 计算两个四元数的乘积。 public static FPQuaternion Multiply(FPQuaternion quaternion1, FPQuaternion quaternion2) Parameters quaternion1 FPQuaternion 第一个四元数。 quaternion2 FPQuaternion 第二个四元数。 Returns FPQuaternion 两个四元数的乘积。 Multiply(ref FPQuaternion, FP, out FPQuaternion) 缩放一个四元数。 public static void Multiply(ref FPQuaternion quaternion1, FP scaleFactor, out FPQuaternion result) Parameters quaternion1 FPQuaternion 要缩放的四元数。 scaleFactor FP 缩放因子。 result FPQuaternion 缩放后的四元数。 Multiply(ref FPQuaternion, ref FPQuaternion, out FPQuaternion) 计算两个四元数的乘积。 public static void Multiply(ref FPQuaternion quaternion1, ref FPQuaternion quaternion2, out FPQuaternion result) Parameters quaternion1 FPQuaternion 第一个四元数。 quaternion2 FPQuaternion 第二个四元数。 result FPQuaternion 两个四元数的乘积。 Normalize() 对当前四元数进行归一化。 public void Normalize() Remarks 归一化会将四元数的模长变为1，确保其表示一个有效的旋转。 RotateTowards(FPQuaternion, FPQuaternion, FP) 将一个四元数朝向另一个四元数旋转，但不超过指定的最大角度。 public static FPQuaternion RotateTowards(FPQuaternion from, FPQuaternion to, FP maxDegreesDelta) Parameters from FPQuaternion 起始四元数。 to FPQuaternion 目标四元数。 maxDegreesDelta FP 最大旋转角度（以度为单位）。 Returns FPQuaternion 旋转后的四元数。 Set(FP, FP, FP, FP) 设置四元数的各个分量。 public void Set(FP new_x, FP new_y, FP new_z, FP new_w) Parameters new_x FP 新的 X 分量。 new_y FP 新的 Y 分量。 new_z FP 新的 Z 分量。 new_w FP 新的 W 分量。 SetFromToRotation(FPVector3, FPVector3) 根据从一个方向到另一个方向的旋转设置四元数。 public void SetFromToRotation(FPVector3 fromDirection, FPVector3 toDirection) Parameters fromDirection FPVector3 起始方向。 toDirection FPVector3 目标方向。 Slerp(FPQuaternion, FPQuaternion, FP) 在两个四元数之间进行球面线性插值。 public static FPQuaternion Slerp(FPQuaternion from, FPQuaternion to, FP t) Parameters from FPQuaternion 起始四元数。 to FPQuaternion 目标四元数。 t FP 插值参数，范围在 0 到 1 之间。 Returns FPQuaternion 插值结果四元数。 Subtract(FPQuaternion, FPQuaternion) 计算两个四元数的差。 public static FPQuaternion Subtract(FPQuaternion quaternion1, FPQuaternion quaternion2) Parameters quaternion1 FPQuaternion 第一个四元数。 quaternion2 FPQuaternion 第二个四元数。 Returns FPQuaternion 两个四元数的差。 Subtract(ref FPQuaternion, ref FPQuaternion, out FPQuaternion) 计算两个四元数的差。 public static void Subtract(ref FPQuaternion quaternion1, ref FPQuaternion quaternion2, out FPQuaternion result) Parameters quaternion1 FPQuaternion 第一个四元数。 quaternion2 FPQuaternion 第二个四元数。 result FPQuaternion 两个四元数的差。 ToString() 返回四元数的字符串表示形式。 public override string ToString() Returns string 四元数的字符串表示形式。 Operators operator +(FPQuaternion, FPQuaternion) 加上两个四元数。 public static FPQuaternion operator +(FPQuaternion value1, FPQuaternion value2) Parameters value1 FPQuaternion 第一个四元数。 value2 FPQuaternion 第二个四元数。 Returns FPQuaternion 两个四元数的和。 operator ==(FPQuaternion, FPQuaternion) 判断两个四元数是否相等。 public static bool operator ==(FPQuaternion value1, FPQuaternion value2) Parameters value1 FPQuaternion 第一个四元数。 value2 FPQuaternion 第二个四元数。 Returns bool 如果两个四元数相等，则返回 true；否则返回 false。 operator !=(FPQuaternion, FPQuaternion) 判断两个四元数是否不相等。 public static bool operator !=(FPQuaternion value1, FPQuaternion value2) Parameters value1 FPQuaternion 第一个四元数。 value2 FPQuaternion 第二个四元数。 Returns bool 如果两个四元数不相等，则返回 true；否则返回 false。 operator *(FPQuaternion, FPQuaternion) 乘以两个四元数。 public static FPQuaternion operator *(FPQuaternion value1, FPQuaternion value2) Parameters value1 FPQuaternion 第一个四元数。 value2 FPQuaternion 第二个四元数。 Returns FPQuaternion 两个四元数的乘积。 operator *(FPQuaternion, FPVector3) 使用四元数旋转一个三维向量。 public static FPVector3 operator *(FPQuaternion quat, FPVector3 vec) Parameters quat FPQuaternion vec FPVector3 Returns FPVector3 operator -(FPQuaternion, FPQuaternion) 减去两个四元数。 public static FPQuaternion operator -(FPQuaternion value1, FPQuaternion value2) Parameters value1 FPQuaternion 第一个四元数。 value2 FPQuaternion 第二个四元数。 Returns FPQuaternion 两个四元数的差。"
  },
  "api/GameFrameX.Utility.Math.FPRandom.html": {
    "href": "api/GameFrameX.Utility.Math.FPRandom.html",
    "title": "Class FPRandom | GameFrameX.Server",
    "keywords": "Class FPRandom Namespace GameFrameX.Utility.Math Assembly GameFrameX.Utility.dll public sealed class FPRandom Inheritance object FPRandom Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Fields instance public static FPRandom instance Field Value FPRandom Properties MaxRandomInt public static int MaxRandomInt { get; } Property Value int insideUnitSphere public static FPVector3 insideUnitSphere { get; } Property Value FPVector3 value public static FP value { get; } Property Value FP Methods CallNext() public static int CallNext() Returns int Initialize() public void Initialize() Initialize(int) public void Initialize(int seed) Parameters seed int Initialize(int[]) public void Initialize(int[] init) Parameters init int[] New(int) public static FPRandom New(int seed) Parameters seed int Returns FPRandom Next() public int Next() Returns int Next(int, int) public int Next(int minValue, int maxValue) Parameters minValue int maxValue int Returns int Next(float, float) public FP Next(float minValue, float maxValue) Parameters minValue float maxValue float Returns FP NextFP() public FP NextFP() Returns FP Range(int, int) public static int Range(int minValue, int maxValue) Parameters minValue int maxValue int Returns int Range(float, float) public static FP Range(float minValue, float maxValue) Parameters minValue float maxValue float Returns FP"
  },
  "api/GameFrameX.Utility.Math.FPVector2.html": {
    "href": "api/GameFrameX.Utility.Math.FPVector2.html",
    "title": "Struct FPVector2 | GameFrameX.Server",
    "keywords": "Struct FPVector2 Namespace GameFrameX.Utility.Math Assembly GameFrameX.Utility.dll [Serializable] public struct FPVector2 : IEquatable<FPVector2> Implements IEquatable<FPVector2> Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors FPVector2(FP) 创建一个“方形”向量的构造函数，即 X 和 Y 坐标相同。 public FPVector2(FP value) Parameters value FP 向量的 X 和 Y 坐标值。 FPVector2(FP, FP) 标准 2D 向量的构造函数。 public FPVector2(FP x, FP y) Parameters x FP 向量的 X 坐标。 y FP 向量的 Y 坐标。 Fields x public FP x Field Value FP y public FP y Field Value FP Properties Magnitude 获取向量的长度（模）。 public FP Magnitude { get; } Property Value FP Normalized 获取归一化后的向量。 public FPVector2 Normalized { get; } Property Value FPVector2 down 获取一个表示下方向向量 (0, -1) 的静态属性。 public static FPVector2 down { get; } Property Value FPVector2 left 获取一个表示左方向向量 (-1, 0) 的静态属性。 public static FPVector2 left { get; } Property Value FPVector2 one 获取一个表示单位向量 (1, 1) 的静态属性。 public static FPVector2 one { get; } Property Value FPVector2 right 获取一个表示右方向向量 (1, 0) 的静态属性。 public static FPVector2 right { get; } Property Value FPVector2 up 获取一个表示上方向向量 (0, 1) 的静态属性。 public static FPVector2 up { get; } Property Value FPVector2 zero 获取一个表示零向量 (0, 0) 的静态属性。 public static FPVector2 zero { get; } Property Value FPVector2 Methods Add(FPVector2, FPVector2) 计算两个 FPVector2 的和。 public static FPVector2 Add(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个 FPVector2。 value2 FPVector2 第二个 FPVector2。 Returns FPVector2 两个 FPVector2 的和。 Add(ref FPVector2, ref FPVector2, out FPVector2) 计算两个 FPVector2 的和。 public static void Add(ref FPVector2 value1, ref FPVector2 value2, out FPVector2 result) Parameters value1 FPVector2 第一个 FPVector2。 value2 FPVector2 第二个 FPVector2。 result FPVector2 两个 FPVector2 的和。 Angle(FPVector2, FPVector2) 计算两个向量之间的夹角（以度为单位）。 public static FP Angle(FPVector2 a, FPVector2 b) Parameters a FPVector2 第一个向量。 b FPVector2 第二个向量。 Returns FP 两个向量之间的夹角（以度为单位）。 Barycentric(FPVector2, FPVector2, FPVector2, FP, FP) 计算三个点的重心插值。 public static FPVector2 Barycentric(FPVector2 value1, FPVector2 value2, FPVector2 value3, FP amount1, FP amount2) Parameters value1 FPVector2 第一个点。 value2 FPVector2 第二个点。 value3 FPVector2 第三个点。 amount1 FP 权重1。 amount2 FP 权重2。 Returns FPVector2 重心插值结果。 Barycentric(ref FPVector2, ref FPVector2, ref FPVector2, FP, FP, out FPVector2) 计算三个点的重心插值。 public static void Barycentric(ref FPVector2 value1, ref FPVector2 value2, ref FPVector2 value3, FP amount1, FP amount2, out FPVector2 result) Parameters value1 FPVector2 第一个点。 value2 FPVector2 第二个点。 value3 FPVector2 第三个点。 amount1 FP 权重1。 amount2 FP 权重2。 result FPVector2 重心插值结果。 CatmullRom(FPVector2, FPVector2, FPVector2, FPVector2, FP) 计算四个点的 Catmull-Rom 插值。 public static FPVector2 CatmullRom(FPVector2 value1, FPVector2 value2, FPVector2 value3, FPVector2 value4, FP amount) Parameters value1 FPVector2 第一个点。 value2 FPVector2 第二个点。 value3 FPVector2 第三个点。 value4 FPVector2 第四个点。 amount FP 插值参数。 Returns FPVector2 Catmull-Rom 插值结果。 CatmullRom(ref FPVector2, ref FPVector2, ref FPVector2, ref FPVector2, FP, out FPVector2) 计算四个点的 Catmull-Rom 插值。 public static void CatmullRom(ref FPVector2 value1, ref FPVector2 value2, ref FPVector2 value3, ref FPVector2 value4, FP amount, out FPVector2 result) Parameters value1 FPVector2 第一个点。 value2 FPVector2 第二个点。 value3 FPVector2 第三个点。 value4 FPVector2 第四个点。 amount FP 插值参数。 result FPVector2 Catmull-Rom 插值结果。 Clamp(FPVector2, FPVector2, FPVector2) 将向量限制在指定的最小值和最大值之间。 public static FPVector2 Clamp(FPVector2 value1, FPVector2 min, FPVector2 max) Parameters value1 FPVector2 要限制的向量。 min FPVector2 最小值。 max FPVector2 最大值。 Returns FPVector2 限制后的向量。 Clamp(ref FPVector2, ref FPVector2, ref FPVector2, out FPVector2) 将向量限制在指定的最小值和最大值之间。 public static void Clamp(ref FPVector2 value1, ref FPVector2 min, ref FPVector2 max, out FPVector2 result) Parameters value1 FPVector2 要限制的向量。 min FPVector2 最小值。 max FPVector2 最大值。 result FPVector2 限制后的向量。 ClampMagnitude(FPVector2, FP) 将向量的长度限制在指定的最大值内。 public static FPVector2 ClampMagnitude(FPVector2 vector, FP maxLength) Parameters vector FPVector2 要限制的向量。 maxLength FP 最大长度。 Returns FPVector2 限制后的向量。 Distance(FPVector2, FPVector2) 计算两个向量之间的距离。 public static FP Distance(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 Returns FP 两个向量之间的距离。 Distance(ref FPVector2, ref FPVector2, out FP) 计算两个向量之间的距离。 public static void Distance(ref FPVector2 value1, ref FPVector2 value2, out FP result) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 result FP 两个向量之间的距离。 DistanceSquared(FPVector2, FPVector2) 计算两个向量之间的平方距离。 public static FP DistanceSquared(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 Returns FP 两个向量之间的平方距离。 DistanceSquared(ref FPVector2, ref FPVector2, out FP) 计算两个向量之间的平方距离。 public static void DistanceSquared(ref FPVector2 value1, ref FPVector2 value2, out FP result) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 result FP 两个向量之间的平方距离。 Divide(FPVector2, FP) 计算向量与标量的除法。 public static FPVector2 Divide(FPVector2 value1, FP divider) Parameters value1 FPVector2 被除数向量。 divider FP 除数标量。 Returns FPVector2 向量与标量的除法结果。 Divide(FPVector2, FPVector2) 计算两个向量的除法。 public static FPVector2 Divide(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 被除数向量。 value2 FPVector2 除数向量。 Returns FPVector2 两个向量的除法结果。 Divide(ref FPVector2, FP, out FPVector2) 计算向量与标量的除法。 public static void Divide(ref FPVector2 value1, FP divider, out FPVector2 result) Parameters value1 FPVector2 被除数向量。 divider FP 除数标量。 result FPVector2 向量与标量的除法结果。 Divide(ref FPVector2, ref FPVector2, out FPVector2) 计算两个向量的除法。 public static void Divide(ref FPVector2 value1, ref FPVector2 value2, out FPVector2 result) Parameters value1 FPVector2 被除数向量。 value2 FPVector2 除数向量。 result FPVector2 两个向量的除法结果。 Dot(FPVector2, FPVector2) 计算两个向量的点积。 public static FP Dot(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 Returns FP 两个向量的点积。 Dot(ref FPVector2, ref FPVector2, out FP) 计算两个向量的点积。 public static void Dot(ref FPVector2 value1, ref FPVector2 value2, out FP result) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 result FP 两个向量的点积。 Equals(FPVector2) 检查另一个 FPVector2 是否等于当前实例。 public bool Equals(FPVector2 other) Parameters other FPVector2 要比较的 FPVector2。 Returns bool 如果另一个 FPVector2 等于当前实例，则返回 true；否则返回 false。 Equals(object) 检查对象是否等于当前 FPVector2 实例。 public override bool Equals(object obj) Parameters obj object 要比较的对象。 Returns bool 如果对象等于当前实例，则返回 true；否则返回 false。 GetHashCode() 获取当前 FPVector2 实例的哈希代码。 public override int GetHashCode() Returns int 当前 FPVector2 实例的哈希代码。 Hermite(FPVector2, FPVector2, FPVector2, FPVector2, FP) 计算四个点的 Hermite 插值。 public static FPVector2 Hermite(FPVector2 value1, FPVector2 tangent1, FPVector2 value2, FPVector2 tangent2, FP amount) Parameters value1 FPVector2 第一个点。 tangent1 FPVector2 第一个点的切线。 value2 FPVector2 第二个点。 tangent2 FPVector2 第二个点的切线。 amount FP 插值参数。 Returns FPVector2 Hermite 插值结果。 Hermite(ref FPVector2, ref FPVector2, ref FPVector2, ref FPVector2, FP, out FPVector2) 计算四个点的 Hermite 插值。 public static void Hermite(ref FPVector2 value1, ref FPVector2 tangent1, ref FPVector2 value2, ref FPVector2 tangent2, FP amount, out FPVector2 result) Parameters value1 FPVector2 第一个点。 tangent1 FPVector2 第一个点的切线。 value2 FPVector2 第二个点。 tangent2 FPVector2 第二个点的切线。 amount FP 插值参数。 result FPVector2 Hermite 插值结果。 LengthSquared() 获取向量的平方长度。 public FP LengthSquared() Returns FP 向量的平方长度。 Lerp(FPVector2, FPVector2, FP) 在两个向量之间进行线性插值，插值参数在 0 到 1 之间。 public static FPVector2 Lerp(FPVector2 value1, FPVector2 value2, FP amount) Parameters value1 FPVector2 起始向量。 value2 FPVector2 结束向量。 amount FP 插值参数。 Returns FPVector2 插值结果。 LerpUnclamped(FPVector2, FPVector2, FP) 在两个向量之间进行线性插值，插值参数不受限制。 public static FPVector2 LerpUnclamped(FPVector2 value1, FPVector2 value2, FP amount) Parameters value1 FPVector2 起始向量。 value2 FPVector2 结束向量。 amount FP 插值参数。 Returns FPVector2 插值结果。 LerpUnclamped(ref FPVector2, ref FPVector2, FP, out FPVector2) 在两个向量之间进行线性插值，插值参数不受限制。 public static void LerpUnclamped(ref FPVector2 value1, ref FPVector2 value2, FP amount, out FPVector2 result) Parameters value1 FPVector2 起始向量。 value2 FPVector2 结束向量。 amount FP 插值参数。 result FPVector2 插值结果。 Max(FPVector2, FPVector2) 返回两个向量中的较大值。 public static FPVector2 Max(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 Returns FPVector2 较大的向量。 Max(ref FPVector2, ref FPVector2, out FPVector2) 返回两个向量中的较大值。 public static void Max(ref FPVector2 value1, ref FPVector2 value2, out FPVector2 result) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 result FPVector2 较大的向量。 Min(FPVector2, FPVector2) 返回两个向量中的较小值。 public static FPVector2 Min(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 Returns FPVector2 较小的向量。 Min(ref FPVector2, ref FPVector2, out FPVector2) 返回两个向量中的较小值。 public static void Min(ref FPVector2 value1, ref FPVector2 value2, out FPVector2 result) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 result FPVector2 较小的向量。 Multiply(FPVector2, FP) 将向量与标量相乘。 public static FPVector2 Multiply(FPVector2 value1, FP scaleFactor) Parameters value1 FPVector2 向量。 scaleFactor FP 标量。 Returns FPVector2 乘法结果。 Multiply(FPVector2, FPVector2) 按元素乘法操作两个向量。 public static FPVector2 Multiply(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 Returns FPVector2 乘法结果。 Multiply(ref FPVector2, FP, out FPVector2) 将向量与标量相乘，并将结果存储在输出参数中。 public static void Multiply(ref FPVector2 value1, FP scaleFactor, out FPVector2 result) Parameters value1 FPVector2 向量。 scaleFactor FP 标量。 result FPVector2 乘法结果。 Multiply(ref FPVector2, ref FPVector2, out FPVector2) 按元素乘法操作两个向量，并将结果存储在输出参数中。 public static void Multiply(ref FPVector2 value1, ref FPVector2 value2, out FPVector2 result) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 result FPVector2 乘法结果。 Negate(FPVector2) 取向量的负值。 public static FPVector2 Negate(FPVector2 value) Parameters value FPVector2 输入向量。 Returns FPVector2 负值向量。 Negate(ref FPVector2, out FPVector2) 取向量的负值，并将结果存储在输出参数中。 public static void Negate(ref FPVector2 value, out FPVector2 result) Parameters value FPVector2 输入向量。 result FPVector2 负值向量。 Normalize() 归一化当前向量。 public void Normalize() Normalize(FPVector2) 归一化指定的向量。 public static FPVector2 Normalize(FPVector2 value) Parameters value FPVector2 输入向量。 Returns FPVector2 归一化后的向量。 Normalize(ref FPVector2, out FPVector2) 归一化指定的向量，并将结果存储在输出参数中。 public static void Normalize(ref FPVector2 value, out FPVector2 result) Parameters value FPVector2 输入向量。 result FPVector2 归一化后的向量。 Reflect(FPVector2, FPVector2) 计算向量在给定法线上的反射向量。 public static FPVector2 Reflect(FPVector2 vector, FPVector2 normal) Parameters vector FPVector2 原始向量。 normal FPVector2 法线向量。 Returns FPVector2 反射向量。 Reflect(ref FPVector2, ref FPVector2, out FPVector2) 计算向量在给定法线上的反射向量。 public static void Reflect(ref FPVector2 vector, ref FPVector2 normal, out FPVector2 result) Parameters vector FPVector2 原始向量。 normal FPVector2 法线向量。 result FPVector2 反射向量。 Rotate(FPVector2, FP) 旋转向量。 public static FPVector2 Rotate(FPVector2 a, FP deg) Parameters a FPVector2 输入向量。 deg FP 旋转角度（以度为单位）。 Returns FPVector2 旋转后的向量。 Scale(FPVector2) 按元素缩放向量。 public void Scale(FPVector2 other) Parameters other FPVector2 缩放因子向量。 Scale(FPVector2, FPVector2) 按元素缩放两个向量。 public static FPVector2 Scale(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 Returns FPVector2 缩放后的向量。 Set(FP, FP) 设置向量的 X 和 Y 坐标。 public void Set(FP x, FP y) Parameters x FP 向量的 X 坐标。 y FP 向量的 Y 坐标。 SmoothStep(FPVector2, FPVector2, FP) 计算两个向量之间的平滑插值。 public static FPVector2 SmoothStep(FPVector2 value1, FPVector2 value2, FP amount) Parameters value1 FPVector2 起始向量。 value2 FPVector2 结束向量。 amount FP 插值因子，范围在 [0, 1] 之间。 Returns FPVector2 平滑插值后的向量。 SmoothStep(ref FPVector2, ref FPVector2, FP, out FPVector2) 计算两个向量之间的平滑插值，并将结果存储在输出参数中。 public static void SmoothStep(ref FPVector2 value1, ref FPVector2 value2, FP amount, out FPVector2 result) Parameters value1 FPVector2 起始向量。 value2 FPVector2 结束向量。 amount FP 插值因子，范围在 [0, 1] 之间。 result FPVector2 平滑插值后的向量。 Subtract(FPVector2, FPVector2) 计算两个向量的差。 public static FPVector2 Subtract(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 Returns FPVector2 两个向量的差。 Subtract(ref FPVector2, ref FPVector2, out FPVector2) 计算两个向量的差，并将结果存储在输出参数中。 public static void Subtract(ref FPVector2 value1, ref FPVector2 value2, out FPVector2 result) Parameters value1 FPVector2 第一个向量。 value2 FPVector2 第二个向量。 result FPVector2 两个向量的差。 ToFPVector3() 将二维向量转换为三维向量，Z 坐标默认为 0。 public FPVector3 ToFPVector3() Returns FPVector3 转换后的三维向量。 ToString() 返回向量的字符串表示形式。 public override string ToString() Returns string 向量的字符串表示形式。 Operators operator +(FPVector2, FPVector2) 向量加法运算符，返回两个 FPVector2 的和。 public static FPVector2 operator +(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个 FPVector2。 value2 FPVector2 第二个 FPVector2。 Returns FPVector2 两个 FPVector2 的和。 operator /(FPVector2, FP) 向量与标量的除法运算符，返回一个新的 FPVector2，其 x 和 y 分量分别为原向量与标量的商。 public static FPVector2 operator /(FPVector2 value1, FP divider) Parameters value1 FPVector2 被除数 FPVector2。 divider FP 标量。 Returns FPVector2 新的 FPVector2。 operator /(FPVector2, FPVector2) 向量除法运算符，返回一个新的 FPVector2，其 x 和 y 分量分别为原向量与另一个向量对应分量的商。 public static FPVector2 operator /(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 被除数 FPVector2。 value2 FPVector2 除数 FPVector2。 Returns FPVector2 新的 FPVector2。 operator ==(FPVector2, FPVector2) 判断两个 FPVector2 是否相等。 public static bool operator ==(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个 FPVector2。 value2 FPVector2 第二个 FPVector2。 Returns bool 如果两个 FPVector2 相等，则返回 true；否则返回 false。 operator !=(FPVector2, FPVector2) 判断两个 FPVector2 是否不相等。 public static bool operator !=(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个 FPVector2。 value2 FPVector2 第二个 FPVector2。 Returns bool 如果两个 FPVector2 不相等，则返回 true；否则返回 false。 operator *(FP, FPVector2) 标量与向量的乘法运算符，返回一个新的 FPVector2，其 x 和 y 分量分别为标量与原向量的乘积。 public static FPVector2 operator *(FP scaleFactor, FPVector2 value) Parameters scaleFactor FP 标量。 value FPVector2 FPVector2。 Returns FPVector2 新的 FPVector2。 operator *(FPVector2, FP) 向量与标量的乘法运算符，返回一个新的 FPVector2，其 x 和 y 分量分别为原向量与标量的乘积。 public static FPVector2 operator *(FPVector2 value, FP scaleFactor) Parameters value FPVector2 FPVector2。 scaleFactor FP 标量。 Returns FPVector2 新的 FPVector2。 operator *(FPVector2, FPVector2) 计算两个 FPVector2 的点积。 public static FP operator *(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 第一个 FPVector2。 value2 FPVector2 第二个 FPVector2。 Returns FP 两个 FPVector2 的点积。 operator -(FPVector2, FPVector2) 向量减法运算符，返回两个 FPVector2 的差。 public static FPVector2 operator -(FPVector2 value1, FPVector2 value2) Parameters value1 FPVector2 被减数 FPVector2。 value2 FPVector2 减数 FPVector2。 Returns FPVector2 两个 FPVector2 的差。 operator -(FPVector2) 取反运算符，返回一个新的 FPVector2，其 x 和 y 分量为原向量的相反数。 public static FPVector2 operator -(FPVector2 value) Parameters value FPVector2 要取反的 FPVector2。 Returns FPVector2 取反后的 FPVector2。"
  },
  "api/GameFrameX.Utility.Math.FPVector3.html": {
    "href": "api/GameFrameX.Utility.Math.FPVector3.html",
    "title": "Struct FPVector3 | GameFrameX.Server",
    "keywords": "Struct FPVector3 Namespace GameFrameX.Utility.Math Assembly GameFrameX.Utility.dll A vector structure. [Serializable] public struct FPVector3 Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors FPVector3(FP) Constructor initializing a new instance of the structure public FPVector3(FP xyz) Parameters xyz FP All components of the vector are set to xyz FPVector3(FP, FP, FP) Constructor initializing a new instance of the structure public FPVector3(FP x, FP y, FP z) Parameters x FP y FP z FP FPVector3(int, int, int) Constructor initializing a new instance of the structure public FPVector3(int x, int y, int z) Parameters x int The X component of the vector. y int The Y component of the vector. z int The Z component of the vector. Fields MaxValue A vector with components (FP.MaxValue,FP.MaxValue,FP.MaxValue); public static readonly FPVector3 MaxValue Field Value FPVector3 MinValue A vector with components (FP.MinValue,FP.MinValue,FP.MinValue); public static readonly FPVector3 MinValue Field Value FPVector3 back A vector with components (0,0,-1); public static readonly FPVector3 back Field Value FPVector3 down A vector with components (0,-1,0); public static readonly FPVector3 down Field Value FPVector3 forward A vector with components (0,0,1); public static readonly FPVector3 forward Field Value FPVector3 left A vector with components (-1,0,0); public static readonly FPVector3 left Field Value FPVector3 one A vector with components (1,1,1); public static readonly FPVector3 one Field Value FPVector3 right A vector with components (1,0,0); public static readonly FPVector3 right Field Value FPVector3 up A vector with components (0,1,0); public static readonly FPVector3 up Field Value FPVector3 x The X component of the vector. public FP x Field Value FP y The Y component of the vector. public FP y Field Value FP z The Z component of the vector. public FP z Field Value FP zero A vector with components (0,0,0); public static readonly FPVector3 zero Field Value FPVector3 Properties magnitude Gets the length of the vector. public FP magnitude { get; } Property Value FP Returns the length of the vector. normalized Gets a normalized version of the vector. public FPVector3 normalized { get; } Property Value FPVector3 Returns a normalized version of the vector. sqrMagnitude Gets the squared length of the vector. public FP sqrMagnitude { get; } Property Value FP Returns the squared length of the vector. Methods Abs(FPVector3) Returns the absolute value of a vector. public static FPVector3 Abs(FPVector3 other) Parameters other FPVector3 Returns FPVector3 Add(FPVector3, FPVector3) Adds two vectors. public static FPVector3 Add(FPVector3 value1, FPVector3 value2) Parameters value1 FPVector3 The first vector. value2 FPVector3 The second vector. Returns FPVector3 The sum of both vectors. Add(ref FPVector3, ref FPVector3, out FPVector3) Adds to vectors. public static void Add(ref FPVector3 value1, ref FPVector3 value2, out FPVector3 result) Parameters value1 FPVector3 The first vector. value2 FPVector3 The second vector. result FPVector3 The sum of both vectors. Angle(FPVector3, FPVector3) Returns the angle in degrees between /from/ and /to/. This is always the smallest public static FP Angle(FPVector3 from, FPVector3 to) Parameters from FPVector3 to FPVector3 Returns FP ClampMagnitude(FPVector3, FP) Clamps the magnitude of the vector. public static FPVector3 ClampMagnitude(FPVector3 vector3, FP maxLength) Parameters vector3 FPVector3 maxLength FP Returns FPVector3 Cross(FPVector3, FPVector3) The cross product of two vectors. public static FPVector3 Cross(FPVector3 vector1, FPVector3 vector2) Parameters vector1 FPVector3 The first vector. vector2 FPVector3 The second vector. Returns FPVector3 The cross product of both vectors. Cross(ref FPVector3, ref FPVector3, out FPVector3) The cross product of two vectors. public static void Cross(ref FPVector3 vector1, ref FPVector3 vector2, out FPVector3 result) Parameters vector1 FPVector3 The first vector. vector2 FPVector3 The second vector. result FPVector3 The cross product of both vectors. Distance(FPVector3, FPVector3) Gets a vector with the maximum x,y and z values of both vectors. public static FP Distance(FPVector3 v1, FPVector3 v2) Parameters v1 FPVector3 v2 FPVector3 Returns FP Divide(FPVector3, FP) Divides a vector by a factor. public static FPVector3 Divide(FPVector3 value1, FP scaleFactor) Parameters value1 FPVector3 The vector to divide. scaleFactor FP The scale factor. Returns FPVector3 Returns the scaled vector. Divide(ref FPVector3, FP, out FPVector3) Divides a vector by a factor. public static void Divide(ref FPVector3 value1, FP scaleFactor, out FPVector3 result) Parameters value1 FPVector3 The vector to divide. scaleFactor FP The scale factor. result FPVector3 Returns the scaled vector. Dot(FPVector3, FPVector3) Calculates the dot product of two vectors. public static FP Dot(FPVector3 vector1, FPVector3 vector2) Parameters vector1 FPVector3 The first vector. vector2 FPVector3 The second vector. Returns FP Returns the dot product of both vectors. Dot(ref FPVector3, ref FPVector3) Calculates the dot product of both vectors. public static FP Dot(ref FPVector3 vector1, ref FPVector3 vector2) Parameters vector1 FPVector3 The first vector. vector2 FPVector3 The second vector. Returns FP Returns the dot product of both vectors. Equals(object) Tests if an object is equal to this vector. public override bool Equals(object obj) Parameters obj object The object to test. Returns bool Returns true if they are euqal, otherwise false. GetHashCode() Gets the hashcode of the vector. public override int GetHashCode() Returns int Returns the hashcode of the vector. IsNearlyZero() Checks if the length of the vector is nearly zero. public bool IsNearlyZero() Returns bool Returns true if the vector is nearly zero, otherwise false. IsZero() Checks if the length of the vector is zero. public bool IsZero() Returns bool Returns true if the vector is zero, otherwise false. Lerp(FPVector3, FPVector3, FP) Linearly interpolates between two vectors. public static FPVector3 Lerp(FPVector3 from, FPVector3 to, FP percent) Parameters from FPVector3 to FPVector3 percent FP Returns FPVector3 MakeZero() Sets the length of the vector to zero. public void MakeZero() Max(FPVector3, FPVector3) Gets a vector with the maximum x,y and z values of both vectors. public static FPVector3 Max(FPVector3 value1, FPVector3 value2) Parameters value1 FPVector3 The first value. value2 FPVector3 The second value. Returns FPVector3 A vector with the maximum x,y and z values of both vectors. Max(ref FPVector3, ref FPVector3, out FPVector3) Gets a vector with the maximum x,y and z values of both vectors. public static void Max(ref FPVector3 value1, ref FPVector3 value2, out FPVector3 result) Parameters value1 FPVector3 The first value. value2 FPVector3 The second value. result FPVector3 A vector with the maximum x,y and z values of both vectors. Min(FPVector3, FPVector3) Gets a vector with the minimum x,y and z values of both vectors. public static FPVector3 Min(FPVector3 value1, FPVector3 value2) Parameters value1 FPVector3 The first value. value2 FPVector3 The second value. Returns FPVector3 A vector with the minimum x,y and z values of both vectors. Min(ref FPVector3, ref FPVector3, out FPVector3) Gets a vector with the minimum x,y and z values of both vectors. public static void Min(ref FPVector3 value1, ref FPVector3 value2, out FPVector3 result) Parameters value1 FPVector3 The first value. value2 FPVector3 The second value. result FPVector3 A vector with the minimum x,y and z values of both vectors. Multiply(FPVector3, FP) Multiply a vector with a factor. public static FPVector3 Multiply(FPVector3 value1, FP scaleFactor) Parameters value1 FPVector3 The vector to multiply. scaleFactor FP The scale factor. Returns FPVector3 Returns the multiplied vector. Multiply(ref FPVector3, FP, out FPVector3) Multiply a vector with a factor. public static void Multiply(ref FPVector3 value1, FP scaleFactor, out FPVector3 result) Parameters value1 FPVector3 The vector to multiply. scaleFactor FP The scale factor. result FPVector3 Returns the multiplied vector. Negate() Inverses the direction of the vector. public void Negate() Negate(FPVector3) Inverses the direction of a vector. public static FPVector3 Negate(FPVector3 value) Parameters value FPVector3 The vector to inverse. Returns FPVector3 The negated vector. Negate(ref FPVector3, out FPVector3) Inverses the direction of a vector. public static void Negate(ref FPVector3 value, out FPVector3 result) Parameters value FPVector3 The vector to inverse. result FPVector3 The negated vector. Normalize() Normalizes this vector. public void Normalize() Normalize(FPVector3) Normalizes the given vector. public static FPVector3 Normalize(FPVector3 value) Parameters value FPVector3 The vector which should be normalized. Returns FPVector3 A normalized vector. Normalize(ref FPVector3, out FPVector3) Normalizes the given vector. public static void Normalize(ref FPVector3 value, out FPVector3 result) Parameters value FPVector3 The vector which should be normalized. result FPVector3 A normalized vector. Project(FPVector3, FPVector3) Projects a vector onto another vector. public static FPVector3 Project(FPVector3 vector3, FPVector3 onNormal) Parameters vector3 FPVector3 onNormal FPVector3 Returns FPVector3 ProjectOnPlane(FPVector3, FPVector3) Projects a vector onto a plane defined by a normal orthogonal to the plane. public static FPVector3 ProjectOnPlane(FPVector3 vector3, FPVector3 planeNormal) Parameters vector3 FPVector3 planeNormal FPVector3 Returns FPVector3 Scale(FPVector3) Multiplies each component of the vector by the same components of the provided vector. public void Scale(FPVector3 other) Parameters other FPVector3 Scale(FPVector3, FPVector3) Multiplies each component of the vector by the same components of the provided vector. public static FPVector3 Scale(FPVector3 vecA, FPVector3 vecB) Parameters vecA FPVector3 vecB FPVector3 Returns FPVector3 Set(FP, FP, FP) Sets all vector component to specific values. public void Set(FP x, FP y, FP z) Parameters x FP The X component of the vector. y FP The Y component of the vector. z FP The Z component of the vector. SignedAngle(FPVector3, FPVector3, FPVector3) The smaller of the two possible angles between the two vectors is returned, therefore the result will never be greater than 180 degrees or smaller than -180 degrees. public static FP SignedAngle(FPVector3 from, FPVector3 to, FPVector3 axis) Parameters from FPVector3 to FPVector3 axis FPVector3 Returns FP Subtract(FPVector3, FPVector3) Subtracts two vectors. public static FPVector3 Subtract(FPVector3 value1, FPVector3 value2) Parameters value1 FPVector3 The first vector. value2 FPVector3 The second vector. Returns FPVector3 The difference of both vectors. Subtract(ref FPVector3, ref FPVector3, out FPVector3) Subtracts to vectors. public static void Subtract(ref FPVector3 value1, ref FPVector3 value2, out FPVector3 result) Parameters value1 FPVector3 The first vector. value2 FPVector3 The second vector. result FPVector3 The difference of both vectors. Swap(ref FPVector3, ref FPVector3) Swaps the components of both vectors. public static void Swap(ref FPVector3 vector1, ref FPVector3 vector2) Parameters vector1 FPVector3 The first vector to swap with the second. vector2 FPVector3 The second vector to swap with the first. ToFPVector2() Converts the vector to a 2D vector public FPVector2 ToFPVector2() Returns FPVector2 ToFPVector4() Converts the vector to a 4D vector public FPVector4 ToFPVector4() Returns FPVector4 ToString() Builds a string from the JVector. public override string ToString() Returns string A string containing all three components. Transform(FPVector3, FPMatrix) Transforms a vector by the given matrix. public static FPVector3 Transform(FPVector3 position, FPMatrix matrix) Parameters position FPVector3 The vector to transform. matrix FPMatrix The transform matrix. Returns FPVector3 The transformed vector. Transform(ref FPVector3, ref FPMatrix, out FPVector3) Transforms a vector by the given matrix. public static void Transform(ref FPVector3 position, ref FPMatrix matrix, out FPVector3 result) Parameters position FPVector3 The vector to transform. matrix FPMatrix The transform matrix. result FPVector3 The transformed vector. TransposedTransform(ref FPVector3, ref FPMatrix, out FPVector3) Transforms a vector by the transposed of the given Matrix. public static void TransposedTransform(ref FPVector3 position, ref FPMatrix matrix, out FPVector3 result) Parameters position FPVector3 The vector to transform. matrix FPMatrix The transform matrix. result FPVector3 The transformed vector. Operators operator +(FPVector3, FPVector3) Adds two vectors. public static FPVector3 operator +(FPVector3 value1, FPVector3 value2) Parameters value1 FPVector3 The first vector. value2 FPVector3 The second vector. Returns FPVector3 The sum of both vectors. operator /(FPVector3, FP) Divides a vector by a factor. public static FPVector3 operator /(FPVector3 value1, FP scaleFactor) Parameters value1 FPVector3 The vector to divide. scaleFactor FP The scale factor. Returns FPVector3 Returns the scaled vector. operator ==(FPVector3, FPVector3) Tests if two JVector are equal. public static bool operator ==(FPVector3 value1, FPVector3 value2) Parameters value1 FPVector3 The first value. value2 FPVector3 The second value. Returns bool Returns true if both values are equal, otherwise false. operator ^(FPVector3, FPVector3) Calculates the cross product of two vectors. public static FPVector3 operator ^(FPVector3 value1, FPVector3 value2) Parameters value1 FPVector3 value2 FPVector3 Returns FPVector3 operator !=(FPVector3, FPVector3) Tests if two JVector are not equal. public static bool operator !=(FPVector3 value1, FPVector3 value2) Parameters value1 FPVector3 The first value. value2 FPVector3 The second value. Returns bool Returns false if both values are equal, otherwise true. operator %(FPVector3, FPVector3) Calculates the cross product of two vectors. public static FPVector3 operator %(FPVector3 value1, FPVector3 value2) Parameters value1 FPVector3 The first vector. value2 FPVector3 The second vector. Returns FPVector3 Returns the cross product of both. operator *(FP, FPVector3) Multiplies a vector by a scale factor. public static FPVector3 operator *(FP value1, FPVector3 value2) Parameters value1 FP The scale factor. value2 FPVector3 The vector to scale. Returns FPVector3 Returns the scaled vector. operator *(FPVector3, FP) Multiplies a vector by a scale factor. public static FPVector3 operator *(FPVector3 value1, FP value2) Parameters value1 FPVector3 The vector to scale. value2 FP The scale factor. Returns FPVector3 Returns the scaled vector. operator *(FPVector3, FPVector3) Calculates the dot product of two vectors. public static FP operator *(FPVector3 value1, FPVector3 value2) Parameters value1 FPVector3 The first vector. value2 FPVector3 The second vector. Returns FP Returns the dot product of both. operator -(FPVector3, FPVector3) Subtracts two vectors. public static FPVector3 operator -(FPVector3 value1, FPVector3 value2) Parameters value1 FPVector3 The first vector. value2 FPVector3 The second vector. Returns FPVector3 The difference of both vectors. operator -(FPVector3) Inverses the direction of a vector. public static FPVector3 operator -(FPVector3 value) Parameters value FPVector3 Returns FPVector3"
  },
  "api/GameFrameX.Utility.Math.FPVector4.html": {
    "href": "api/GameFrameX.Utility.Math.FPVector4.html",
    "title": "Struct FPVector4 | GameFrameX.Server",
    "keywords": "Struct FPVector4 Namespace GameFrameX.Utility.Math Assembly GameFrameX.Utility.dll A vector structure. [Serializable] public struct FPVector4 Inherited Members object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors FPVector4(FP) Constructor initializing a new instance of the structure public FPVector4(FP xyzw) Parameters xyzw FP All components of the vector are set to xyz FPVector4(FP, FP, FP, FP) Constructor initializing a new instance of the structure public FPVector4(FP x, FP y, FP z, FP w) Parameters x FP y FP z FP w FP FPVector4(int, int, int, int) Constructor initializing a new instance of the structure public FPVector4(int x, int y, int z, int w) Parameters x int The X component of the vector. y int The Y component of the vector. z int The Z component of the vector. w int The W component of the vector. Fields MaxValue A vector with components (FP.MaxValue,FP.MaxValue,FP.MaxValue); public static readonly FPVector4 MaxValue Field Value FPVector4 MinValue A vector with components (FP.MinValue,FP.MinValue,FP.MinValue); public static readonly FPVector4 MinValue Field Value FPVector4 one A vector with components (1,1,1,1); public static readonly FPVector4 one Field Value FPVector4 w The W component of the vector. public FP w Field Value FP x The X component of the vector. public FP x Field Value FP y The Y component of the vector. public FP y Field Value FP z The Z component of the vector. public FP z Field Value FP zero A vector with components (0,0,0,0); public static readonly FPVector4 zero Field Value FPVector4 Properties magnitude Gets the length of the vector. public FP magnitude { get; } Property Value FP Returns the length of the vector. normalized Gets a normalized version of the vector. public FPVector4 normalized { get; } Property Value FPVector4 Returns a normalized version of the vector. sqrMagnitude Gets the squared length of the vector. public FP sqrMagnitude { get; } Property Value FP Returns the squared length of the vector. Methods Abs(FPVector4) Returns the absolute value of a vector. public static FPVector4 Abs(FPVector4 other) Parameters other FPVector4 Returns FPVector4 Add(FPVector4, FPVector4) Adds two vectors. public static FPVector4 Add(FPVector4 value1, FPVector4 value2) Parameters value1 FPVector4 The first vector. value2 FPVector4 The second vector. Returns FPVector4 The sum of both vectors. Add(ref FPVector4, ref FPVector4, out FPVector4) Adds to vectors. public static void Add(ref FPVector4 value1, ref FPVector4 value2, out FPVector4 result) Parameters value1 FPVector4 The first vector. value2 FPVector4 The second vector. result FPVector4 The sum of both vectors. ClampMagnitude(FPVector4, FP) Clamps the magnitude of the vector. public static FPVector4 ClampMagnitude(FPVector4 vector, FP maxLength) Parameters vector FPVector4 maxLength FP Returns FPVector4 Distance(FPVector4, FPVector4) Gets a vector with the maximum x,y and z values of both vectors. public static FP Distance(FPVector4 v1, FPVector4 v2) Parameters v1 FPVector4 v2 FPVector4 Returns FP Divide(FPVector4, FP) Divides a vector by a factor. public static FPVector4 Divide(FPVector4 value1, FP scaleFactor) Parameters value1 FPVector4 The vector to divide. scaleFactor FP The scale factor. Returns FPVector4 Returns the scaled vector. Divide(ref FPVector4, FP, out FPVector4) Divides a vector by a factor. public static void Divide(ref FPVector4 value1, FP scaleFactor, out FPVector4 result) Parameters value1 FPVector4 The vector to divide. scaleFactor FP The scale factor. result FPVector4 Returns the scaled vector. Dot(FPVector4, FPVector4) Calculates the dot product of two vectors. public static FP Dot(FPVector4 vector1, FPVector4 vector2) Parameters vector1 FPVector4 The first vector. vector2 FPVector4 The second vector. Returns FP Returns the dot product of both vectors. Dot(ref FPVector4, ref FPVector4) Calculates the dot product of both vectors. public static FP Dot(ref FPVector4 vector1, ref FPVector4 vector2) Parameters vector1 FPVector4 The first vector. vector2 FPVector4 The second vector. Returns FP Returns the dot product of both vectors. Equals(object) Tests if an object is equal to this vector. public override bool Equals(object obj) Parameters obj object The object to test. Returns bool Returns true if they are euqal, otherwise false. GetHashCode() Gets the hashcode of the vector. public override int GetHashCode() Returns int Returns the hashcode of the vector. IsNearlyZero() Checks if the length of the vector is nearly zero. public bool IsNearlyZero() Returns bool Returns true if the vector is nearly zero, otherwise false. IsZero() Checks if the length of the vector is zero. public bool IsZero() Returns bool Returns true if the vector is zero, otherwise false. Lerp(FPVector4, FPVector4, FP) Linearly interpolates between two vectors. public static FPVector4 Lerp(FPVector4 from, FPVector4 to, FP percent) Parameters from FPVector4 to FPVector4 percent FP Returns FPVector4 MakeZero() Sets the length of the vector to zero. public void MakeZero() Max(FPVector4, FPVector4) Gets a vector with the maximum x,y and z values of both vectors. public static FPVector4 Max(FPVector4 value1, FPVector4 value2) Parameters value1 FPVector4 The first value. value2 FPVector4 The second value. Returns FPVector4 A vector with the maximum x,y and z values of both vectors. Max(ref FPVector4, ref FPVector4, out FPVector4) Gets a vector with the maximum x,y and z values of both vectors. public static void Max(ref FPVector4 value1, ref FPVector4 value2, out FPVector4 result) Parameters value1 FPVector4 The first value. value2 FPVector4 The second value. result FPVector4 A vector with the maximum x,y and z values of both vectors. Min(FPVector4, FPVector4) Gets a vector with the minimum x,y and z values of both vectors. public static FPVector4 Min(FPVector4 value1, FPVector4 value2) Parameters value1 FPVector4 The first value. value2 FPVector4 The second value. Returns FPVector4 A vector with the minimum x,y and z values of both vectors. Min(ref FPVector4, ref FPVector4, out FPVector4) Gets a vector with the minimum x,y and z values of both vectors. public static void Min(ref FPVector4 value1, ref FPVector4 value2, out FPVector4 result) Parameters value1 FPVector4 The first value. value2 FPVector4 The second value. result FPVector4 A vector with the minimum x,y and z values of both vectors. Multiply(FPVector4, FP) Multiply a vector with a factor. public static FPVector4 Multiply(FPVector4 value1, FP scaleFactor) Parameters value1 FPVector4 The vector to multiply. scaleFactor FP The scale factor. Returns FPVector4 Returns the multiplied vector. Multiply(ref FPVector4, FP, out FPVector4) Multiply a vector with a factor. public static void Multiply(ref FPVector4 value1, FP scaleFactor, out FPVector4 result) Parameters value1 FPVector4 The vector to multiply. scaleFactor FP The scale factor. result FPVector4 Returns the multiplied vector. Negate() Inverses the direction of the vector. public void Negate() Negate(FPVector4) Inverses the direction of a vector. public static FPVector4 Negate(FPVector4 value) Parameters value FPVector4 The vector to inverse. Returns FPVector4 The negated vector. Negate(ref FPVector4, out FPVector4) Inverses the direction of a vector. public static void Negate(ref FPVector4 value, out FPVector4 result) Parameters value FPVector4 The vector to inverse. result FPVector4 The negated vector. Normalize() Normalizes this vector. public void Normalize() Normalize(FPVector4) Normalizes the given vector. public static FPVector4 Normalize(FPVector4 value) Parameters value FPVector4 The vector which should be normalized. Returns FPVector4 A normalized vector. Normalize(ref FPVector4, out FPVector4) Normalizes the given vector. public static void Normalize(ref FPVector4 value, out FPVector4 result) Parameters value FPVector4 The vector which should be normalized. result FPVector4 A normalized vector. Scale(FPVector4) Multiplies each component of the vector by the same components of the provided vector. public void Scale(FPVector4 other) Parameters other FPVector4 Scale(FPVector4, FPVector4) Multiplies each component of the vector by the same components of the provided vector. public static FPVector4 Scale(FPVector4 vecA, FPVector4 vecB) Parameters vecA FPVector4 vecB FPVector4 Returns FPVector4 Set(FP, FP, FP, FP) Sets all vector component to specific values. public void Set(FP x, FP y, FP z, FP w) Parameters x FP The X component of the vector. y FP The Y component of the vector. z FP The Z component of the vector. w FP The W component of the vector. Subtract(FPVector4, FPVector4) Subtracts two vectors. public static FPVector4 Subtract(FPVector4 value1, FPVector4 value2) Parameters value1 FPVector4 The first vector. value2 FPVector4 The second vector. Returns FPVector4 The difference of both vectors. Subtract(ref FPVector4, ref FPVector4, out FPVector4) Subtracts to vectors. public static void Subtract(ref FPVector4 value1, ref FPVector4 value2, out FPVector4 result) Parameters value1 FPVector4 The first vector. value2 FPVector4 The second vector. result FPVector4 The difference of both vectors. Swap(ref FPVector4, ref FPVector4) Swaps the components of both vectors. public static void Swap(ref FPVector4 vector1, ref FPVector4 vector2) Parameters vector1 FPVector4 The first vector to swap with the second. vector2 FPVector4 The second vector to swap with the first. ToFPVector() Converts the vector to a FPVector. public FPVector3 ToFPVector() Returns FPVector3 ToFPVector2() Converts the vector to a FPVector2. public FPVector2 ToFPVector2() Returns FPVector2 ToString() Builds a string from the JVector. public override string ToString() Returns string A string containing all three components. Transform(FPVector3, FPMatrix4x4) Transforms a vector by the given matrix. public static FPVector4 Transform(FPVector3 position, FPMatrix4x4 matrix) Parameters position FPVector3 matrix FPMatrix4x4 Returns FPVector4 Transform(ref FPVector3, ref FPMatrix4x4, out FPVector4) Transforms a vector by the given matrix. public static void Transform(ref FPVector3 vector3, ref FPMatrix4x4 matrix, out FPVector4 result) Parameters vector3 FPVector3 The vector to transform. matrix FPMatrix4x4 The transform matrix. result FPVector4 The transformed vector. Transform(FPVector4, FPMatrix4x4) Transforms a vector by the given matrix. public static FPVector4 Transform(FPVector4 position, FPMatrix4x4 matrix) Parameters position FPVector4 The vector to transform. matrix FPMatrix4x4 The transform matrix. Returns FPVector4 The transformed vector. Transform(ref FPVector4, ref FPMatrix4x4, out FPVector4) Transforms a vector by the given matrix. public static void Transform(ref FPVector4 vector, ref FPMatrix4x4 matrix, out FPVector4 result) Parameters vector FPVector4 matrix FPMatrix4x4 result FPVector4 Operators operator +(FPVector4, FPVector4) Adds two vectors. public static FPVector4 operator +(FPVector4 value1, FPVector4 value2) Parameters value1 FPVector4 The first vector. value2 FPVector4 The second vector. Returns FPVector4 The sum of both vectors. operator /(FPVector4, FP) Divides a vector by a factor. public static FPVector4 operator /(FPVector4 value1, FP scaleFactor) Parameters value1 FPVector4 The vector to divide. scaleFactor FP The scale factor. Returns FPVector4 Returns the scaled vector. operator ==(FPVector4, FPVector4) Tests if two JVector are equal. public static bool operator ==(FPVector4 value1, FPVector4 value2) Parameters value1 FPVector4 The first value. value2 FPVector4 The second value. Returns bool Returns true if both values are equal, otherwise false. operator !=(FPVector4, FPVector4) Tests if two JVector are not equal. public static bool operator !=(FPVector4 value1, FPVector4 value2) Parameters value1 FPVector4 The first value. value2 FPVector4 The second value. Returns bool Returns false if both values are equal, otherwise true. operator *(FP, FPVector4) Multiplies a vector by a scale factor. public static FPVector4 operator *(FP value1, FPVector4 value2) Parameters value1 FP The scale factor. value2 FPVector4 The vector to scale. Returns FPVector4 Returns the scaled vector. operator *(FPVector4, FP) Multiplies a vector by a scale factor. public static FPVector4 operator *(FPVector4 value1, FP value2) Parameters value1 FPVector4 The vector to scale. value2 FP The scale factor. Returns FPVector4 Returns the scaled vector. operator *(FPVector4, FPVector4) Calculates the dot product of two vectors. public static FP operator *(FPVector4 value1, FPVector4 value2) Parameters value1 FPVector4 The first vector. value2 FPVector4 The second vector. Returns FP Returns the dot product of both. operator -(FPVector4, FPVector4) Subtracts two vectors. public static FPVector4 operator -(FPVector4 value1, FPVector4 value2) Parameters value1 FPVector4 The first vector. value2 FPVector4 The second vector. Returns FPVector4 The difference of both vectors. operator -(FPVector4) Inverses the direction of a vector. public static FPVector4 operator -(FPVector4 value) Parameters value FPVector4 Returns FPVector4"
  },
  "api/GameFrameX.Utility.Math.html": {
    "href": "api/GameFrameX.Utility.Math.html",
    "title": "Namespace GameFrameX.Utility.Math | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.Utility.Math Classes FPMath Contains common math operations. FPRandom Structs FP Represents a Q31.32 fixed-point number. FPMatrix 3x3 Matrix. FPMatrix4x4 3x3 Matrix. FPQuaternion A Quaternion representing an orientation. FPVector2 FPVector3 A vector structure. FPVector4 A vector structure."
  },
  "api/GameFrameX.Utility.Net.html": {
    "href": "api/GameFrameX.Utility.Net.html",
    "title": "Class Net | GameFrameX.Server",
    "keywords": "Class Net Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 网络端口帮助类 public static class Net Inheritance object Net Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GetFirstAvailablePort(int, int) 获取第一个可用的端口号 public static int GetFirstAvailablePort(int startPort = 667, int maxPort = 65535) Parameters startPort int 起始端口号，默认为667 maxPort int 结束端口号，默认为65535 Returns int 第一个可用的端口号，如果没有可用端口号则返回-1 IsValidIpAddress(string, out IPAddress) 判断IP地址是否合法 public static bool IsValidIpAddress(string ipAddress, out IPAddress value) Parameters ipAddress string IP地址字符串 value IPAddress 解析成功的IPAddress对象 Returns bool 如果IP地址合法，返回true；否则返回false PortIsAvailable(int) 检查指定端口是否已用 public static bool PortIsAvailable(int port) Parameters port int 要检查的端口号 Returns bool 如果端口未被使用，返回true；否则返回false PortIsUsed() 获取操作系统已用的端口号 public static List<int> PortIsUsed() Returns List<int> 包含已用端口号的列表"
  },
  "api/GameFrameX.Utility.OneParam-1.html": {
    "href": "api/GameFrameX.Utility.OneParam-1.html",
    "title": "Class OneParam<T> | GameFrameX.Server",
    "keywords": "Class OneParam<T> Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 单个参数 public class OneParam<T> : Param Type Parameters T Inheritance object Param OneParam<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors OneParam(T) 单个参数 public OneParam(T t) Parameters t T Fields Value 参数 public readonly T Value Field Value T"
  },
  "api/GameFrameX.Utility.Param.html": {
    "href": "api/GameFrameX.Utility.Param.html",
    "title": "Class Param | GameFrameX.Server",
    "keywords": "Class Param Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 参数 public abstract class Param Inheritance object Param Derived FiveParam<T1, T2, T3, T4, T5> FourParam<T1, T2, T3, T4> OneParam<T> ThreeParam<T1, T2, T3> TwoParam<T1, T2> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object)"
  },
  "api/GameFrameX.Utility.PlatformRuntimeHelper.html": {
    "href": "api/GameFrameX.Utility.PlatformRuntimeHelper.html",
    "title": "Class PlatformRuntimeHelper | GameFrameX.Server",
    "keywords": "Class PlatformRuntimeHelper Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 平台运行时帮助类 public static class PlatformRuntimeHelper Inheritance object PlatformRuntimeHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsFreeBsd 是否是FreeBSD public static bool IsFreeBsd { get; } Property Value bool IsLinux 是否是Linux public static bool IsLinux { get; } Property Value bool IsOsx 是否是Mac public static bool IsOsx { get; } Property Value bool IsWindows 是否是Windows public static bool IsWindows { get; } Property Value bool"
  },
  "api/GameFrameX.Utility.Random.html": {
    "href": "api/GameFrameX.Utility.Random.html",
    "title": "Class Random | GameFrameX.Server",
    "keywords": "Class Random Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 随机相关的实用函数。 public static class Random Inheritance object Random Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Gcd(int, int) 求两个数的最大公约数 public static int Gcd(int a, int b) Parameters a int 第一个整数 b int 第二个整数 Returns int 最大公约数 Gcd(params int[]) 求多个数的最大公约数 public static int Gcd(params int[] input) Parameters input int[] 输入的整数数组 Returns int 最大公约数 Ids(int[][], int, bool) 随机获取指定数量的id public static List<int> Ids(int[][] array, int num, bool isCanRepeat = true) Parameters array int[][] 数据列表，每个元素为[id, weight] num int 需要选取的数量 isCanRepeat bool 是否允许重复选取 Returns List<int> 包含随机选取的id列表 Ids(string, int, bool) 随机获取指定数量的id public static List<int> Ids(string str, int num, bool isCanRepeat = true) Parameters str string 权重字符串，格式为\"id1+weight1;id2+weight2;...\" num int 需要选取的数量 isCanRepeat bool 是否允许重复选取 Returns List<int> 包含随机选取的id列表 Idx(int[]) 根据权重随机选取一个id public static int Idx(int[] weights) Parameters weights int[] 权重数组 Returns int 随机选取的id索引 Idx(int[][], int) 根据权重随机选取一个id public static int Idx(int[][] array, int weightIndex = 1) Parameters array int[][] 数据列表，每个元素为[id, weight] weightIndex int 权重索引 Returns int 随机选取的id索引 Items(int[][], int, bool) 随机获取指定数量的项目 public static List<int[]> Items(int[][] array, int num, bool isCanRepeat = true) Parameters array int[][] 数据列表，每个元素为[id, weight] num int 需要选取的数量 isCanRepeat bool 是否允许重复选取 Returns List<int[]> 包含随机选取的项目列表 Items(string, int, bool) 随机获取指定数量的项目 public static List<int[]> Items(string str, int num, bool isCanRepeat = true) Parameters str string 权重字符串，格式为\"id1+weight1;id2+weight2;...\" num int 需要选取的数量 isCanRepeat bool 是否允许重复选取 Returns List<int[]> 包含随机选取的项目列表 Next() 返回非负随机数。 public static int Next() Returns int 大于等于零且小于 System.Int32.MaxValue 的 32 位带符号整数。 Next(int) 返回一个小于所指定最大值的非负随机数。 public static int Next(int maxValue) Parameters maxValue int 要生成的随机数的上界（随机数不能取该上界值）。maxValue 必须大于等于零。 Returns int 大于等于零且小于 maxValue 的 32 位带符号整数，即：返回值的范围通常包括零但不包括 maxValue。不过，如果 maxValue 等于零，则返回 maxValue。 Next(int, int) 返回一个指定范围内的随机数。 public static int Next(int minValue, int maxValue) Parameters minValue int 返回的随机数的下界（随机数可取该下界值）。 maxValue int 返回的随机数的上界（随机数不能取该上界值）。maxValue 必须大于等于 minValue。 Returns int 一个大于等于 minValue 且小于 maxValue 的 32 位带符号整数，即：返回的值范围包括 minValue 但不包括 maxValue。如果 minValue 等于 maxValue，则返回 minValue。 NextBytes(byte[]) 用随机数填充指定字节数组的元素。 public static void NextBytes(byte[] buffer) Parameters buffer byte[] 包含随机数的字节数组。 NextDouble() 返回一个介于 0.0 和 1.0 之间的随机数。 public static double NextDouble() Returns double 大于等于 0.0 并且小于 1.0 的双精度浮点数。 NextInt64() 返回非负随机数。 public static long NextInt64() Returns long 大于等于零且小于 System.Int64.MaxValue 的 64 位带符号整数。 NextInt64(int) 返回一个小于所指定最大值的非负随机数。 public static long NextInt64(int maxValue) Parameters maxValue int 要生成的随机数的上界（随机数不能取该上界值）。maxValue 必须大于等于零。 Returns long 大于等于零且小于 maxValue 的 64 位带符号整数，即：返回值的范围通常包括零但不包括 maxValue。不过，如果 maxValue 等于零，则返回 maxValue。 NextUInt32() 获取UInt32范围内的随机数。 public static uint NextUInt32() Returns uint 一个大于等于零且小于 UInt32.MaxValue 的 32 位无符号整数。 NextUInt64() 获取UInt64范围内的随机数。 public static ulong NextUInt64() Returns ulong 一个大于等于零且小于 UInt64.MaxValue 的 64 位无符号整数。 NxtInt64(long, long) 返回一个指定范围内的随机数。 public static long NxtInt64(long minValue, long maxValue) Parameters minValue long 返回的随机数的下界（随机数可取该下界值）。 maxValue long 返回的随机数的上界（随机数不能取该上界值）。maxValue 必须大于等于 minValue。 Returns long 一个大于等于 minValue 且小于 maxValue 的 64 位带符号整数，即：返回的值范围包括 minValue 但不包括 maxValue。如果 minValue 等于 maxValue，则返回 minValue。 RandomSelect(int, int) 从1~n中随机选取m个数，m小于n public static HashSet<int> RandomSelect(int m, int n) Parameters m int 需要选取的数量 n int 范围上限 Returns HashSet<int> 包含随机选取的m个数的集合 Exceptions ArgumentOutOfRangeException 当m大于n时抛出此异常 SetSeed(int) 设置随机数种子。 public static void SetSeed(int seed) Parameters seed int 随机数种子。"
  },
  "api/GameFrameX.Utility.Setting.AppSetting.html": {
    "href": "api/GameFrameX.Utility.Setting.AppSetting.html",
    "title": "Class AppSetting | GameFrameX.Server",
    "keywords": "Class AppSetting Namespace GameFrameX.Utility.Setting Assembly GameFrameX.Utility.dll 应用程序配置类 public sealed class AppSetting Inheritance object AppSetting Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.ReferenceEquals(object, object) Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors AppSetting() 构造函数 public AppSetting() Fields AppExitSource 用于通知应用程序退出的任务完成源 [JsonIgnore] public readonly TaskCompletionSource<bool> AppExitSource Field Value TaskCompletionSource<bool> Properties APMPort 应用性能监控端口 public int APMPort { get; set; } Property Value int AppExitToken 获取应用程序退出的任务标记 [JsonIgnore] public Task<bool> AppExitToken { get; } Property Value Task<bool> AppRunning 获取或设置应用程序是否正在运行 [JsonIgnore] public bool AppRunning { get; set; } Property Value bool DBIp 数据库服务连接地址 public string DBIp { get; set; } Property Value string DBPort 数据库服务连接端口 public ushort DBPort { get; set; } Property Value ushort DataBaseName 数据库名称 public string DataBaseName { get; set; } Property Value string DataBaseUrl 数据库地址 public string DataBaseUrl { get; set; } Property Value string DataCenter 数据中心 public string DataCenter { get; set; } Property Value string DiscoveryCenterIp 发现中心地址 public string DiscoveryCenterIp { get; set; } Property Value string DiscoveryCenterPort 发现中心端口 public ushort DiscoveryCenterPort { get; set; } Property Value ushort HttpCode HTTP响应码 public string HttpCode { get; set; } Property Value string HttpPort HTTP端口 public int HttpPort { get; set; } Property Value int HttpUrl HTTP地址 public string HttpUrl { get; set; } Property Value string HttpsPort HTTPS端口 public int HttpsPort { get; set; } Property Value int InnerIp 内部IP地址 public string InnerIp { get; set; } Property Value string InnerPort 内部端口 public ushort InnerPort { get; set; } Property Value ushort IsDebug 是否是调试模式 public bool IsDebug { get; set; } Property Value bool IsDebugReceive 是否打印接收的数据 public bool IsDebugReceive { get; set; } Property Value bool IsDebugSend 是否打印发送的数据 public bool IsDebugSend { get; set; } Property Value bool Language 语言 public string Language { get; set; } Property Value string LaunchTime 应用程序启动时间 public DateTime LaunchTime { get; set; } Property Value DateTime MaxClientCount 最大客户端数量 public int MaxClientCount { get; set; } Property Value int MaxModuleId 游戏逻辑服务器的处理最大模块ID public short MaxModuleId { get; set; } Property Value short MinModuleId 游戏逻辑服务器的处理最小模块ID public short MinModuleId { get; set; } Property Value short OuterIp 外部IP地址 public string OuterIp { get; set; } Property Value string OuterPort 外部端口 public ushort OuterPort { get; set; } Property Value ushort SDKType SDK类型 public int SDKType { get; set; } Property Value int SaveDataInterval 保存数据的时间间隔（毫秒） public int SaveDataInterval { get; set; } Property Value int ServerId 服务器ID public int ServerId { get; set; } Property Value int ServerName 服务器名称 public string ServerName { get; set; } Property Value string ServerType 获取或设置服务器类型 public ServerType ServerType { get; set; } Property Value ServerType TagName 标记名称 public string TagName { get; set; } Property Value string WsPort WebSocket端口 public int WsPort { get; set; } Property Value int WssCertFilePath Wss使用的证书路径 public string WssCertFilePath { get; set; } Property Value string WssPort WebSocket加密端口 public int WssPort { get; set; } Property Value int Methods IsLocal(int) 判断指定的服务ID是否为本地服务 public bool IsLocal(int serverId) Parameters serverId int 服务ID Returns bool 返回是否是本地服务 ToFormatString() 将对象序列化为格式化的JSON字符串 public string ToFormatString() Returns string 格式化的JSON字符串 ToString() 将对象序列化为JSON字符串 public override string ToString() Returns string JSON字符串"
  },
  "api/GameFrameX.Utility.Setting.GlobalConst.html": {
    "href": "api/GameFrameX.Utility.Setting.GlobalConst.html",
    "title": "Class GlobalConst | GameFrameX.Server",
    "keywords": "Class GlobalConst Namespace GameFrameX.Utility.Setting Assembly GameFrameX.Utility.dll 全局常量类 public static class GlobalConst Inheritance object GlobalConst Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields ActorIdKey ActorId Key public const string ActorIdKey = \"ACTOR_ID\" Field Value string ActorTypeMask Actor类型标记 public const int ActorTypeMask = 42 Field Value int ActorTypeMax 最大值 public const int ActorTypeMax = 999 Field Value int ActorTypeNone 空将会被判断为无效值 public const ushort ActorTypeNone = 0 Field Value ushort ActorTypePlayer 角色 public const ushort ActorTypePlayer = 1 Field Value ushort ActorTypeSeparator 分割线(勿调整,勿用于业务逻辑) public const int ActorTypeSeparator = 128 Field Value int ActorTypeServer 服务类型 public const int ActorTypeServer = 129 Field Value int ComponentAgentNameSuffix 组件代理名称后缀 public const string ComponentAgentNameSuffix = \"ComponentAgent\" Field Value string ComponentAgentWrapperNameSuffix 组件代理包裹名称后缀 public const string ComponentAgentWrapperNameSuffix = \"ComponentAgentWrapper\" Field Value string HotfixNameSpaceNamePrefix 组件代理名称前缀 public const string HotfixNameSpaceNamePrefix = \"GameFrameX.Hotfix.\" Field Value string HttpSignKey HTTP 请求的签名字段名称 public const string HttpSignKey = \"sign\" Field Value string HttpTimestampKey HTTP 请求的时间戳字段名称 public const string HttpTimestampKey = \"timestamp\" Field Value string MAGIC public const int MAGIC = 60 Field Value int MaxActorIncrease 最大Actor增量 public const int MaxActorIncrease = 4095 Field Value int MaxGlobalId 最大全局ID public const int MaxGlobalId = 9999000 Field Value int MaxServerId 最大服务器ID public const int MaxServerId = 9999 Field Value int MaxUniqueIncrease 最大唯一增量 public const int MaxUniqueIncrease = 524287 Field Value int MinServerId 最小服务器ID public const int MinServerId = 1000 Field Value int ModuleIdTimestampMask 模块ID时间戳标记 public const int ModuleIdTimestampMask = 19 Field Value int SecondMask 秒标记 public const int SecondMask = 1073741823 Field Value int ServerIdOrModuleIdMask 服务器ID 长度标记位=>49 = 63-14 public const int ServerIdOrModuleIdMask = 49 Field Value int SessionIdKey SessionId Key public const string SessionIdKey = \"SESSION_ID\" Field Value string TimestampMask 时间戳标记 public const int TimestampMask = 12 Field Value int UniqueIdIdKey 唯一ID public const string UniqueIdIdKey = \"UNIQUEID_ID\" Field Value string WrapperNameSuffix 组件包裹名称后缀 public const string WrapperNameSuffix = \"Wrapper\" Field Value string"
  },
  "api/GameFrameX.Utility.Setting.GlobalSettings.html": {
    "href": "api/GameFrameX.Utility.Setting.GlobalSettings.html",
    "title": "Class GlobalSettings | GameFrameX.Server",
    "keywords": "Class GlobalSettings Namespace GameFrameX.Utility.Setting Assembly GameFrameX.Utility.dll 全局设置 public static class GlobalSettings Inheritance object GlobalSettings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties IsAppRunning 是否运行中 public static bool IsAppRunning { get; set; } Property Value bool IsDebug 是否是调试模式 public static bool IsDebug { get; set; } Property Value bool LaunchTime 启动时间 public static DateTime LaunchTime { get; set; } Property Value DateTime SaveIntervalInMilliSeconds 数据存储间隔 单位 毫秒,默认5分钟，最小1秒 public static int SaveIntervalInMilliSeconds { get; set; } Property Value int ServerId 服务器ID public static int ServerId { get; set; } Property Value int Methods GetSetting<T>(ServerType) 根据服务器类型获取特定类型的设置 public static AppSetting GetSetting<T>(ServerType serverType) Parameters serverType ServerType 服务器类型 Returns AppSetting 返回匹配的设置，如果没有找到则返回null Type Parameters T 设置类型 GetSettings() 获取所有设置 public static List<AppSetting> GetSettings() Returns List<AppSetting> 返回所有设置的列表 GetSettings(ServerType) 根据服务器类型获取设置 public static List<AppSetting> GetSettings(ServerType serverType) Parameters serverType ServerType 服务器类型 Returns List<AppSetting> 返回匹配的设置列表 Load(string) 加载启动配置 public static void Load(string path) Parameters path string 配置文件路径 Exceptions InvalidOperationException 当配置文件解析失败时抛出 Exception 当服务器ID不在合法范围内时抛出"
  },
  "api/GameFrameX.Utility.Setting.IdModule.html": {
    "href": "api/GameFrameX.Utility.Setting.IdModule.html",
    "title": "Enum IdModule | GameFrameX.Server",
    "keywords": "Enum IdModule Namespace GameFrameX.Utility.Setting Assembly GameFrameX.Utility.dll 需要小于1000，因为1000以上作为服务器id了 public enum IdModule Extension Methods ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Fields Account = 104 账号 Equip = 102 Max = 999 最大值 Min = 0 最小值 Pet = 101 单服/玩家不同即可 WorkerActor = 103"
  },
  "api/GameFrameX.Utility.Setting.ServerType.html": {
    "href": "api/GameFrameX.Utility.Setting.ServerType.html",
    "title": "Enum ServerType | GameFrameX.Server",
    "keywords": "Enum ServerType Namespace GameFrameX.Utility.Setting Assembly GameFrameX.Utility.dll 服务器类型 [Flags] public enum ServerType Extension Methods ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Fields Account = 32 账号服 All = Log | DataBase | Cache | Gateway | Account | DiscoveryCenter | Backup | Game | Recharge | Logic | Chat | Mail | Guild | Room 全部 Backup = 256 远程备份 Cache = 8 缓存服 Chat = 16384 聊天服 Client = 0 客户端 DataBase = 4 数据库 DiscoveryCenter = 128 服务发现中心服，用于发现其他服务器。 Game = 1024 游戏服 Gateway = 16 网关服 Guild = 65536 公会服 Log = 2 日志服 Logic = 8192 逻辑服 Login = 512 登录服务器 Mail = 32768 邮件服 Match = 2048 匹配服 None = -1 空值 Recharge = 4096 充值服 Room = 131072 房间服 Router = 64 路由"
  },
  "api/GameFrameX.Utility.Setting.html": {
    "href": "api/GameFrameX.Utility.Setting.html",
    "title": "Namespace GameFrameX.Utility.Setting | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.Utility.Setting Classes AppSetting 应用程序配置类 GlobalConst 全局常量类 GlobalSettings 全局设置 Enums IdModule 需要小于1000，因为1000以上作为服务器id了 ServerType 服务器类型"
  },
  "api/GameFrameX.Utility.Singleton-1.html": {
    "href": "api/GameFrameX.Utility.Singleton-1.html",
    "title": "Class Singleton<T> | GameFrameX.Server",
    "keywords": "Class Singleton<T> Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 单例类 public abstract class Singleton<T> where T : Singleton<T>, new() Type Parameters T Inheritance object Singleton<T> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Properties Instance 单例对象 public static T Instance { get; } Property Value T"
  },
  "api/GameFrameX.Utility.ThreeParam-3.html": {
    "href": "api/GameFrameX.Utility.ThreeParam-3.html",
    "title": "Class ThreeParam<T1, T2, T3> | GameFrameX.Server",
    "keywords": "Class ThreeParam<T1, T2, T3> Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 三个参数 public class ThreeParam<T1, T2, T3> : Param Type Parameters T1 T2 T3 Inheritance object Param ThreeParam<T1, T2, T3> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors ThreeParam(T1, T2, T3) 三个参数 public ThreeParam(T1 t1, T2 t2, T3 t3) Parameters t1 T1 t2 T2 t3 T3 Fields Value1 参数1 public readonly T1 Value1 Field Value T1 Value2 参数2 public readonly T2 Value2 Field Value T2 Value3 参数3 public readonly T3 Value3 Field Value T3"
  },
  "api/GameFrameX.Utility.TimeHelper.html": {
    "href": "api/GameFrameX.Utility.TimeHelper.html",
    "title": "Class TimeHelper | GameFrameX.Server",
    "keywords": "Class TimeHelper Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 时间帮助工具类 public static class TimeHelper Inheritance object TimeHelper Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields EpochLocal 1970-01-01 00:00:00 本地时间 public static readonly DateTime EpochLocal Field Value DateTime EpochUtc 1970-01-01 00:00:00 UTC 时间 public static readonly DateTime EpochUtc Field Value DateTime Methods CurrentTimeMillis() 返回当前时间的毫秒表示。 public static long CurrentTimeMillis() Returns long 当前时间的毫秒数。 CurrentTimeWithFullString() 当前时区时间的完整字符串 public static string CurrentTimeWithFullString() Returns string 当前时区时间的完整字符串。 CurrentTimeWithUtcFullString() UTC时区时间的完整字符串 public static string CurrentTimeWithUtcFullString() Returns string UTC时区时间的完整字符串。 GetChinaDayOfWeek() 获取当前星期在中国的对应数字。 public static int GetChinaDayOfWeek() Returns int 当前星期在中国的对应数字。 GetChinaDayOfWeek(DayOfWeek) 获取指定星期在中国的对应数字。 public static int GetChinaDayOfWeek(DayOfWeek d) Parameters d DayOfWeek 星期几。 Returns int 星期在中国的对应数字。 GetCrossDays(DateTime, DateTime, int) 获取两个日期之间跨越的天数。 public static int GetCrossDays(DateTime begin, DateTime after, int hour = 0) Parameters begin DateTime 起始日期。 after DateTime 结束日期。 hour int 小时。 Returns int 跨越的天数。 GetCrossDays(DateTime, int) 获取从指定日期到当前日期之间跨越的天数。 public static int GetCrossDays(DateTime begin, int hour = 0) Parameters begin DateTime 起始日期。 hour int 小时。 Returns int 跨越的天数。 GetDayOfWeekTime(DateTime, DayOfWeek) 获取指定日期所在星期的时间。 public static DateTime GetDayOfWeekTime(DateTime t, DayOfWeek d) Parameters t DateTime 指定日期。 d DayOfWeek 星期几。 Returns DateTime 指定日期所在星期的时间。 GetDayOfWeekTime(DayOfWeek) 获取当前日期所在星期的时间。 public static DateTime GetDayOfWeekTime(DayOfWeek d) Parameters d DayOfWeek 星期几。 Returns DateTime 当前日期所在星期的时间。 IsLocalSameDay(long, long) 按照本地时间判断两个时间戳是否是同一天 public static bool IsLocalSameDay(long timestamp1, long timestamp2) Parameters timestamp1 long 时间戳1 timestamp2 long 时间戳2 Returns bool 是否是同一天 IsNowSameWeek(DateTime) 判断当前时间是否与指定时间处于同一周。 public static bool IsNowSameWeek(DateTime start) Parameters start DateTime 指定时间的起始时间。 Returns bool 如果当前时间与指定时间处于同一周，则为 true；否则为 false。 IsNowSameWeek(long) 判断当前时间是否与指定时间处于同一周。 public static bool IsNowSameWeek(long start) Parameters start long 指定时间的起始时间。 Returns bool 如果当前时间与指定时间处于同一周，则为 true；否则为 false。 IsSameDay(DateTime, DateTime) 判断两个时间是否是同一天 public static bool IsSameDay(DateTime time1, DateTime time2) Parameters time1 DateTime 时间1 time2 DateTime 时间2 Returns bool 是否是同一天 IsSameWeek(DateTime, DateTime) 判断两个时间是否处于同一周。 public static bool IsSameWeek(DateTime start, DateTime end) Parameters start DateTime 起始时间。 end DateTime 结束时间。 Returns bool 如果两个时间处于同一周，则为 true；否则为 false。 IsUnixSameDay(long, long) 按照UTC时间判断两个时间戳是否是同一天 public static bool IsUnixSameDay(long timestamp1, long timestamp2) Parameters timestamp1 long 时间戳1 timestamp2 long 时间戳2 Returns bool 是否是同一天 MillisToDateTime(long, bool) 毫秒转时间 public static DateTime MillisToDateTime(long time, bool utc = false) Parameters time long 毫秒数。 utc bool 是否使用UTC时间。 Returns DateTime 转换后的时间。 TimeMillis(DateTime, bool) 获取指定时间距离纪元时间（本地时间或UTC时间）的毫秒数。 public static long TimeMillis(DateTime time, bool utc = false) Parameters time DateTime 指定时间。 utc bool 是否使用UTC时间。 Returns long 距离纪元时间的毫秒数。 TimeMilliseconds() 当前时区时间 毫秒时间戳 public static long TimeMilliseconds() Returns long 当前时区时间的毫秒时间戳。 TimeSecond(DateTime, bool) 获取指定时间距离纪元时间（本地时间或UTC时间）的秒数。 public static int TimeSecond(DateTime time, bool utc = false) Parameters time DateTime 指定时间。 utc bool 是否使用UTC时间。 Returns int 距离纪元时间的秒数。 TimeSeconds() 当前时区时间 秒时间戳 public static long TimeSeconds() Returns long 当前时区时间的秒时间戳。 TimeSpanWithTimestamp(long) 将给定的时间戳转换为相对于当前时间的 TimeSpan 对象。 public static TimeSpan TimeSpanWithTimestamp(long timestamp) Parameters timestamp long 自某个固定时间点（通常为1970年1月1日午夜）以来经过的毫秒数。 Returns TimeSpan 一个 TimeSpan 对象，表示从给定时间戳到当前时间的间隔。 TimestampMillisToTicks(long) 将Unix毫秒时间戳转换为自公元1年1月1日以来的刻度数。 public static long TimestampMillisToTicks(long timestampMillisSeconds) Parameters timestampMillisSeconds long Unix毫秒时间戳，从1970年1月1日以来的毫秒数。 Returns long 自公元1年1月1日以来的刻度数。 TimestampToTicks(long) 将Unix时间戳转换为自公元1年1月1日以来的刻度数。 public static long TimestampToTicks(long timestampSeconds) Parameters timestampSeconds long Unix时间戳，从1970年1月1日以来的秒数。 Returns long 自公元1年1月1日以来的刻度数。 UnixTimeMilliseconds() 当前UTC 时间 毫秒时间戳 public static long UnixTimeMilliseconds() Returns long 当前UTC时间的毫秒时间戳。 UnixTimeSeconds() 当前UTC 时间 秒时间戳 public static long UnixTimeSeconds() Returns long 当前UTC时间的秒时间戳。 UtcToLocalDateTime(long) UTC 时间戳 转换成本地时间 public static DateTime UtcToLocalDateTime(long utcTimestamp) Parameters utcTimestamp long UTC时间戳,单位秒 Returns DateTime 转换后的本地时间。 UtcToUtcDateTime(long) UTC 时间戳 转换成UTC时间 public static DateTime UtcToUtcDateTime(long utcTimestamp) Parameters utcTimestamp long UTC时间戳,单位秒 Returns DateTime 转换后的UTC时间。"
  },
  "api/GameFrameX.Utility.TwoParam-2.html": {
    "href": "api/GameFrameX.Utility.TwoParam-2.html",
    "title": "Class TwoParam<T1, T2> | GameFrameX.Server",
    "keywords": "Class TwoParam<T1, T2> Namespace GameFrameX.Utility Assembly GameFrameX.Utility.dll 两个参数 public class TwoParam<T1, T2> : Param Type Parameters T1 T2 Inheritance object Param TwoParam<T1, T2> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Extension Methods ObjectExtension.CheckNotNull<T>(T, string) ObjectExtension.CheckNotNull<T>(T, string, string) ObjectExtension.IsNotNull(object) ObjectExtension.IsNull(object) Constructors TwoParam(T1, T2) 两个参数 public TwoParam(T1 t1, T2 t2) Parameters t1 T1 t2 T2 Fields Value1 参数1 public readonly T1 Value1 Field Value T1 Value2 参数2 public readonly T2 Value2 Field Value T2"
  },
  "api/GameFrameX.Utility.html": {
    "href": "api/GameFrameX.Utility.html",
    "title": "Namespace GameFrameX.Utility | GameFrameX.Server",
    "keywords": "Namespace GameFrameX.Utility Classes AssemblyHelper 程序集辅助器 BigInteger Compression 压缩解压缩辅助器。 ConsoleHelper 控制台辅助器 FiveParam<T1, T2, T3, T4, T5> 五个参数 FourParam<T1, T2, T3, T4> 四个参数 IdGenerator ID生成器，提供多种生成唯一标识符的方法，包括整数ID、长整数ID和字符串ID IllegalWordDetection 此算法思想来源于“http://www.cnblogs.com/sumtec/archive/2008/02/01/1061742.html”,经测试，检测\"屄defg东正教dsa SofU ckd臺灣青年獨\"这个字符串并替换掉敏感词平均花费2.7ms JsonHelper Json 帮助类 Net 网络端口帮助类 OneParam<T> 单个参数 Param 参数 PlatformRuntimeHelper 平台运行时帮助类 Random 随机相关的实用函数。 Singleton<T> 单例类 ThreeParam<T1, T2, T3> 三个参数 TimeHelper 时间帮助工具类 TwoParam<T1, T2> 两个参数 Structs LNumber"
  },
  "index.html": {
    "href": "index.html",
    "title": "| GameFrameX.Server",
    "keywords": "该页面为GameFrameX 的服务器端的接口API 说明主页. 请切换到 API Reference([./api/](https://gameframex.github.io/GameFrameX.Server/api/GameFrameX.StartUp.GameApp.html)) 页面查看Api 列表和接口说明 也可以点击 文档主页(https://gameframex.doc.alianblank.com) 去向文档主站点 也可以点击 项目主页(https://github.com/GameFrameX) 去向项目主站点 镜像站点列表 站点名称 站点地址 码云(Gitee) https://gitee.com/gameframex 开放原子开源基金会(atomgit) https://atomgit.com/gameframex CSDN(gitcode) https://gitcode.net/gameframex GitLab官方(gitlab) https://gitlab.com/gameframex 法国公司 基于GitLab(framagit) https://framagit.org/gameframex 中国计算机学会-开源发展委员会(www.gitlink.org.cn) https://gitlink.org.cn/GameFrameX"
  }
}