
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Text.Json;
using GameFrameX.Config.Core;

namespace GameFrameX.Config.ai
{
    public sealed partial class UeLoop : ai.Decorator
    {
        /*
        public UeLoop(int Id, string NodeName, ai.EFlowAbortMode FlowAbortMode, int NumLoops, bool InfiniteLoop, float InfiniteLoopTimeoutTime)  : base(Id, NodeName, FlowAbortMode) 
        {
            this.NumLoops = NumLoops;
            this.InfiniteLoop = InfiniteLoop;
            this.InfiniteLoopTimeoutTime = InfiniteLoopTimeoutTime;
            PostInit();
        }        
        */

        public UeLoop(JsonElement _buf)  : base(_buf) 
        {
            NumLoops = _buf.GetProperty("num_loops").GetInt32();
            InfiniteLoop = _buf.GetProperty("infinite_loop").GetBoolean();
            InfiniteLoopTimeoutTime = _buf.GetProperty("infinite_loop_timeout_time").GetSingle();
        }
    
        public static UeLoop DeserializeUeLoop(JsonElement _buf)
        {
            return new ai.UeLoop(_buf);
        }

        public int NumLoops { private set; get; }
        public bool InfiniteLoop { private set; get; }
        public float InfiniteLoopTimeoutTime { private set; get; }

        private const int __ID__ = -513308166;
        public override int GetTypeId() => __ID__;

        public override void ResolveRef(TablesComponent tables)
        {
            base.ResolveRef(tables);
            
            
            
        }

        public override string ToString()
        {
            return "{ "
            + "id:" + Id + ","
            + "nodeName:" + NodeName + ","
            + "flowAbortMode:" + FlowAbortMode + ","
            + "numLoops:" + NumLoops + ","
            + "infiniteLoop:" + InfiniteLoop + ","
            + "infiniteLoopTimeoutTime:" + InfiniteLoopTimeoutTime + ","
            + "}";
        }

        partial void PostInit();
    }
}
