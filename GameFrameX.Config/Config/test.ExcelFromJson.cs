
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System.Text.Json;
using GameFrameX.Core.Config;

namespace GameFrameX.Config.test
{
    public sealed partial class ExcelFromJson : BeanBase
    {
        /*
        public ExcelFromJson(int X4, bool X1, long X5, float X6, string S1, string S2, long T1, test.DemoType1 X12, test.DemoEnum X13, test.DemoDynamic X14, int[] K1, System.Collections.Generic.Dictionary<int, int> K8, System.Collections.Generic.List<test.DemoE2> K9, test.DemoDynamic[] K15) 
        {
            this.X4 = X4;
            this.X1 = X1;
            this.X5 = X5;
            this.X6 = X6;
            this.S1 = S1;
            this.S2 = S2;
            this.T1 = T1;
            this.X12 = X12;
            this.X13 = X13;
            this.X14 = X14;
            this.K1 = K1;
            this.K8 = K8;
            this.K9 = K9;
            this.K15 = K15;
            PostInit();
        }        
        */

        public ExcelFromJson(JsonElement _buf) 
        {
            X4 = _buf.GetProperty("x4").GetInt32();
            X1 = _buf.GetProperty("x1").GetBoolean();
            X5 = _buf.GetProperty("x5").GetInt64();
            X6 = _buf.GetProperty("x6").GetSingle();
            S1 = _buf.GetProperty("s1").GetString();
            S2 = _buf.GetProperty("s2").GetString();
            T1 = _buf.GetProperty("t1").GetInt64();
            X12 = test.DemoType1.DeserializeDemoType1(_buf.GetProperty("x12"));
            X13 = (test.DemoEnum)_buf.GetProperty("x13").GetInt32();
            X14 = test.DemoDynamic.DeserializeDemoDynamic(_buf.GetProperty("x14"));
            { var __json0 = _buf.GetProperty("k1"); int _n0 = __json0.GetArrayLength(); K1 = new int[_n0]; int __index0=0; foreach(JsonElement __e0 in __json0.EnumerateArray()) { int __v0;  __v0 = __e0.GetInt32();  K1[__index0++] = __v0; }   }
            { var __json0 = _buf.GetProperty("k8"); K8 = new System.Collections.Generic.Dictionary<int, int>(__json0.GetArrayLength()); foreach(JsonElement __e0 in __json0.EnumerateArray()) { int _k0;  _k0 = __e0[0].GetInt32(); int _v0;  _v0 = __e0[1].GetInt32();  K8.Add(_k0, _v0); }   }
            { var __json0 = _buf.GetProperty("k9"); K9 = new System.Collections.Generic.List<test.DemoE2>(__json0.GetArrayLength()); foreach(JsonElement __e0 in __json0.EnumerateArray()) { test.DemoE2 __v0;  __v0 = test.DemoE2.DeserializeDemoE2(__e0);  K9.Add(__v0); }   }
            { var __json0 = _buf.GetProperty("k15"); int _n0 = __json0.GetArrayLength(); K15 = new test.DemoDynamic[_n0]; int __index0=0; foreach(JsonElement __e0 in __json0.EnumerateArray()) { test.DemoDynamic __v0;  __v0 = test.DemoDynamic.DeserializeDemoDynamic(__e0);  K15[__index0++] = __v0; }   }
        }
    
        public static ExcelFromJson DeserializeExcelFromJson(JsonElement _buf)
        {
            return new test.ExcelFromJson(_buf);
        }

        public int X4 { private set; get; }
        public bool X1 { private set; get; }
        public long X5 { private set; get; }
        public float X6 { private set; get; }
        public string S1 { private set; get; }
        public string S2 { private set; get; }
        public long T1 { private set; get; }
        public test.DemoType1 X12 { private set; get; }
        public test.DemoEnum X13 { private set; get; }
        public test.DemoDynamic X14 { private set; get; }
        public int[] K1 { private set; get; }
        public System.Collections.Generic.Dictionary<int, int> K8 { private set; get; }
        public System.Collections.Generic.List<test.DemoE2> K9 { private set; get; }
        public test.DemoDynamic[] K15 { private set; get; }

        private const int __ID__ = -1485706483;
        public override int GetTypeId() => __ID__;

        public  void ResolveRef(TablesComponent tables)
        {
            
            
            
            
            
            
            
            X12?.ResolveRef(tables);
            
            X14?.ResolveRef(tables);
            
            
            
            foreach (var _e in K15) { _e?.ResolveRef(tables); }
        }

        public override string ToString()
        {
            return "{ "
            + "x4:" + X4 + ","
            + "x1:" + X1 + ","
            + "x5:" + X5 + ","
            + "x6:" + X6 + ","
            + "s1:" + S1 + ","
            + "s2:" + S2 + ","
            + "t1:" + T1 + ","
            + "x12:" + X12 + ","
            + "x13:" + X13 + ","
            + "x14:" + X14 + ","
            + "k1:" + StringUtil.CollectionToString(K1) + ","
            + "k8:" + StringUtil.CollectionToString(K8) + ","
            + "k9:" + StringUtil.CollectionToString(K9) + ","
            + "k15:" + StringUtil.CollectionToString(K15) + ","
            + "}";
        }

        partial void PostInit();
    }
}
